// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: equipment.proto
// Protobuf Java Version: 4.27.3

package com.github.nkibler7.osrswikiscraper;

/**
 * <pre>
 * An item that can be equipped by a player.
 * </pre>
 *
 * Protobuf type {@code github.nkibler7.osrswikiscraper.EquippableItem}
 */
public final class EquippableItem extends
    com.google.protobuf.GeneratedMessage implements
    // @@protoc_insertion_point(message_implements:github.nkibler7.osrswikiscraper.EquippableItem)
    EquippableItemOrBuilder {
private static final long serialVersionUID = 0L;
  static {
    com.google.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
      com.google.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
      /* major= */ 4,
      /* minor= */ 27,
      /* patch= */ 3,
      /* suffix= */ "",
      EquippableItem.class.getName());
  }
  // Use EquippableItem.newBuilder() to construct.
  private EquippableItem(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
    super(builder);
  }
  private EquippableItem() {
    name_ = "";
    slot_ = 0;
  }

  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return com.github.nkibler7.osrswikiscraper.EquipmentOuterClass.internal_static_github_nkibler7_osrswikiscraper_EquippableItem_descriptor;
  }

  @java.lang.Override
  protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return com.github.nkibler7.osrswikiscraper.EquipmentOuterClass.internal_static_github_nkibler7_osrswikiscraper_EquippableItem_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            com.github.nkibler7.osrswikiscraper.EquippableItem.class, com.github.nkibler7.osrswikiscraper.EquippableItem.Builder.class);
  }

  /**
   * <pre>
   * A slot that can hold an equippable item in the player's equipment interface.
   * </pre>
   *
   * Protobuf enum {@code github.nkibler7.osrswikiscraper.EquippableItem.Slot}
   */
  public enum Slot
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>SLOT_UNSPECIFIED = 0;</code>
     */
    SLOT_UNSPECIFIED(0),
    /**
     * <code>SLOT_HEAD = 1;</code>
     */
    SLOT_HEAD(1),
    /**
     * <code>SLOT_CAPE = 2;</code>
     */
    SLOT_CAPE(2),
    /**
     * <code>SLOT_NECK = 3;</code>
     */
    SLOT_NECK(3),
    /**
     * <code>SLOT_WEAPON = 4;</code>
     */
    SLOT_WEAPON(4),
    /**
     * <code>SLOT_BODY = 5;</code>
     */
    SLOT_BODY(5),
    /**
     * <code>SLOT_SHIELD = 6;</code>
     */
    SLOT_SHIELD(6),
    /**
     * <code>SLOT_LEGS = 7;</code>
     */
    SLOT_LEGS(7),
    /**
     * <code>SLOT_HANDS = 8;</code>
     */
    SLOT_HANDS(8),
    /**
     * <code>SLOT_FEET = 9;</code>
     */
    SLOT_FEET(9),
    /**
     * <code>SLOT_RING = 10;</code>
     */
    SLOT_RING(10),
    /**
     * <code>SLOT_AMMO = 11;</code>
     */
    SLOT_AMMO(11),
    UNRECOGNIZED(-1),
    ;

    static {
      com.google.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
        com.google.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
        /* major= */ 4,
        /* minor= */ 27,
        /* patch= */ 3,
        /* suffix= */ "",
        Slot.class.getName());
    }
    /**
     * <code>SLOT_UNSPECIFIED = 0;</code>
     */
    public static final int SLOT_UNSPECIFIED_VALUE = 0;
    /**
     * <code>SLOT_HEAD = 1;</code>
     */
    public static final int SLOT_HEAD_VALUE = 1;
    /**
     * <code>SLOT_CAPE = 2;</code>
     */
    public static final int SLOT_CAPE_VALUE = 2;
    /**
     * <code>SLOT_NECK = 3;</code>
     */
    public static final int SLOT_NECK_VALUE = 3;
    /**
     * <code>SLOT_WEAPON = 4;</code>
     */
    public static final int SLOT_WEAPON_VALUE = 4;
    /**
     * <code>SLOT_BODY = 5;</code>
     */
    public static final int SLOT_BODY_VALUE = 5;
    /**
     * <code>SLOT_SHIELD = 6;</code>
     */
    public static final int SLOT_SHIELD_VALUE = 6;
    /**
     * <code>SLOT_LEGS = 7;</code>
     */
    public static final int SLOT_LEGS_VALUE = 7;
    /**
     * <code>SLOT_HANDS = 8;</code>
     */
    public static final int SLOT_HANDS_VALUE = 8;
    /**
     * <code>SLOT_FEET = 9;</code>
     */
    public static final int SLOT_FEET_VALUE = 9;
    /**
     * <code>SLOT_RING = 10;</code>
     */
    public static final int SLOT_RING_VALUE = 10;
    /**
     * <code>SLOT_AMMO = 11;</code>
     */
    public static final int SLOT_AMMO_VALUE = 11;


    public final int getNumber() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalArgumentException(
            "Can't get the number of an unknown enum value.");
      }
      return value;
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static Slot valueOf(int value) {
      return forNumber(value);
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     */
    public static Slot forNumber(int value) {
      switch (value) {
        case 0: return SLOT_UNSPECIFIED;
        case 1: return SLOT_HEAD;
        case 2: return SLOT_CAPE;
        case 3: return SLOT_NECK;
        case 4: return SLOT_WEAPON;
        case 5: return SLOT_BODY;
        case 6: return SLOT_SHIELD;
        case 7: return SLOT_LEGS;
        case 8: return SLOT_HANDS;
        case 9: return SLOT_FEET;
        case 10: return SLOT_RING;
        case 11: return SLOT_AMMO;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<Slot>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        Slot> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<Slot>() {
            public Slot findValueByNumber(int number) {
              return Slot.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalStateException(
            "Can't get the descriptor of an unrecognized enum value.");
      }
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return com.github.nkibler7.osrswikiscraper.EquippableItem.getDescriptor().getEnumTypes().get(0);
    }

    private static final Slot[] VALUES = values();

    public static Slot valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      if (desc.getIndex() == -1) {
        return UNRECOGNIZED;
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private Slot(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:github.nkibler7.osrswikiscraper.EquippableItem.Slot)
  }

  private int bitField0_;
  public static final int ID_FIELD_NUMBER = 1;
  private int id_ = 0;
  /**
   * <pre>
   * The unique ID for this item.
   * </pre>
   *
   * <code>int32 id = 1;</code>
   * @return The id.
   */
  @java.lang.Override
  public int getId() {
    return id_;
  }

  public static final int NAME_FIELD_NUMBER = 2;
  @SuppressWarnings("serial")
  private volatile java.lang.Object name_ = "";
  /**
   * <pre>
   * The name of this item.
   * </pre>
   *
   * <code>string name = 2;</code>
   * @return The name.
   */
  @java.lang.Override
  public java.lang.String getName() {
    java.lang.Object ref = name_;
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = 
          (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      name_ = s;
      return s;
    }
  }
  /**
   * <pre>
   * The name of this item.
   * </pre>
   *
   * <code>string name = 2;</code>
   * @return The bytes for name.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString
      getNameBytes() {
    java.lang.Object ref = name_;
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b = 
          com.google.protobuf.ByteString.copyFromUtf8(
              (java.lang.String) ref);
      name_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int STAT_BONUSES_FIELD_NUMBER = 3;
  private com.github.nkibler7.osrswikiscraper.StatBonuses statBonuses_;
  /**
   * <pre>
   * The set of unique stat bonuses applied by this item when worn.
   * </pre>
   *
   * <code>.github.nkibler7.osrswikiscraper.StatBonuses stat_bonuses = 3;</code>
   * @return Whether the statBonuses field is set.
   */
  @java.lang.Override
  public boolean hasStatBonuses() {
    return ((bitField0_ & 0x00000001) != 0);
  }
  /**
   * <pre>
   * The set of unique stat bonuses applied by this item when worn.
   * </pre>
   *
   * <code>.github.nkibler7.osrswikiscraper.StatBonuses stat_bonuses = 3;</code>
   * @return The statBonuses.
   */
  @java.lang.Override
  public com.github.nkibler7.osrswikiscraper.StatBonuses getStatBonuses() {
    return statBonuses_ == null ? com.github.nkibler7.osrswikiscraper.StatBonuses.getDefaultInstance() : statBonuses_;
  }
  /**
   * <pre>
   * The set of unique stat bonuses applied by this item when worn.
   * </pre>
   *
   * <code>.github.nkibler7.osrswikiscraper.StatBonuses stat_bonuses = 3;</code>
   */
  @java.lang.Override
  public com.github.nkibler7.osrswikiscraper.StatBonusesOrBuilder getStatBonusesOrBuilder() {
    return statBonuses_ == null ? com.github.nkibler7.osrswikiscraper.StatBonuses.getDefaultInstance() : statBonuses_;
  }

  public static final int SLOT_FIELD_NUMBER = 4;
  private int slot_ = 0;
  /**
   * <pre>
   * The slot that this item occupies in the player's equipment interface.
   *
   * Only one item can occupy a given slot at a time, and some weapons may occupy both the weapon &amp; shield slots
   * (indicated by the `WeaponDetails.is_two_handed` field).
   * </pre>
   *
   * <code>.github.nkibler7.osrswikiscraper.EquippableItem.Slot slot = 4;</code>
   * @return The enum numeric value on the wire for slot.
   */
  @java.lang.Override public int getSlotValue() {
    return slot_;
  }
  /**
   * <pre>
   * The slot that this item occupies in the player's equipment interface.
   *
   * Only one item can occupy a given slot at a time, and some weapons may occupy both the weapon &amp; shield slots
   * (indicated by the `WeaponDetails.is_two_handed` field).
   * </pre>
   *
   * <code>.github.nkibler7.osrswikiscraper.EquippableItem.Slot slot = 4;</code>
   * @return The slot.
   */
  @java.lang.Override public com.github.nkibler7.osrswikiscraper.EquippableItem.Slot getSlot() {
    com.github.nkibler7.osrswikiscraper.EquippableItem.Slot result = com.github.nkibler7.osrswikiscraper.EquippableItem.Slot.forNumber(slot_);
    return result == null ? com.github.nkibler7.osrswikiscraper.EquippableItem.Slot.UNRECOGNIZED : result;
  }

  public static final int WEAPON_DETAILS_FIELD_NUMBER = 5;
  private com.github.nkibler7.osrswikiscraper.WeaponDetails weaponDetails_;
  /**
   * <pre>
   * Details specific to a weapon. This field is only set if the `slot` is `SLOT_WEAPON`.
   * </pre>
   *
   * <code>.github.nkibler7.osrswikiscraper.WeaponDetails weapon_details = 5;</code>
   * @return Whether the weaponDetails field is set.
   */
  @java.lang.Override
  public boolean hasWeaponDetails() {
    return ((bitField0_ & 0x00000002) != 0);
  }
  /**
   * <pre>
   * Details specific to a weapon. This field is only set if the `slot` is `SLOT_WEAPON`.
   * </pre>
   *
   * <code>.github.nkibler7.osrswikiscraper.WeaponDetails weapon_details = 5;</code>
   * @return The weaponDetails.
   */
  @java.lang.Override
  public com.github.nkibler7.osrswikiscraper.WeaponDetails getWeaponDetails() {
    return weaponDetails_ == null ? com.github.nkibler7.osrswikiscraper.WeaponDetails.getDefaultInstance() : weaponDetails_;
  }
  /**
   * <pre>
   * Details specific to a weapon. This field is only set if the `slot` is `SLOT_WEAPON`.
   * </pre>
   *
   * <code>.github.nkibler7.osrswikiscraper.WeaponDetails weapon_details = 5;</code>
   */
  @java.lang.Override
  public com.github.nkibler7.osrswikiscraper.WeaponDetailsOrBuilder getWeaponDetailsOrBuilder() {
    return weaponDetails_ == null ? com.github.nkibler7.osrswikiscraper.WeaponDetails.getDefaultInstance() : weaponDetails_;
  }

  private byte memoizedIsInitialized = -1;
  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (id_ != 0) {
      output.writeInt32(1, id_);
    }
    if (!com.google.protobuf.GeneratedMessage.isStringEmpty(name_)) {
      com.google.protobuf.GeneratedMessage.writeString(output, 2, name_);
    }
    if (((bitField0_ & 0x00000001) != 0)) {
      output.writeMessage(3, getStatBonuses());
    }
    if (slot_ != com.github.nkibler7.osrswikiscraper.EquippableItem.Slot.SLOT_UNSPECIFIED.getNumber()) {
      output.writeEnum(4, slot_);
    }
    if (((bitField0_ & 0x00000002) != 0)) {
      output.writeMessage(5, getWeaponDetails());
    }
    getUnknownFields().writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (id_ != 0) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt32Size(1, id_);
    }
    if (!com.google.protobuf.GeneratedMessage.isStringEmpty(name_)) {
      size += com.google.protobuf.GeneratedMessage.computeStringSize(2, name_);
    }
    if (((bitField0_ & 0x00000001) != 0)) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(3, getStatBonuses());
    }
    if (slot_ != com.github.nkibler7.osrswikiscraper.EquippableItem.Slot.SLOT_UNSPECIFIED.getNumber()) {
      size += com.google.protobuf.CodedOutputStream
        .computeEnumSize(4, slot_);
    }
    if (((bitField0_ & 0x00000002) != 0)) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(5, getWeaponDetails());
    }
    size += getUnknownFields().getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof com.github.nkibler7.osrswikiscraper.EquippableItem)) {
      return super.equals(obj);
    }
    com.github.nkibler7.osrswikiscraper.EquippableItem other = (com.github.nkibler7.osrswikiscraper.EquippableItem) obj;

    if (getId()
        != other.getId()) return false;
    if (!getName()
        .equals(other.getName())) return false;
    if (hasStatBonuses() != other.hasStatBonuses()) return false;
    if (hasStatBonuses()) {
      if (!getStatBonuses()
          .equals(other.getStatBonuses())) return false;
    }
    if (slot_ != other.slot_) return false;
    if (hasWeaponDetails() != other.hasWeaponDetails()) return false;
    if (hasWeaponDetails()) {
      if (!getWeaponDetails()
          .equals(other.getWeaponDetails())) return false;
    }
    if (!getUnknownFields().equals(other.getUnknownFields())) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    hash = (37 * hash) + ID_FIELD_NUMBER;
    hash = (53 * hash) + getId();
    hash = (37 * hash) + NAME_FIELD_NUMBER;
    hash = (53 * hash) + getName().hashCode();
    if (hasStatBonuses()) {
      hash = (37 * hash) + STAT_BONUSES_FIELD_NUMBER;
      hash = (53 * hash) + getStatBonuses().hashCode();
    }
    hash = (37 * hash) + SLOT_FIELD_NUMBER;
    hash = (53 * hash) + slot_;
    if (hasWeaponDetails()) {
      hash = (37 * hash) + WEAPON_DETAILS_FIELD_NUMBER;
      hash = (53 * hash) + getWeaponDetails().hashCode();
    }
    hash = (29 * hash) + getUnknownFields().hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static com.github.nkibler7.osrswikiscraper.EquippableItem parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.github.nkibler7.osrswikiscraper.EquippableItem parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.github.nkibler7.osrswikiscraper.EquippableItem parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.github.nkibler7.osrswikiscraper.EquippableItem parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.github.nkibler7.osrswikiscraper.EquippableItem parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.github.nkibler7.osrswikiscraper.EquippableItem parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.github.nkibler7.osrswikiscraper.EquippableItem parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessage
        .parseWithIOException(PARSER, input);
  }
  public static com.github.nkibler7.osrswikiscraper.EquippableItem parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessage
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  public static com.github.nkibler7.osrswikiscraper.EquippableItem parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessage
        .parseDelimitedWithIOException(PARSER, input);
  }

  public static com.github.nkibler7.osrswikiscraper.EquippableItem parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessage
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.github.nkibler7.osrswikiscraper.EquippableItem parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessage
        .parseWithIOException(PARSER, input);
  }
  public static com.github.nkibler7.osrswikiscraper.EquippableItem parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessage
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(com.github.nkibler7.osrswikiscraper.EquippableItem prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessage.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * <pre>
   * An item that can be equipped by a player.
   * </pre>
   *
   * Protobuf type {@code github.nkibler7.osrswikiscraper.EquippableItem}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessage.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:github.nkibler7.osrswikiscraper.EquippableItem)
      com.github.nkibler7.osrswikiscraper.EquippableItemOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.github.nkibler7.osrswikiscraper.EquipmentOuterClass.internal_static_github_nkibler7_osrswikiscraper_EquippableItem_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.github.nkibler7.osrswikiscraper.EquipmentOuterClass.internal_static_github_nkibler7_osrswikiscraper_EquippableItem_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.github.nkibler7.osrswikiscraper.EquippableItem.class, com.github.nkibler7.osrswikiscraper.EquippableItem.Builder.class);
    }

    // Construct using com.github.nkibler7.osrswikiscraper.EquippableItem.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }
    private void maybeForceBuilderInitialization() {
      if (com.google.protobuf.GeneratedMessage
              .alwaysUseFieldBuilders) {
        getStatBonusesFieldBuilder();
        getWeaponDetailsFieldBuilder();
      }
    }
    @java.lang.Override
    public Builder clear() {
      super.clear();
      bitField0_ = 0;
      id_ = 0;
      name_ = "";
      statBonuses_ = null;
      if (statBonusesBuilder_ != null) {
        statBonusesBuilder_.dispose();
        statBonusesBuilder_ = null;
      }
      slot_ = 0;
      weaponDetails_ = null;
      if (weaponDetailsBuilder_ != null) {
        weaponDetailsBuilder_.dispose();
        weaponDetailsBuilder_ = null;
      }
      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return com.github.nkibler7.osrswikiscraper.EquipmentOuterClass.internal_static_github_nkibler7_osrswikiscraper_EquippableItem_descriptor;
    }

    @java.lang.Override
    public com.github.nkibler7.osrswikiscraper.EquippableItem getDefaultInstanceForType() {
      return com.github.nkibler7.osrswikiscraper.EquippableItem.getDefaultInstance();
    }

    @java.lang.Override
    public com.github.nkibler7.osrswikiscraper.EquippableItem build() {
      com.github.nkibler7.osrswikiscraper.EquippableItem result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public com.github.nkibler7.osrswikiscraper.EquippableItem buildPartial() {
      com.github.nkibler7.osrswikiscraper.EquippableItem result = new com.github.nkibler7.osrswikiscraper.EquippableItem(this);
      if (bitField0_ != 0) { buildPartial0(result); }
      onBuilt();
      return result;
    }

    private void buildPartial0(com.github.nkibler7.osrswikiscraper.EquippableItem result) {
      int from_bitField0_ = bitField0_;
      if (((from_bitField0_ & 0x00000001) != 0)) {
        result.id_ = id_;
      }
      if (((from_bitField0_ & 0x00000002) != 0)) {
        result.name_ = name_;
      }
      int to_bitField0_ = 0;
      if (((from_bitField0_ & 0x00000004) != 0)) {
        result.statBonuses_ = statBonusesBuilder_ == null
            ? statBonuses_
            : statBonusesBuilder_.build();
        to_bitField0_ |= 0x00000001;
      }
      if (((from_bitField0_ & 0x00000008) != 0)) {
        result.slot_ = slot_;
      }
      if (((from_bitField0_ & 0x00000010) != 0)) {
        result.weaponDetails_ = weaponDetailsBuilder_ == null
            ? weaponDetails_
            : weaponDetailsBuilder_.build();
        to_bitField0_ |= 0x00000002;
      }
      result.bitField0_ |= to_bitField0_;
    }

    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof com.github.nkibler7.osrswikiscraper.EquippableItem) {
        return mergeFrom((com.github.nkibler7.osrswikiscraper.EquippableItem)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(com.github.nkibler7.osrswikiscraper.EquippableItem other) {
      if (other == com.github.nkibler7.osrswikiscraper.EquippableItem.getDefaultInstance()) return this;
      if (other.getId() != 0) {
        setId(other.getId());
      }
      if (!other.getName().isEmpty()) {
        name_ = other.name_;
        bitField0_ |= 0x00000002;
        onChanged();
      }
      if (other.hasStatBonuses()) {
        mergeStatBonuses(other.getStatBonuses());
      }
      if (other.slot_ != 0) {
        setSlotValue(other.getSlotValue());
      }
      if (other.hasWeaponDetails()) {
        mergeWeaponDetails(other.getWeaponDetails());
      }
      this.mergeUnknownFields(other.getUnknownFields());
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 8: {
              id_ = input.readInt32();
              bitField0_ |= 0x00000001;
              break;
            } // case 8
            case 18: {
              name_ = input.readStringRequireUtf8();
              bitField0_ |= 0x00000002;
              break;
            } // case 18
            case 26: {
              input.readMessage(
                  getStatBonusesFieldBuilder().getBuilder(),
                  extensionRegistry);
              bitField0_ |= 0x00000004;
              break;
            } // case 26
            case 32: {
              slot_ = input.readEnum();
              bitField0_ |= 0x00000008;
              break;
            } // case 32
            case 42: {
              input.readMessage(
                  getWeaponDetailsFieldBuilder().getBuilder(),
                  extensionRegistry);
              bitField0_ |= 0x00000010;
              break;
            } // case 42
            default: {
              if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                done = true; // was an endgroup tag
              }
              break;
            } // default:
          } // switch (tag)
        } // while (!done)
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.unwrapIOException();
      } finally {
        onChanged();
      } // finally
      return this;
    }
    private int bitField0_;

    private int id_ ;
    /**
     * <pre>
     * The unique ID for this item.
     * </pre>
     *
     * <code>int32 id = 1;</code>
     * @return The id.
     */
    @java.lang.Override
    public int getId() {
      return id_;
    }
    /**
     * <pre>
     * The unique ID for this item.
     * </pre>
     *
     * <code>int32 id = 1;</code>
     * @param value The id to set.
     * @return This builder for chaining.
     */
    public Builder setId(int value) {

      id_ = value;
      bitField0_ |= 0x00000001;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The unique ID for this item.
     * </pre>
     *
     * <code>int32 id = 1;</code>
     * @return This builder for chaining.
     */
    public Builder clearId() {
      bitField0_ = (bitField0_ & ~0x00000001);
      id_ = 0;
      onChanged();
      return this;
    }

    private java.lang.Object name_ = "";
    /**
     * <pre>
     * The name of this item.
     * </pre>
     *
     * <code>string name = 2;</code>
     * @return The name.
     */
    public java.lang.String getName() {
      java.lang.Object ref = name_;
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        name_ = s;
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }
    /**
     * <pre>
     * The name of this item.
     * </pre>
     *
     * <code>string name = 2;</code>
     * @return The bytes for name.
     */
    public com.google.protobuf.ByteString
        getNameBytes() {
      java.lang.Object ref = name_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        name_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <pre>
     * The name of this item.
     * </pre>
     *
     * <code>string name = 2;</code>
     * @param value The name to set.
     * @return This builder for chaining.
     */
    public Builder setName(
        java.lang.String value) {
      if (value == null) { throw new NullPointerException(); }
      name_ = value;
      bitField0_ |= 0x00000002;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The name of this item.
     * </pre>
     *
     * <code>string name = 2;</code>
     * @return This builder for chaining.
     */
    public Builder clearName() {
      name_ = getDefaultInstance().getName();
      bitField0_ = (bitField0_ & ~0x00000002);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The name of this item.
     * </pre>
     *
     * <code>string name = 2;</code>
     * @param value The bytes for name to set.
     * @return This builder for chaining.
     */
    public Builder setNameBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) { throw new NullPointerException(); }
      checkByteStringIsUtf8(value);
      name_ = value;
      bitField0_ |= 0x00000002;
      onChanged();
      return this;
    }

    private com.github.nkibler7.osrswikiscraper.StatBonuses statBonuses_;
    private com.google.protobuf.SingleFieldBuilder<
        com.github.nkibler7.osrswikiscraper.StatBonuses, com.github.nkibler7.osrswikiscraper.StatBonuses.Builder, com.github.nkibler7.osrswikiscraper.StatBonusesOrBuilder> statBonusesBuilder_;
    /**
     * <pre>
     * The set of unique stat bonuses applied by this item when worn.
     * </pre>
     *
     * <code>.github.nkibler7.osrswikiscraper.StatBonuses stat_bonuses = 3;</code>
     * @return Whether the statBonuses field is set.
     */
    public boolean hasStatBonuses() {
      return ((bitField0_ & 0x00000004) != 0);
    }
    /**
     * <pre>
     * The set of unique stat bonuses applied by this item when worn.
     * </pre>
     *
     * <code>.github.nkibler7.osrswikiscraper.StatBonuses stat_bonuses = 3;</code>
     * @return The statBonuses.
     */
    public com.github.nkibler7.osrswikiscraper.StatBonuses getStatBonuses() {
      if (statBonusesBuilder_ == null) {
        return statBonuses_ == null ? com.github.nkibler7.osrswikiscraper.StatBonuses.getDefaultInstance() : statBonuses_;
      } else {
        return statBonusesBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * The set of unique stat bonuses applied by this item when worn.
     * </pre>
     *
     * <code>.github.nkibler7.osrswikiscraper.StatBonuses stat_bonuses = 3;</code>
     */
    public Builder setStatBonuses(com.github.nkibler7.osrswikiscraper.StatBonuses value) {
      if (statBonusesBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        statBonuses_ = value;
      } else {
        statBonusesBuilder_.setMessage(value);
      }
      bitField0_ |= 0x00000004;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The set of unique stat bonuses applied by this item when worn.
     * </pre>
     *
     * <code>.github.nkibler7.osrswikiscraper.StatBonuses stat_bonuses = 3;</code>
     */
    public Builder setStatBonuses(
        com.github.nkibler7.osrswikiscraper.StatBonuses.Builder builderForValue) {
      if (statBonusesBuilder_ == null) {
        statBonuses_ = builderForValue.build();
      } else {
        statBonusesBuilder_.setMessage(builderForValue.build());
      }
      bitField0_ |= 0x00000004;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The set of unique stat bonuses applied by this item when worn.
     * </pre>
     *
     * <code>.github.nkibler7.osrswikiscraper.StatBonuses stat_bonuses = 3;</code>
     */
    public Builder mergeStatBonuses(com.github.nkibler7.osrswikiscraper.StatBonuses value) {
      if (statBonusesBuilder_ == null) {
        if (((bitField0_ & 0x00000004) != 0) &&
          statBonuses_ != null &&
          statBonuses_ != com.github.nkibler7.osrswikiscraper.StatBonuses.getDefaultInstance()) {
          getStatBonusesBuilder().mergeFrom(value);
        } else {
          statBonuses_ = value;
        }
      } else {
        statBonusesBuilder_.mergeFrom(value);
      }
      if (statBonuses_ != null) {
        bitField0_ |= 0x00000004;
        onChanged();
      }
      return this;
    }
    /**
     * <pre>
     * The set of unique stat bonuses applied by this item when worn.
     * </pre>
     *
     * <code>.github.nkibler7.osrswikiscraper.StatBonuses stat_bonuses = 3;</code>
     */
    public Builder clearStatBonuses() {
      bitField0_ = (bitField0_ & ~0x00000004);
      statBonuses_ = null;
      if (statBonusesBuilder_ != null) {
        statBonusesBuilder_.dispose();
        statBonusesBuilder_ = null;
      }
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The set of unique stat bonuses applied by this item when worn.
     * </pre>
     *
     * <code>.github.nkibler7.osrswikiscraper.StatBonuses stat_bonuses = 3;</code>
     */
    public com.github.nkibler7.osrswikiscraper.StatBonuses.Builder getStatBonusesBuilder() {
      bitField0_ |= 0x00000004;
      onChanged();
      return getStatBonusesFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * The set of unique stat bonuses applied by this item when worn.
     * </pre>
     *
     * <code>.github.nkibler7.osrswikiscraper.StatBonuses stat_bonuses = 3;</code>
     */
    public com.github.nkibler7.osrswikiscraper.StatBonusesOrBuilder getStatBonusesOrBuilder() {
      if (statBonusesBuilder_ != null) {
        return statBonusesBuilder_.getMessageOrBuilder();
      } else {
        return statBonuses_ == null ?
            com.github.nkibler7.osrswikiscraper.StatBonuses.getDefaultInstance() : statBonuses_;
      }
    }
    /**
     * <pre>
     * The set of unique stat bonuses applied by this item when worn.
     * </pre>
     *
     * <code>.github.nkibler7.osrswikiscraper.StatBonuses stat_bonuses = 3;</code>
     */
    private com.google.protobuf.SingleFieldBuilder<
        com.github.nkibler7.osrswikiscraper.StatBonuses, com.github.nkibler7.osrswikiscraper.StatBonuses.Builder, com.github.nkibler7.osrswikiscraper.StatBonusesOrBuilder> 
        getStatBonusesFieldBuilder() {
      if (statBonusesBuilder_ == null) {
        statBonusesBuilder_ = new com.google.protobuf.SingleFieldBuilder<
            com.github.nkibler7.osrswikiscraper.StatBonuses, com.github.nkibler7.osrswikiscraper.StatBonuses.Builder, com.github.nkibler7.osrswikiscraper.StatBonusesOrBuilder>(
                getStatBonuses(),
                getParentForChildren(),
                isClean());
        statBonuses_ = null;
      }
      return statBonusesBuilder_;
    }

    private int slot_ = 0;
    /**
     * <pre>
     * The slot that this item occupies in the player's equipment interface.
     *
     * Only one item can occupy a given slot at a time, and some weapons may occupy both the weapon &amp; shield slots
     * (indicated by the `WeaponDetails.is_two_handed` field).
     * </pre>
     *
     * <code>.github.nkibler7.osrswikiscraper.EquippableItem.Slot slot = 4;</code>
     * @return The enum numeric value on the wire for slot.
     */
    @java.lang.Override public int getSlotValue() {
      return slot_;
    }
    /**
     * <pre>
     * The slot that this item occupies in the player's equipment interface.
     *
     * Only one item can occupy a given slot at a time, and some weapons may occupy both the weapon &amp; shield slots
     * (indicated by the `WeaponDetails.is_two_handed` field).
     * </pre>
     *
     * <code>.github.nkibler7.osrswikiscraper.EquippableItem.Slot slot = 4;</code>
     * @param value The enum numeric value on the wire for slot to set.
     * @return This builder for chaining.
     */
    public Builder setSlotValue(int value) {
      slot_ = value;
      bitField0_ |= 0x00000008;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The slot that this item occupies in the player's equipment interface.
     *
     * Only one item can occupy a given slot at a time, and some weapons may occupy both the weapon &amp; shield slots
     * (indicated by the `WeaponDetails.is_two_handed` field).
     * </pre>
     *
     * <code>.github.nkibler7.osrswikiscraper.EquippableItem.Slot slot = 4;</code>
     * @return The slot.
     */
    @java.lang.Override
    public com.github.nkibler7.osrswikiscraper.EquippableItem.Slot getSlot() {
      com.github.nkibler7.osrswikiscraper.EquippableItem.Slot result = com.github.nkibler7.osrswikiscraper.EquippableItem.Slot.forNumber(slot_);
      return result == null ? com.github.nkibler7.osrswikiscraper.EquippableItem.Slot.UNRECOGNIZED : result;
    }
    /**
     * <pre>
     * The slot that this item occupies in the player's equipment interface.
     *
     * Only one item can occupy a given slot at a time, and some weapons may occupy both the weapon &amp; shield slots
     * (indicated by the `WeaponDetails.is_two_handed` field).
     * </pre>
     *
     * <code>.github.nkibler7.osrswikiscraper.EquippableItem.Slot slot = 4;</code>
     * @param value The slot to set.
     * @return This builder for chaining.
     */
    public Builder setSlot(com.github.nkibler7.osrswikiscraper.EquippableItem.Slot value) {
      if (value == null) {
        throw new NullPointerException();
      }
      bitField0_ |= 0x00000008;
      slot_ = value.getNumber();
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The slot that this item occupies in the player's equipment interface.
     *
     * Only one item can occupy a given slot at a time, and some weapons may occupy both the weapon &amp; shield slots
     * (indicated by the `WeaponDetails.is_two_handed` field).
     * </pre>
     *
     * <code>.github.nkibler7.osrswikiscraper.EquippableItem.Slot slot = 4;</code>
     * @return This builder for chaining.
     */
    public Builder clearSlot() {
      bitField0_ = (bitField0_ & ~0x00000008);
      slot_ = 0;
      onChanged();
      return this;
    }

    private com.github.nkibler7.osrswikiscraper.WeaponDetails weaponDetails_;
    private com.google.protobuf.SingleFieldBuilder<
        com.github.nkibler7.osrswikiscraper.WeaponDetails, com.github.nkibler7.osrswikiscraper.WeaponDetails.Builder, com.github.nkibler7.osrswikiscraper.WeaponDetailsOrBuilder> weaponDetailsBuilder_;
    /**
     * <pre>
     * Details specific to a weapon. This field is only set if the `slot` is `SLOT_WEAPON`.
     * </pre>
     *
     * <code>.github.nkibler7.osrswikiscraper.WeaponDetails weapon_details = 5;</code>
     * @return Whether the weaponDetails field is set.
     */
    public boolean hasWeaponDetails() {
      return ((bitField0_ & 0x00000010) != 0);
    }
    /**
     * <pre>
     * Details specific to a weapon. This field is only set if the `slot` is `SLOT_WEAPON`.
     * </pre>
     *
     * <code>.github.nkibler7.osrswikiscraper.WeaponDetails weapon_details = 5;</code>
     * @return The weaponDetails.
     */
    public com.github.nkibler7.osrswikiscraper.WeaponDetails getWeaponDetails() {
      if (weaponDetailsBuilder_ == null) {
        return weaponDetails_ == null ? com.github.nkibler7.osrswikiscraper.WeaponDetails.getDefaultInstance() : weaponDetails_;
      } else {
        return weaponDetailsBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * Details specific to a weapon. This field is only set if the `slot` is `SLOT_WEAPON`.
     * </pre>
     *
     * <code>.github.nkibler7.osrswikiscraper.WeaponDetails weapon_details = 5;</code>
     */
    public Builder setWeaponDetails(com.github.nkibler7.osrswikiscraper.WeaponDetails value) {
      if (weaponDetailsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        weaponDetails_ = value;
      } else {
        weaponDetailsBuilder_.setMessage(value);
      }
      bitField0_ |= 0x00000010;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Details specific to a weapon. This field is only set if the `slot` is `SLOT_WEAPON`.
     * </pre>
     *
     * <code>.github.nkibler7.osrswikiscraper.WeaponDetails weapon_details = 5;</code>
     */
    public Builder setWeaponDetails(
        com.github.nkibler7.osrswikiscraper.WeaponDetails.Builder builderForValue) {
      if (weaponDetailsBuilder_ == null) {
        weaponDetails_ = builderForValue.build();
      } else {
        weaponDetailsBuilder_.setMessage(builderForValue.build());
      }
      bitField0_ |= 0x00000010;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Details specific to a weapon. This field is only set if the `slot` is `SLOT_WEAPON`.
     * </pre>
     *
     * <code>.github.nkibler7.osrswikiscraper.WeaponDetails weapon_details = 5;</code>
     */
    public Builder mergeWeaponDetails(com.github.nkibler7.osrswikiscraper.WeaponDetails value) {
      if (weaponDetailsBuilder_ == null) {
        if (((bitField0_ & 0x00000010) != 0) &&
          weaponDetails_ != null &&
          weaponDetails_ != com.github.nkibler7.osrswikiscraper.WeaponDetails.getDefaultInstance()) {
          getWeaponDetailsBuilder().mergeFrom(value);
        } else {
          weaponDetails_ = value;
        }
      } else {
        weaponDetailsBuilder_.mergeFrom(value);
      }
      if (weaponDetails_ != null) {
        bitField0_ |= 0x00000010;
        onChanged();
      }
      return this;
    }
    /**
     * <pre>
     * Details specific to a weapon. This field is only set if the `slot` is `SLOT_WEAPON`.
     * </pre>
     *
     * <code>.github.nkibler7.osrswikiscraper.WeaponDetails weapon_details = 5;</code>
     */
    public Builder clearWeaponDetails() {
      bitField0_ = (bitField0_ & ~0x00000010);
      weaponDetails_ = null;
      if (weaponDetailsBuilder_ != null) {
        weaponDetailsBuilder_.dispose();
        weaponDetailsBuilder_ = null;
      }
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Details specific to a weapon. This field is only set if the `slot` is `SLOT_WEAPON`.
     * </pre>
     *
     * <code>.github.nkibler7.osrswikiscraper.WeaponDetails weapon_details = 5;</code>
     */
    public com.github.nkibler7.osrswikiscraper.WeaponDetails.Builder getWeaponDetailsBuilder() {
      bitField0_ |= 0x00000010;
      onChanged();
      return getWeaponDetailsFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Details specific to a weapon. This field is only set if the `slot` is `SLOT_WEAPON`.
     * </pre>
     *
     * <code>.github.nkibler7.osrswikiscraper.WeaponDetails weapon_details = 5;</code>
     */
    public com.github.nkibler7.osrswikiscraper.WeaponDetailsOrBuilder getWeaponDetailsOrBuilder() {
      if (weaponDetailsBuilder_ != null) {
        return weaponDetailsBuilder_.getMessageOrBuilder();
      } else {
        return weaponDetails_ == null ?
            com.github.nkibler7.osrswikiscraper.WeaponDetails.getDefaultInstance() : weaponDetails_;
      }
    }
    /**
     * <pre>
     * Details specific to a weapon. This field is only set if the `slot` is `SLOT_WEAPON`.
     * </pre>
     *
     * <code>.github.nkibler7.osrswikiscraper.WeaponDetails weapon_details = 5;</code>
     */
    private com.google.protobuf.SingleFieldBuilder<
        com.github.nkibler7.osrswikiscraper.WeaponDetails, com.github.nkibler7.osrswikiscraper.WeaponDetails.Builder, com.github.nkibler7.osrswikiscraper.WeaponDetailsOrBuilder> 
        getWeaponDetailsFieldBuilder() {
      if (weaponDetailsBuilder_ == null) {
        weaponDetailsBuilder_ = new com.google.protobuf.SingleFieldBuilder<
            com.github.nkibler7.osrswikiscraper.WeaponDetails, com.github.nkibler7.osrswikiscraper.WeaponDetails.Builder, com.github.nkibler7.osrswikiscraper.WeaponDetailsOrBuilder>(
                getWeaponDetails(),
                getParentForChildren(),
                isClean());
        weaponDetails_ = null;
      }
      return weaponDetailsBuilder_;
    }

    // @@protoc_insertion_point(builder_scope:github.nkibler7.osrswikiscraper.EquippableItem)
  }

  // @@protoc_insertion_point(class_scope:github.nkibler7.osrswikiscraper.EquippableItem)
  private static final com.github.nkibler7.osrswikiscraper.EquippableItem DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new com.github.nkibler7.osrswikiscraper.EquippableItem();
  }

  public static com.github.nkibler7.osrswikiscraper.EquippableItem getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<EquippableItem>
      PARSER = new com.google.protobuf.AbstractParser<EquippableItem>() {
    @java.lang.Override
    public EquippableItem parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      Builder builder = newBuilder();
      try {
        builder.mergeFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(builder.buildPartial());
      } catch (com.google.protobuf.UninitializedMessageException e) {
        throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(e)
            .setUnfinishedMessage(builder.buildPartial());
      }
      return builder.buildPartial();
    }
  };

  public static com.google.protobuf.Parser<EquippableItem> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<EquippableItem> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public com.github.nkibler7.osrswikiscraper.EquippableItem getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

