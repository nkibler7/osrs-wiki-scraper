// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: weapons.proto
// Protobuf Java Version: 4.27.3

package com.github.nkibler7.osrswikiscraper;

/**
 * <pre>
 * A weapon that can be equipped in the player's main hand.
 * </pre>
 *
 * Protobuf type {@code github.nkibler7.osrswikiscraper.Weapon}
 */
public final class Weapon extends
    com.google.protobuf.GeneratedMessage implements
    // @@protoc_insertion_point(message_implements:github.nkibler7.osrswikiscraper.Weapon)
    WeaponOrBuilder {
private static final long serialVersionUID = 0L;
  static {
    com.google.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
      com.google.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
      /* major= */ 4,
      /* minor= */ 27,
      /* patch= */ 3,
      /* suffix= */ "",
      Weapon.class.getName());
  }
  // Use Weapon.newBuilder() to construct.
  private Weapon(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
    super(builder);
  }
  private Weapon() {
    name_ = "";
    combatOptions_ = java.util.Collections.emptyList();
  }

  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return com.github.nkibler7.osrswikiscraper.WeaponsOuterClass.internal_static_github_nkibler7_osrswikiscraper_Weapon_descriptor;
  }

  @java.lang.Override
  protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return com.github.nkibler7.osrswikiscraper.WeaponsOuterClass.internal_static_github_nkibler7_osrswikiscraper_Weapon_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            com.github.nkibler7.osrswikiscraper.Weapon.class, com.github.nkibler7.osrswikiscraper.Weapon.Builder.class);
  }

  private int bitField0_;
  public static final int NAME_FIELD_NUMBER = 1;
  @SuppressWarnings("serial")
  private volatile java.lang.Object name_ = "";
  /**
   * <pre>
   * The name of this weapon.
   * </pre>
   *
   * <code>string name = 1;</code>
   * @return The name.
   */
  @java.lang.Override
  public java.lang.String getName() {
    java.lang.Object ref = name_;
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = 
          (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      name_ = s;
      return s;
    }
  }
  /**
   * <pre>
   * The name of this weapon.
   * </pre>
   *
   * <code>string name = 1;</code>
   * @return The bytes for name.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString
      getNameBytes() {
    java.lang.Object ref = name_;
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b = 
          com.google.protobuf.ByteString.copyFromUtf8(
              (java.lang.String) ref);
      name_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int ID_FIELD_NUMBER = 2;
  private int id_ = 0;
  /**
   * <pre>
   * The item ID of this weapon.
   * </pre>
   *
   * <code>int32 id = 2;</code>
   * @return The id.
   */
  @java.lang.Override
  public int getId() {
    return id_;
  }

  public static final int BASE_ATTACK_SPEED_FIELD_NUMBER = 3;
  private int baseAttackSpeed_ = 0;
  /**
   * <pre>
   * The base attack speed for this weapon (in ticks). This may be further modified by the selected
   * CombatOption's modifiers.
   * </pre>
   *
   * <code>int32 base_attack_speed = 3;</code>
   * @return The baseAttackSpeed.
   */
  @java.lang.Override
  public int getBaseAttackSpeed() {
    return baseAttackSpeed_;
  }

  public static final int BASE_ATTACK_RANGE_FIELD_NUMBER = 4;
  private int baseAttackRange_ = 0;
  /**
   * <pre>
   * The base attack range for this weapon (in tiles). This may be further modified by the selected
   * CombatOption's modifiers.
   * </pre>
   *
   * <code>int32 base_attack_range = 4;</code>
   * @return The baseAttackRange.
   */
  @java.lang.Override
  public int getBaseAttackRange() {
    return baseAttackRange_;
  }

  public static final int STAT_BONUSES_FIELD_NUMBER = 5;
  private com.github.nkibler7.osrswikiscraper.StatBonuses statBonuses_;
  /**
   * <pre>
   * The set of unique stat bonuses applied by this weapon.
   * </pre>
   *
   * <code>.github.nkibler7.osrswikiscraper.StatBonuses stat_bonuses = 5;</code>
   * @return Whether the statBonuses field is set.
   */
  @java.lang.Override
  public boolean hasStatBonuses() {
    return ((bitField0_ & 0x00000001) != 0);
  }
  /**
   * <pre>
   * The set of unique stat bonuses applied by this weapon.
   * </pre>
   *
   * <code>.github.nkibler7.osrswikiscraper.StatBonuses stat_bonuses = 5;</code>
   * @return The statBonuses.
   */
  @java.lang.Override
  public com.github.nkibler7.osrswikiscraper.StatBonuses getStatBonuses() {
    return statBonuses_ == null ? com.github.nkibler7.osrswikiscraper.StatBonuses.getDefaultInstance() : statBonuses_;
  }
  /**
   * <pre>
   * The set of unique stat bonuses applied by this weapon.
   * </pre>
   *
   * <code>.github.nkibler7.osrswikiscraper.StatBonuses stat_bonuses = 5;</code>
   */
  @java.lang.Override
  public com.github.nkibler7.osrswikiscraper.StatBonusesOrBuilder getStatBonusesOrBuilder() {
    return statBonuses_ == null ? com.github.nkibler7.osrswikiscraper.StatBonuses.getDefaultInstance() : statBonuses_;
  }

  public static final int COMBAT_OPTIONS_FIELD_NUMBER = 6;
  @SuppressWarnings("serial")
  private java.util.List<com.github.nkibler7.osrswikiscraper.CombatOption> combatOptions_;
  /**
   * <pre>
   * The list of CombatOptions available for this weapon.
   * </pre>
   *
   * <code>repeated .github.nkibler7.osrswikiscraper.CombatOption combat_options = 6;</code>
   */
  @java.lang.Override
  public java.util.List<com.github.nkibler7.osrswikiscraper.CombatOption> getCombatOptionsList() {
    return combatOptions_;
  }
  /**
   * <pre>
   * The list of CombatOptions available for this weapon.
   * </pre>
   *
   * <code>repeated .github.nkibler7.osrswikiscraper.CombatOption combat_options = 6;</code>
   */
  @java.lang.Override
  public java.util.List<? extends com.github.nkibler7.osrswikiscraper.CombatOptionOrBuilder> 
      getCombatOptionsOrBuilderList() {
    return combatOptions_;
  }
  /**
   * <pre>
   * The list of CombatOptions available for this weapon.
   * </pre>
   *
   * <code>repeated .github.nkibler7.osrswikiscraper.CombatOption combat_options = 6;</code>
   */
  @java.lang.Override
  public int getCombatOptionsCount() {
    return combatOptions_.size();
  }
  /**
   * <pre>
   * The list of CombatOptions available for this weapon.
   * </pre>
   *
   * <code>repeated .github.nkibler7.osrswikiscraper.CombatOption combat_options = 6;</code>
   */
  @java.lang.Override
  public com.github.nkibler7.osrswikiscraper.CombatOption getCombatOptions(int index) {
    return combatOptions_.get(index);
  }
  /**
   * <pre>
   * The list of CombatOptions available for this weapon.
   * </pre>
   *
   * <code>repeated .github.nkibler7.osrswikiscraper.CombatOption combat_options = 6;</code>
   */
  @java.lang.Override
  public com.github.nkibler7.osrswikiscraper.CombatOptionOrBuilder getCombatOptionsOrBuilder(
      int index) {
    return combatOptions_.get(index);
  }

  private byte memoizedIsInitialized = -1;
  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (!com.google.protobuf.GeneratedMessage.isStringEmpty(name_)) {
      com.google.protobuf.GeneratedMessage.writeString(output, 1, name_);
    }
    if (id_ != 0) {
      output.writeInt32(2, id_);
    }
    if (baseAttackSpeed_ != 0) {
      output.writeInt32(3, baseAttackSpeed_);
    }
    if (baseAttackRange_ != 0) {
      output.writeInt32(4, baseAttackRange_);
    }
    if (((bitField0_ & 0x00000001) != 0)) {
      output.writeMessage(5, getStatBonuses());
    }
    for (int i = 0; i < combatOptions_.size(); i++) {
      output.writeMessage(6, combatOptions_.get(i));
    }
    getUnknownFields().writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (!com.google.protobuf.GeneratedMessage.isStringEmpty(name_)) {
      size += com.google.protobuf.GeneratedMessage.computeStringSize(1, name_);
    }
    if (id_ != 0) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt32Size(2, id_);
    }
    if (baseAttackSpeed_ != 0) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt32Size(3, baseAttackSpeed_);
    }
    if (baseAttackRange_ != 0) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt32Size(4, baseAttackRange_);
    }
    if (((bitField0_ & 0x00000001) != 0)) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(5, getStatBonuses());
    }
    for (int i = 0; i < combatOptions_.size(); i++) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(6, combatOptions_.get(i));
    }
    size += getUnknownFields().getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof com.github.nkibler7.osrswikiscraper.Weapon)) {
      return super.equals(obj);
    }
    com.github.nkibler7.osrswikiscraper.Weapon other = (com.github.nkibler7.osrswikiscraper.Weapon) obj;

    if (!getName()
        .equals(other.getName())) return false;
    if (getId()
        != other.getId()) return false;
    if (getBaseAttackSpeed()
        != other.getBaseAttackSpeed()) return false;
    if (getBaseAttackRange()
        != other.getBaseAttackRange()) return false;
    if (hasStatBonuses() != other.hasStatBonuses()) return false;
    if (hasStatBonuses()) {
      if (!getStatBonuses()
          .equals(other.getStatBonuses())) return false;
    }
    if (!getCombatOptionsList()
        .equals(other.getCombatOptionsList())) return false;
    if (!getUnknownFields().equals(other.getUnknownFields())) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    hash = (37 * hash) + NAME_FIELD_NUMBER;
    hash = (53 * hash) + getName().hashCode();
    hash = (37 * hash) + ID_FIELD_NUMBER;
    hash = (53 * hash) + getId();
    hash = (37 * hash) + BASE_ATTACK_SPEED_FIELD_NUMBER;
    hash = (53 * hash) + getBaseAttackSpeed();
    hash = (37 * hash) + BASE_ATTACK_RANGE_FIELD_NUMBER;
    hash = (53 * hash) + getBaseAttackRange();
    if (hasStatBonuses()) {
      hash = (37 * hash) + STAT_BONUSES_FIELD_NUMBER;
      hash = (53 * hash) + getStatBonuses().hashCode();
    }
    if (getCombatOptionsCount() > 0) {
      hash = (37 * hash) + COMBAT_OPTIONS_FIELD_NUMBER;
      hash = (53 * hash) + getCombatOptionsList().hashCode();
    }
    hash = (29 * hash) + getUnknownFields().hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static com.github.nkibler7.osrswikiscraper.Weapon parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.github.nkibler7.osrswikiscraper.Weapon parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.github.nkibler7.osrswikiscraper.Weapon parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.github.nkibler7.osrswikiscraper.Weapon parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.github.nkibler7.osrswikiscraper.Weapon parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.github.nkibler7.osrswikiscraper.Weapon parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.github.nkibler7.osrswikiscraper.Weapon parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessage
        .parseWithIOException(PARSER, input);
  }
  public static com.github.nkibler7.osrswikiscraper.Weapon parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessage
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  public static com.github.nkibler7.osrswikiscraper.Weapon parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessage
        .parseDelimitedWithIOException(PARSER, input);
  }

  public static com.github.nkibler7.osrswikiscraper.Weapon parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessage
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.github.nkibler7.osrswikiscraper.Weapon parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessage
        .parseWithIOException(PARSER, input);
  }
  public static com.github.nkibler7.osrswikiscraper.Weapon parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessage
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(com.github.nkibler7.osrswikiscraper.Weapon prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessage.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * <pre>
   * A weapon that can be equipped in the player's main hand.
   * </pre>
   *
   * Protobuf type {@code github.nkibler7.osrswikiscraper.Weapon}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessage.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:github.nkibler7.osrswikiscraper.Weapon)
      com.github.nkibler7.osrswikiscraper.WeaponOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.github.nkibler7.osrswikiscraper.WeaponsOuterClass.internal_static_github_nkibler7_osrswikiscraper_Weapon_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.github.nkibler7.osrswikiscraper.WeaponsOuterClass.internal_static_github_nkibler7_osrswikiscraper_Weapon_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.github.nkibler7.osrswikiscraper.Weapon.class, com.github.nkibler7.osrswikiscraper.Weapon.Builder.class);
    }

    // Construct using com.github.nkibler7.osrswikiscraper.Weapon.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }
    private void maybeForceBuilderInitialization() {
      if (com.google.protobuf.GeneratedMessage
              .alwaysUseFieldBuilders) {
        getStatBonusesFieldBuilder();
        getCombatOptionsFieldBuilder();
      }
    }
    @java.lang.Override
    public Builder clear() {
      super.clear();
      bitField0_ = 0;
      name_ = "";
      id_ = 0;
      baseAttackSpeed_ = 0;
      baseAttackRange_ = 0;
      statBonuses_ = null;
      if (statBonusesBuilder_ != null) {
        statBonusesBuilder_.dispose();
        statBonusesBuilder_ = null;
      }
      if (combatOptionsBuilder_ == null) {
        combatOptions_ = java.util.Collections.emptyList();
      } else {
        combatOptions_ = null;
        combatOptionsBuilder_.clear();
      }
      bitField0_ = (bitField0_ & ~0x00000020);
      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return com.github.nkibler7.osrswikiscraper.WeaponsOuterClass.internal_static_github_nkibler7_osrswikiscraper_Weapon_descriptor;
    }

    @java.lang.Override
    public com.github.nkibler7.osrswikiscraper.Weapon getDefaultInstanceForType() {
      return com.github.nkibler7.osrswikiscraper.Weapon.getDefaultInstance();
    }

    @java.lang.Override
    public com.github.nkibler7.osrswikiscraper.Weapon build() {
      com.github.nkibler7.osrswikiscraper.Weapon result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public com.github.nkibler7.osrswikiscraper.Weapon buildPartial() {
      com.github.nkibler7.osrswikiscraper.Weapon result = new com.github.nkibler7.osrswikiscraper.Weapon(this);
      buildPartialRepeatedFields(result);
      if (bitField0_ != 0) { buildPartial0(result); }
      onBuilt();
      return result;
    }

    private void buildPartialRepeatedFields(com.github.nkibler7.osrswikiscraper.Weapon result) {
      if (combatOptionsBuilder_ == null) {
        if (((bitField0_ & 0x00000020) != 0)) {
          combatOptions_ = java.util.Collections.unmodifiableList(combatOptions_);
          bitField0_ = (bitField0_ & ~0x00000020);
        }
        result.combatOptions_ = combatOptions_;
      } else {
        result.combatOptions_ = combatOptionsBuilder_.build();
      }
    }

    private void buildPartial0(com.github.nkibler7.osrswikiscraper.Weapon result) {
      int from_bitField0_ = bitField0_;
      if (((from_bitField0_ & 0x00000001) != 0)) {
        result.name_ = name_;
      }
      if (((from_bitField0_ & 0x00000002) != 0)) {
        result.id_ = id_;
      }
      if (((from_bitField0_ & 0x00000004) != 0)) {
        result.baseAttackSpeed_ = baseAttackSpeed_;
      }
      if (((from_bitField0_ & 0x00000008) != 0)) {
        result.baseAttackRange_ = baseAttackRange_;
      }
      int to_bitField0_ = 0;
      if (((from_bitField0_ & 0x00000010) != 0)) {
        result.statBonuses_ = statBonusesBuilder_ == null
            ? statBonuses_
            : statBonusesBuilder_.build();
        to_bitField0_ |= 0x00000001;
      }
      result.bitField0_ |= to_bitField0_;
    }

    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof com.github.nkibler7.osrswikiscraper.Weapon) {
        return mergeFrom((com.github.nkibler7.osrswikiscraper.Weapon)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(com.github.nkibler7.osrswikiscraper.Weapon other) {
      if (other == com.github.nkibler7.osrswikiscraper.Weapon.getDefaultInstance()) return this;
      if (!other.getName().isEmpty()) {
        name_ = other.name_;
        bitField0_ |= 0x00000001;
        onChanged();
      }
      if (other.getId() != 0) {
        setId(other.getId());
      }
      if (other.getBaseAttackSpeed() != 0) {
        setBaseAttackSpeed(other.getBaseAttackSpeed());
      }
      if (other.getBaseAttackRange() != 0) {
        setBaseAttackRange(other.getBaseAttackRange());
      }
      if (other.hasStatBonuses()) {
        mergeStatBonuses(other.getStatBonuses());
      }
      if (combatOptionsBuilder_ == null) {
        if (!other.combatOptions_.isEmpty()) {
          if (combatOptions_.isEmpty()) {
            combatOptions_ = other.combatOptions_;
            bitField0_ = (bitField0_ & ~0x00000020);
          } else {
            ensureCombatOptionsIsMutable();
            combatOptions_.addAll(other.combatOptions_);
          }
          onChanged();
        }
      } else {
        if (!other.combatOptions_.isEmpty()) {
          if (combatOptionsBuilder_.isEmpty()) {
            combatOptionsBuilder_.dispose();
            combatOptionsBuilder_ = null;
            combatOptions_ = other.combatOptions_;
            bitField0_ = (bitField0_ & ~0x00000020);
            combatOptionsBuilder_ = 
              com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                 getCombatOptionsFieldBuilder() : null;
          } else {
            combatOptionsBuilder_.addAllMessages(other.combatOptions_);
          }
        }
      }
      this.mergeUnknownFields(other.getUnknownFields());
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              name_ = input.readStringRequireUtf8();
              bitField0_ |= 0x00000001;
              break;
            } // case 10
            case 16: {
              id_ = input.readInt32();
              bitField0_ |= 0x00000002;
              break;
            } // case 16
            case 24: {
              baseAttackSpeed_ = input.readInt32();
              bitField0_ |= 0x00000004;
              break;
            } // case 24
            case 32: {
              baseAttackRange_ = input.readInt32();
              bitField0_ |= 0x00000008;
              break;
            } // case 32
            case 42: {
              input.readMessage(
                  getStatBonusesFieldBuilder().getBuilder(),
                  extensionRegistry);
              bitField0_ |= 0x00000010;
              break;
            } // case 42
            case 50: {
              com.github.nkibler7.osrswikiscraper.CombatOption m =
                  input.readMessage(
                      com.github.nkibler7.osrswikiscraper.CombatOption.parser(),
                      extensionRegistry);
              if (combatOptionsBuilder_ == null) {
                ensureCombatOptionsIsMutable();
                combatOptions_.add(m);
              } else {
                combatOptionsBuilder_.addMessage(m);
              }
              break;
            } // case 50
            default: {
              if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                done = true; // was an endgroup tag
              }
              break;
            } // default:
          } // switch (tag)
        } // while (!done)
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.unwrapIOException();
      } finally {
        onChanged();
      } // finally
      return this;
    }
    private int bitField0_;

    private java.lang.Object name_ = "";
    /**
     * <pre>
     * The name of this weapon.
     * </pre>
     *
     * <code>string name = 1;</code>
     * @return The name.
     */
    public java.lang.String getName() {
      java.lang.Object ref = name_;
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        name_ = s;
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }
    /**
     * <pre>
     * The name of this weapon.
     * </pre>
     *
     * <code>string name = 1;</code>
     * @return The bytes for name.
     */
    public com.google.protobuf.ByteString
        getNameBytes() {
      java.lang.Object ref = name_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        name_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <pre>
     * The name of this weapon.
     * </pre>
     *
     * <code>string name = 1;</code>
     * @param value The name to set.
     * @return This builder for chaining.
     */
    public Builder setName(
        java.lang.String value) {
      if (value == null) { throw new NullPointerException(); }
      name_ = value;
      bitField0_ |= 0x00000001;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The name of this weapon.
     * </pre>
     *
     * <code>string name = 1;</code>
     * @return This builder for chaining.
     */
    public Builder clearName() {
      name_ = getDefaultInstance().getName();
      bitField0_ = (bitField0_ & ~0x00000001);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The name of this weapon.
     * </pre>
     *
     * <code>string name = 1;</code>
     * @param value The bytes for name to set.
     * @return This builder for chaining.
     */
    public Builder setNameBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) { throw new NullPointerException(); }
      checkByteStringIsUtf8(value);
      name_ = value;
      bitField0_ |= 0x00000001;
      onChanged();
      return this;
    }

    private int id_ ;
    /**
     * <pre>
     * The item ID of this weapon.
     * </pre>
     *
     * <code>int32 id = 2;</code>
     * @return The id.
     */
    @java.lang.Override
    public int getId() {
      return id_;
    }
    /**
     * <pre>
     * The item ID of this weapon.
     * </pre>
     *
     * <code>int32 id = 2;</code>
     * @param value The id to set.
     * @return This builder for chaining.
     */
    public Builder setId(int value) {

      id_ = value;
      bitField0_ |= 0x00000002;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The item ID of this weapon.
     * </pre>
     *
     * <code>int32 id = 2;</code>
     * @return This builder for chaining.
     */
    public Builder clearId() {
      bitField0_ = (bitField0_ & ~0x00000002);
      id_ = 0;
      onChanged();
      return this;
    }

    private int baseAttackSpeed_ ;
    /**
     * <pre>
     * The base attack speed for this weapon (in ticks). This may be further modified by the selected
     * CombatOption's modifiers.
     * </pre>
     *
     * <code>int32 base_attack_speed = 3;</code>
     * @return The baseAttackSpeed.
     */
    @java.lang.Override
    public int getBaseAttackSpeed() {
      return baseAttackSpeed_;
    }
    /**
     * <pre>
     * The base attack speed for this weapon (in ticks). This may be further modified by the selected
     * CombatOption's modifiers.
     * </pre>
     *
     * <code>int32 base_attack_speed = 3;</code>
     * @param value The baseAttackSpeed to set.
     * @return This builder for chaining.
     */
    public Builder setBaseAttackSpeed(int value) {

      baseAttackSpeed_ = value;
      bitField0_ |= 0x00000004;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The base attack speed for this weapon (in ticks). This may be further modified by the selected
     * CombatOption's modifiers.
     * </pre>
     *
     * <code>int32 base_attack_speed = 3;</code>
     * @return This builder for chaining.
     */
    public Builder clearBaseAttackSpeed() {
      bitField0_ = (bitField0_ & ~0x00000004);
      baseAttackSpeed_ = 0;
      onChanged();
      return this;
    }

    private int baseAttackRange_ ;
    /**
     * <pre>
     * The base attack range for this weapon (in tiles). This may be further modified by the selected
     * CombatOption's modifiers.
     * </pre>
     *
     * <code>int32 base_attack_range = 4;</code>
     * @return The baseAttackRange.
     */
    @java.lang.Override
    public int getBaseAttackRange() {
      return baseAttackRange_;
    }
    /**
     * <pre>
     * The base attack range for this weapon (in tiles). This may be further modified by the selected
     * CombatOption's modifiers.
     * </pre>
     *
     * <code>int32 base_attack_range = 4;</code>
     * @param value The baseAttackRange to set.
     * @return This builder for chaining.
     */
    public Builder setBaseAttackRange(int value) {

      baseAttackRange_ = value;
      bitField0_ |= 0x00000008;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The base attack range for this weapon (in tiles). This may be further modified by the selected
     * CombatOption's modifiers.
     * </pre>
     *
     * <code>int32 base_attack_range = 4;</code>
     * @return This builder for chaining.
     */
    public Builder clearBaseAttackRange() {
      bitField0_ = (bitField0_ & ~0x00000008);
      baseAttackRange_ = 0;
      onChanged();
      return this;
    }

    private com.github.nkibler7.osrswikiscraper.StatBonuses statBonuses_;
    private com.google.protobuf.SingleFieldBuilder<
        com.github.nkibler7.osrswikiscraper.StatBonuses, com.github.nkibler7.osrswikiscraper.StatBonuses.Builder, com.github.nkibler7.osrswikiscraper.StatBonusesOrBuilder> statBonusesBuilder_;
    /**
     * <pre>
     * The set of unique stat bonuses applied by this weapon.
     * </pre>
     *
     * <code>.github.nkibler7.osrswikiscraper.StatBonuses stat_bonuses = 5;</code>
     * @return Whether the statBonuses field is set.
     */
    public boolean hasStatBonuses() {
      return ((bitField0_ & 0x00000010) != 0);
    }
    /**
     * <pre>
     * The set of unique stat bonuses applied by this weapon.
     * </pre>
     *
     * <code>.github.nkibler7.osrswikiscraper.StatBonuses stat_bonuses = 5;</code>
     * @return The statBonuses.
     */
    public com.github.nkibler7.osrswikiscraper.StatBonuses getStatBonuses() {
      if (statBonusesBuilder_ == null) {
        return statBonuses_ == null ? com.github.nkibler7.osrswikiscraper.StatBonuses.getDefaultInstance() : statBonuses_;
      } else {
        return statBonusesBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * The set of unique stat bonuses applied by this weapon.
     * </pre>
     *
     * <code>.github.nkibler7.osrswikiscraper.StatBonuses stat_bonuses = 5;</code>
     */
    public Builder setStatBonuses(com.github.nkibler7.osrswikiscraper.StatBonuses value) {
      if (statBonusesBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        statBonuses_ = value;
      } else {
        statBonusesBuilder_.setMessage(value);
      }
      bitField0_ |= 0x00000010;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The set of unique stat bonuses applied by this weapon.
     * </pre>
     *
     * <code>.github.nkibler7.osrswikiscraper.StatBonuses stat_bonuses = 5;</code>
     */
    public Builder setStatBonuses(
        com.github.nkibler7.osrswikiscraper.StatBonuses.Builder builderForValue) {
      if (statBonusesBuilder_ == null) {
        statBonuses_ = builderForValue.build();
      } else {
        statBonusesBuilder_.setMessage(builderForValue.build());
      }
      bitField0_ |= 0x00000010;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The set of unique stat bonuses applied by this weapon.
     * </pre>
     *
     * <code>.github.nkibler7.osrswikiscraper.StatBonuses stat_bonuses = 5;</code>
     */
    public Builder mergeStatBonuses(com.github.nkibler7.osrswikiscraper.StatBonuses value) {
      if (statBonusesBuilder_ == null) {
        if (((bitField0_ & 0x00000010) != 0) &&
          statBonuses_ != null &&
          statBonuses_ != com.github.nkibler7.osrswikiscraper.StatBonuses.getDefaultInstance()) {
          getStatBonusesBuilder().mergeFrom(value);
        } else {
          statBonuses_ = value;
        }
      } else {
        statBonusesBuilder_.mergeFrom(value);
      }
      if (statBonuses_ != null) {
        bitField0_ |= 0x00000010;
        onChanged();
      }
      return this;
    }
    /**
     * <pre>
     * The set of unique stat bonuses applied by this weapon.
     * </pre>
     *
     * <code>.github.nkibler7.osrswikiscraper.StatBonuses stat_bonuses = 5;</code>
     */
    public Builder clearStatBonuses() {
      bitField0_ = (bitField0_ & ~0x00000010);
      statBonuses_ = null;
      if (statBonusesBuilder_ != null) {
        statBonusesBuilder_.dispose();
        statBonusesBuilder_ = null;
      }
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The set of unique stat bonuses applied by this weapon.
     * </pre>
     *
     * <code>.github.nkibler7.osrswikiscraper.StatBonuses stat_bonuses = 5;</code>
     */
    public com.github.nkibler7.osrswikiscraper.StatBonuses.Builder getStatBonusesBuilder() {
      bitField0_ |= 0x00000010;
      onChanged();
      return getStatBonusesFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * The set of unique stat bonuses applied by this weapon.
     * </pre>
     *
     * <code>.github.nkibler7.osrswikiscraper.StatBonuses stat_bonuses = 5;</code>
     */
    public com.github.nkibler7.osrswikiscraper.StatBonusesOrBuilder getStatBonusesOrBuilder() {
      if (statBonusesBuilder_ != null) {
        return statBonusesBuilder_.getMessageOrBuilder();
      } else {
        return statBonuses_ == null ?
            com.github.nkibler7.osrswikiscraper.StatBonuses.getDefaultInstance() : statBonuses_;
      }
    }
    /**
     * <pre>
     * The set of unique stat bonuses applied by this weapon.
     * </pre>
     *
     * <code>.github.nkibler7.osrswikiscraper.StatBonuses stat_bonuses = 5;</code>
     */
    private com.google.protobuf.SingleFieldBuilder<
        com.github.nkibler7.osrswikiscraper.StatBonuses, com.github.nkibler7.osrswikiscraper.StatBonuses.Builder, com.github.nkibler7.osrswikiscraper.StatBonusesOrBuilder> 
        getStatBonusesFieldBuilder() {
      if (statBonusesBuilder_ == null) {
        statBonusesBuilder_ = new com.google.protobuf.SingleFieldBuilder<
            com.github.nkibler7.osrswikiscraper.StatBonuses, com.github.nkibler7.osrswikiscraper.StatBonuses.Builder, com.github.nkibler7.osrswikiscraper.StatBonusesOrBuilder>(
                getStatBonuses(),
                getParentForChildren(),
                isClean());
        statBonuses_ = null;
      }
      return statBonusesBuilder_;
    }

    private java.util.List<com.github.nkibler7.osrswikiscraper.CombatOption> combatOptions_ =
      java.util.Collections.emptyList();
    private void ensureCombatOptionsIsMutable() {
      if (!((bitField0_ & 0x00000020) != 0)) {
        combatOptions_ = new java.util.ArrayList<com.github.nkibler7.osrswikiscraper.CombatOption>(combatOptions_);
        bitField0_ |= 0x00000020;
       }
    }

    private com.google.protobuf.RepeatedFieldBuilder<
        com.github.nkibler7.osrswikiscraper.CombatOption, com.github.nkibler7.osrswikiscraper.CombatOption.Builder, com.github.nkibler7.osrswikiscraper.CombatOptionOrBuilder> combatOptionsBuilder_;

    /**
     * <pre>
     * The list of CombatOptions available for this weapon.
     * </pre>
     *
     * <code>repeated .github.nkibler7.osrswikiscraper.CombatOption combat_options = 6;</code>
     */
    public java.util.List<com.github.nkibler7.osrswikiscraper.CombatOption> getCombatOptionsList() {
      if (combatOptionsBuilder_ == null) {
        return java.util.Collections.unmodifiableList(combatOptions_);
      } else {
        return combatOptionsBuilder_.getMessageList();
      }
    }
    /**
     * <pre>
     * The list of CombatOptions available for this weapon.
     * </pre>
     *
     * <code>repeated .github.nkibler7.osrswikiscraper.CombatOption combat_options = 6;</code>
     */
    public int getCombatOptionsCount() {
      if (combatOptionsBuilder_ == null) {
        return combatOptions_.size();
      } else {
        return combatOptionsBuilder_.getCount();
      }
    }
    /**
     * <pre>
     * The list of CombatOptions available for this weapon.
     * </pre>
     *
     * <code>repeated .github.nkibler7.osrswikiscraper.CombatOption combat_options = 6;</code>
     */
    public com.github.nkibler7.osrswikiscraper.CombatOption getCombatOptions(int index) {
      if (combatOptionsBuilder_ == null) {
        return combatOptions_.get(index);
      } else {
        return combatOptionsBuilder_.getMessage(index);
      }
    }
    /**
     * <pre>
     * The list of CombatOptions available for this weapon.
     * </pre>
     *
     * <code>repeated .github.nkibler7.osrswikiscraper.CombatOption combat_options = 6;</code>
     */
    public Builder setCombatOptions(
        int index, com.github.nkibler7.osrswikiscraper.CombatOption value) {
      if (combatOptionsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureCombatOptionsIsMutable();
        combatOptions_.set(index, value);
        onChanged();
      } else {
        combatOptionsBuilder_.setMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * The list of CombatOptions available for this weapon.
     * </pre>
     *
     * <code>repeated .github.nkibler7.osrswikiscraper.CombatOption combat_options = 6;</code>
     */
    public Builder setCombatOptions(
        int index, com.github.nkibler7.osrswikiscraper.CombatOption.Builder builderForValue) {
      if (combatOptionsBuilder_ == null) {
        ensureCombatOptionsIsMutable();
        combatOptions_.set(index, builderForValue.build());
        onChanged();
      } else {
        combatOptionsBuilder_.setMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * The list of CombatOptions available for this weapon.
     * </pre>
     *
     * <code>repeated .github.nkibler7.osrswikiscraper.CombatOption combat_options = 6;</code>
     */
    public Builder addCombatOptions(com.github.nkibler7.osrswikiscraper.CombatOption value) {
      if (combatOptionsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureCombatOptionsIsMutable();
        combatOptions_.add(value);
        onChanged();
      } else {
        combatOptionsBuilder_.addMessage(value);
      }
      return this;
    }
    /**
     * <pre>
     * The list of CombatOptions available for this weapon.
     * </pre>
     *
     * <code>repeated .github.nkibler7.osrswikiscraper.CombatOption combat_options = 6;</code>
     */
    public Builder addCombatOptions(
        int index, com.github.nkibler7.osrswikiscraper.CombatOption value) {
      if (combatOptionsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureCombatOptionsIsMutable();
        combatOptions_.add(index, value);
        onChanged();
      } else {
        combatOptionsBuilder_.addMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * The list of CombatOptions available for this weapon.
     * </pre>
     *
     * <code>repeated .github.nkibler7.osrswikiscraper.CombatOption combat_options = 6;</code>
     */
    public Builder addCombatOptions(
        com.github.nkibler7.osrswikiscraper.CombatOption.Builder builderForValue) {
      if (combatOptionsBuilder_ == null) {
        ensureCombatOptionsIsMutable();
        combatOptions_.add(builderForValue.build());
        onChanged();
      } else {
        combatOptionsBuilder_.addMessage(builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * The list of CombatOptions available for this weapon.
     * </pre>
     *
     * <code>repeated .github.nkibler7.osrswikiscraper.CombatOption combat_options = 6;</code>
     */
    public Builder addCombatOptions(
        int index, com.github.nkibler7.osrswikiscraper.CombatOption.Builder builderForValue) {
      if (combatOptionsBuilder_ == null) {
        ensureCombatOptionsIsMutable();
        combatOptions_.add(index, builderForValue.build());
        onChanged();
      } else {
        combatOptionsBuilder_.addMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * The list of CombatOptions available for this weapon.
     * </pre>
     *
     * <code>repeated .github.nkibler7.osrswikiscraper.CombatOption combat_options = 6;</code>
     */
    public Builder addAllCombatOptions(
        java.lang.Iterable<? extends com.github.nkibler7.osrswikiscraper.CombatOption> values) {
      if (combatOptionsBuilder_ == null) {
        ensureCombatOptionsIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, combatOptions_);
        onChanged();
      } else {
        combatOptionsBuilder_.addAllMessages(values);
      }
      return this;
    }
    /**
     * <pre>
     * The list of CombatOptions available for this weapon.
     * </pre>
     *
     * <code>repeated .github.nkibler7.osrswikiscraper.CombatOption combat_options = 6;</code>
     */
    public Builder clearCombatOptions() {
      if (combatOptionsBuilder_ == null) {
        combatOptions_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000020);
        onChanged();
      } else {
        combatOptionsBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * The list of CombatOptions available for this weapon.
     * </pre>
     *
     * <code>repeated .github.nkibler7.osrswikiscraper.CombatOption combat_options = 6;</code>
     */
    public Builder removeCombatOptions(int index) {
      if (combatOptionsBuilder_ == null) {
        ensureCombatOptionsIsMutable();
        combatOptions_.remove(index);
        onChanged();
      } else {
        combatOptionsBuilder_.remove(index);
      }
      return this;
    }
    /**
     * <pre>
     * The list of CombatOptions available for this weapon.
     * </pre>
     *
     * <code>repeated .github.nkibler7.osrswikiscraper.CombatOption combat_options = 6;</code>
     */
    public com.github.nkibler7.osrswikiscraper.CombatOption.Builder getCombatOptionsBuilder(
        int index) {
      return getCombatOptionsFieldBuilder().getBuilder(index);
    }
    /**
     * <pre>
     * The list of CombatOptions available for this weapon.
     * </pre>
     *
     * <code>repeated .github.nkibler7.osrswikiscraper.CombatOption combat_options = 6;</code>
     */
    public com.github.nkibler7.osrswikiscraper.CombatOptionOrBuilder getCombatOptionsOrBuilder(
        int index) {
      if (combatOptionsBuilder_ == null) {
        return combatOptions_.get(index);  } else {
        return combatOptionsBuilder_.getMessageOrBuilder(index);
      }
    }
    /**
     * <pre>
     * The list of CombatOptions available for this weapon.
     * </pre>
     *
     * <code>repeated .github.nkibler7.osrswikiscraper.CombatOption combat_options = 6;</code>
     */
    public java.util.List<? extends com.github.nkibler7.osrswikiscraper.CombatOptionOrBuilder> 
         getCombatOptionsOrBuilderList() {
      if (combatOptionsBuilder_ != null) {
        return combatOptionsBuilder_.getMessageOrBuilderList();
      } else {
        return java.util.Collections.unmodifiableList(combatOptions_);
      }
    }
    /**
     * <pre>
     * The list of CombatOptions available for this weapon.
     * </pre>
     *
     * <code>repeated .github.nkibler7.osrswikiscraper.CombatOption combat_options = 6;</code>
     */
    public com.github.nkibler7.osrswikiscraper.CombatOption.Builder addCombatOptionsBuilder() {
      return getCombatOptionsFieldBuilder().addBuilder(
          com.github.nkibler7.osrswikiscraper.CombatOption.getDefaultInstance());
    }
    /**
     * <pre>
     * The list of CombatOptions available for this weapon.
     * </pre>
     *
     * <code>repeated .github.nkibler7.osrswikiscraper.CombatOption combat_options = 6;</code>
     */
    public com.github.nkibler7.osrswikiscraper.CombatOption.Builder addCombatOptionsBuilder(
        int index) {
      return getCombatOptionsFieldBuilder().addBuilder(
          index, com.github.nkibler7.osrswikiscraper.CombatOption.getDefaultInstance());
    }
    /**
     * <pre>
     * The list of CombatOptions available for this weapon.
     * </pre>
     *
     * <code>repeated .github.nkibler7.osrswikiscraper.CombatOption combat_options = 6;</code>
     */
    public java.util.List<com.github.nkibler7.osrswikiscraper.CombatOption.Builder> 
         getCombatOptionsBuilderList() {
      return getCombatOptionsFieldBuilder().getBuilderList();
    }
    private com.google.protobuf.RepeatedFieldBuilder<
        com.github.nkibler7.osrswikiscraper.CombatOption, com.github.nkibler7.osrswikiscraper.CombatOption.Builder, com.github.nkibler7.osrswikiscraper.CombatOptionOrBuilder> 
        getCombatOptionsFieldBuilder() {
      if (combatOptionsBuilder_ == null) {
        combatOptionsBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
            com.github.nkibler7.osrswikiscraper.CombatOption, com.github.nkibler7.osrswikiscraper.CombatOption.Builder, com.github.nkibler7.osrswikiscraper.CombatOptionOrBuilder>(
                combatOptions_,
                ((bitField0_ & 0x00000020) != 0),
                getParentForChildren(),
                isClean());
        combatOptions_ = null;
      }
      return combatOptionsBuilder_;
    }

    // @@protoc_insertion_point(builder_scope:github.nkibler7.osrswikiscraper.Weapon)
  }

  // @@protoc_insertion_point(class_scope:github.nkibler7.osrswikiscraper.Weapon)
  private static final com.github.nkibler7.osrswikiscraper.Weapon DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new com.github.nkibler7.osrswikiscraper.Weapon();
  }

  public static com.github.nkibler7.osrswikiscraper.Weapon getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<Weapon>
      PARSER = new com.google.protobuf.AbstractParser<Weapon>() {
    @java.lang.Override
    public Weapon parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      Builder builder = newBuilder();
      try {
        builder.mergeFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(builder.buildPartial());
      } catch (com.google.protobuf.UninitializedMessageException e) {
        throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(e)
            .setUnfinishedMessage(builder.buildPartial());
      }
      return builder.buildPartial();
    }
  };

  public static com.google.protobuf.Parser<Weapon> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<Weapon> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public com.github.nkibler7.osrswikiscraper.Weapon getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

