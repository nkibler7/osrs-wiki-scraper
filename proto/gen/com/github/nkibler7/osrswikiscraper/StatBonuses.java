// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: stat_bonuses.proto

// Protobuf Java Version: 3.25.1
package com.github.nkibler7.osrswikiscraper;

/**
 * <pre>
 * A set of unique stat bonuses applied by equipment. These values are used in damage calculations
 * between players &amp; monsters.
 * </pre>
 *
 * Protobuf type {@code github.nkibler7.osrswikiscraper.StatBonuses}
 */
public final class StatBonuses extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:github.nkibler7.osrswikiscraper.StatBonuses)
    StatBonusesOrBuilder {
private static final long serialVersionUID = 0L;
  // Use StatBonuses.newBuilder() to construct.
  private StatBonuses(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private StatBonuses() {
  }

  @java.lang.Override
  @SuppressWarnings({"unused"})
  protected java.lang.Object newInstance(
      UnusedPrivateParameter unused) {
    return new StatBonuses();
  }

  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return com.github.nkibler7.osrswikiscraper.StatBonusesOuterClass.internal_static_github_nkibler7_osrswikiscraper_StatBonuses_descriptor;
  }

  @java.lang.Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return com.github.nkibler7.osrswikiscraper.StatBonusesOuterClass.internal_static_github_nkibler7_osrswikiscraper_StatBonuses_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            com.github.nkibler7.osrswikiscraper.StatBonuses.class, com.github.nkibler7.osrswikiscraper.StatBonuses.Builder.class);
  }

  public static final int STAB_ATTACK_FIELD_NUMBER = 1;
  private int stabAttack_ = 0;
  /**
   * <pre>
   * The accuracy bonus applied to melee attack calculations if a stab-based attack option is
   * chosen.
   * </pre>
   *
   * <code>int32 stab_attack = 1;</code>
   * @return The stabAttack.
   */
  @java.lang.Override
  public int getStabAttack() {
    return stabAttack_;
  }

  public static final int SLASH_ATTACK_FIELD_NUMBER = 2;
  private int slashAttack_ = 0;
  /**
   * <pre>
   * The accuracy bonus applied to melee attack calculations if a slash-based attack option is
   * chosen.
   * </pre>
   *
   * <code>int32 slash_attack = 2;</code>
   * @return The slashAttack.
   */
  @java.lang.Override
  public int getSlashAttack() {
    return slashAttack_;
  }

  public static final int CRUSH_ATTACK_FIELD_NUMBER = 3;
  private int crushAttack_ = 0;
  /**
   * <pre>
   * The accuracy bonus applied to melee attack calculations if a crush-based attack option is
   * chosen.
   * </pre>
   *
   * <code>int32 crush_attack = 3;</code>
   * @return The crushAttack.
   */
  @java.lang.Override
  public int getCrushAttack() {
    return crushAttack_;
  }

  public static final int RANGED_ATTACK_FIELD_NUMBER = 4;
  private int rangedAttack_ = 0;
  /**
   * <pre>
   * The accuracy bonus applied to ranged attack calculations.
   * </pre>
   *
   * <code>int32 ranged_attack = 4;</code>
   * @return The rangedAttack.
   */
  @java.lang.Override
  public int getRangedAttack() {
    return rangedAttack_;
  }

  public static final int MAGIC_ATTACK_FIELD_NUMBER = 5;
  private int magicAttack_ = 0;
  /**
   * <pre>
   * The accuracy bonus applied to magic attack calculations.
   * </pre>
   *
   * <code>int32 magic_attack = 5;</code>
   * @return The magicAttack.
   */
  @java.lang.Override
  public int getMagicAttack() {
    return magicAttack_;
  }

  public static final int STAB_DEFENCE_FIELD_NUMBER = 6;
  private int stabDefence_ = 0;
  /**
   * <pre>
   * The defensive bonus applied to melee defence calculations if a stab-based attack option is
   * used by the attacker.
   * </pre>
   *
   * <code>int32 stab_defence = 6;</code>
   * @return The stabDefence.
   */
  @java.lang.Override
  public int getStabDefence() {
    return stabDefence_;
  }

  public static final int SLASH_DEFENCE_FIELD_NUMBER = 7;
  private int slashDefence_ = 0;
  /**
   * <pre>
   * The defensive bonus applied to melee defence calculations if a slash-based attack option is
   * used by the attacker.
   * </pre>
   *
   * <code>int32 slash_defence = 7;</code>
   * @return The slashDefence.
   */
  @java.lang.Override
  public int getSlashDefence() {
    return slashDefence_;
  }

  public static final int CRUSH_DEFENCE_FIELD_NUMBER = 8;
  private int crushDefence_ = 0;
  /**
   * <pre>
   * The defensive bonus applied to melee defence calculations if a crush-based attack option is
   * used by the attacker.
   * </pre>
   *
   * <code>int32 crush_defence = 8;</code>
   * @return The crushDefence.
   */
  @java.lang.Override
  public int getCrushDefence() {
    return crushDefence_;
  }

  public static final int RANGED_DEFENCE_FIELD_NUMBER = 9;
  private int rangedDefence_ = 0;
  /**
   * <pre>
   * The defensive bonus applied to magic defence calculations if a ranged attack is used by the
   * attacker.
   * </pre>
   *
   * <code>int32 ranged_defence = 9;</code>
   * @return The rangedDefence.
   */
  @java.lang.Override
  public int getRangedDefence() {
    return rangedDefence_;
  }

  public static final int MAGIC_DEFENCE_FIELD_NUMBER = 10;
  private int magicDefence_ = 0;
  /**
   * <pre>
   * The defensive bonus applied to magic defence calculations if a magic attack is used by the
   * attacker.
   * </pre>
   *
   * <code>int32 magic_defence = 10;</code>
   * @return The magicDefence.
   */
  @java.lang.Override
  public int getMagicDefence() {
    return magicDefence_;
  }

  public static final int MELEE_STRENGTH_FIELD_NUMBER = 11;
  private int meleeStrength_ = 0;
  /**
   * <pre>
   * The strength bonus used to determine the player's maximum melee damage.
   * </pre>
   *
   * <code>int32 melee_strength = 11;</code>
   * @return The meleeStrength.
   */
  @java.lang.Override
  public int getMeleeStrength() {
    return meleeStrength_;
  }

  public static final int RANGED_STRENGTH_FIELD_NUMBER = 12;
  private int rangedStrength_ = 0;
  /**
   * <pre>
   * The strength bonus used to determine the player's maximum ranged damage.
   * </pre>
   *
   * <code>int32 ranged_strength = 12;</code>
   * @return The rangedStrength.
   */
  @java.lang.Override
  public int getRangedStrength() {
    return rangedStrength_;
  }

  public static final int MAGIC_DAMAGE_FIELD_NUMBER = 13;
  private double magicDamage_ = 0D;
  /**
   * <pre>
   * The strength bonus used to determine the player's maximum magic damage.
   *
   * Unlike the other additive strength bonuses, this is a damage multiplier. A value of 0.20
   * corresponds to an additional 20% magic damage (applied according to standard calculations).
   * </pre>
   *
   * <code>double magic_damage = 13;</code>
   * @return The magicDamage.
   */
  @java.lang.Override
  public double getMagicDamage() {
    return magicDamage_;
  }

  public static final int PRAYER_FIELD_NUMBER = 14;
  private int prayer_ = 0;
  /**
   * <pre>
   * The prayer bonus lowers the drain rate of prayers. The drain rate of a prayer is the amount of
   * time a prayer takes to drain 1 prayer point. A prayer bonus of +15 will make all prayers last
   * 50% longer. Comparatively a bonus of +30 will double the length any prayer can be used. Each
   * additional +1 prayer bonus provides a corresponding +3.333% increase in the duration of
   * activated prayers.
   * </pre>
   *
   * <code>int32 prayer = 14;</code>
   * @return The prayer.
   */
  @java.lang.Override
  public int getPrayer() {
    return prayer_;
  }

  private byte memoizedIsInitialized = -1;
  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (stabAttack_ != 0) {
      output.writeInt32(1, stabAttack_);
    }
    if (slashAttack_ != 0) {
      output.writeInt32(2, slashAttack_);
    }
    if (crushAttack_ != 0) {
      output.writeInt32(3, crushAttack_);
    }
    if (rangedAttack_ != 0) {
      output.writeInt32(4, rangedAttack_);
    }
    if (magicAttack_ != 0) {
      output.writeInt32(5, magicAttack_);
    }
    if (stabDefence_ != 0) {
      output.writeInt32(6, stabDefence_);
    }
    if (slashDefence_ != 0) {
      output.writeInt32(7, slashDefence_);
    }
    if (crushDefence_ != 0) {
      output.writeInt32(8, crushDefence_);
    }
    if (rangedDefence_ != 0) {
      output.writeInt32(9, rangedDefence_);
    }
    if (magicDefence_ != 0) {
      output.writeInt32(10, magicDefence_);
    }
    if (meleeStrength_ != 0) {
      output.writeInt32(11, meleeStrength_);
    }
    if (rangedStrength_ != 0) {
      output.writeInt32(12, rangedStrength_);
    }
    if (java.lang.Double.doubleToRawLongBits(magicDamage_) != 0) {
      output.writeDouble(13, magicDamage_);
    }
    if (prayer_ != 0) {
      output.writeInt32(14, prayer_);
    }
    getUnknownFields().writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (stabAttack_ != 0) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt32Size(1, stabAttack_);
    }
    if (slashAttack_ != 0) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt32Size(2, slashAttack_);
    }
    if (crushAttack_ != 0) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt32Size(3, crushAttack_);
    }
    if (rangedAttack_ != 0) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt32Size(4, rangedAttack_);
    }
    if (magicAttack_ != 0) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt32Size(5, magicAttack_);
    }
    if (stabDefence_ != 0) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt32Size(6, stabDefence_);
    }
    if (slashDefence_ != 0) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt32Size(7, slashDefence_);
    }
    if (crushDefence_ != 0) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt32Size(8, crushDefence_);
    }
    if (rangedDefence_ != 0) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt32Size(9, rangedDefence_);
    }
    if (magicDefence_ != 0) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt32Size(10, magicDefence_);
    }
    if (meleeStrength_ != 0) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt32Size(11, meleeStrength_);
    }
    if (rangedStrength_ != 0) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt32Size(12, rangedStrength_);
    }
    if (java.lang.Double.doubleToRawLongBits(magicDamage_) != 0) {
      size += com.google.protobuf.CodedOutputStream
        .computeDoubleSize(13, magicDamage_);
    }
    if (prayer_ != 0) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt32Size(14, prayer_);
    }
    size += getUnknownFields().getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof com.github.nkibler7.osrswikiscraper.StatBonuses)) {
      return super.equals(obj);
    }
    com.github.nkibler7.osrswikiscraper.StatBonuses other = (com.github.nkibler7.osrswikiscraper.StatBonuses) obj;

    if (getStabAttack()
        != other.getStabAttack()) return false;
    if (getSlashAttack()
        != other.getSlashAttack()) return false;
    if (getCrushAttack()
        != other.getCrushAttack()) return false;
    if (getRangedAttack()
        != other.getRangedAttack()) return false;
    if (getMagicAttack()
        != other.getMagicAttack()) return false;
    if (getStabDefence()
        != other.getStabDefence()) return false;
    if (getSlashDefence()
        != other.getSlashDefence()) return false;
    if (getCrushDefence()
        != other.getCrushDefence()) return false;
    if (getRangedDefence()
        != other.getRangedDefence()) return false;
    if (getMagicDefence()
        != other.getMagicDefence()) return false;
    if (getMeleeStrength()
        != other.getMeleeStrength()) return false;
    if (getRangedStrength()
        != other.getRangedStrength()) return false;
    if (java.lang.Double.doubleToLongBits(getMagicDamage())
        != java.lang.Double.doubleToLongBits(
            other.getMagicDamage())) return false;
    if (getPrayer()
        != other.getPrayer()) return false;
    if (!getUnknownFields().equals(other.getUnknownFields())) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    hash = (37 * hash) + STAB_ATTACK_FIELD_NUMBER;
    hash = (53 * hash) + getStabAttack();
    hash = (37 * hash) + SLASH_ATTACK_FIELD_NUMBER;
    hash = (53 * hash) + getSlashAttack();
    hash = (37 * hash) + CRUSH_ATTACK_FIELD_NUMBER;
    hash = (53 * hash) + getCrushAttack();
    hash = (37 * hash) + RANGED_ATTACK_FIELD_NUMBER;
    hash = (53 * hash) + getRangedAttack();
    hash = (37 * hash) + MAGIC_ATTACK_FIELD_NUMBER;
    hash = (53 * hash) + getMagicAttack();
    hash = (37 * hash) + STAB_DEFENCE_FIELD_NUMBER;
    hash = (53 * hash) + getStabDefence();
    hash = (37 * hash) + SLASH_DEFENCE_FIELD_NUMBER;
    hash = (53 * hash) + getSlashDefence();
    hash = (37 * hash) + CRUSH_DEFENCE_FIELD_NUMBER;
    hash = (53 * hash) + getCrushDefence();
    hash = (37 * hash) + RANGED_DEFENCE_FIELD_NUMBER;
    hash = (53 * hash) + getRangedDefence();
    hash = (37 * hash) + MAGIC_DEFENCE_FIELD_NUMBER;
    hash = (53 * hash) + getMagicDefence();
    hash = (37 * hash) + MELEE_STRENGTH_FIELD_NUMBER;
    hash = (53 * hash) + getMeleeStrength();
    hash = (37 * hash) + RANGED_STRENGTH_FIELD_NUMBER;
    hash = (53 * hash) + getRangedStrength();
    hash = (37 * hash) + MAGIC_DAMAGE_FIELD_NUMBER;
    hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
        java.lang.Double.doubleToLongBits(getMagicDamage()));
    hash = (37 * hash) + PRAYER_FIELD_NUMBER;
    hash = (53 * hash) + getPrayer();
    hash = (29 * hash) + getUnknownFields().hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static com.github.nkibler7.osrswikiscraper.StatBonuses parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.github.nkibler7.osrswikiscraper.StatBonuses parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.github.nkibler7.osrswikiscraper.StatBonuses parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.github.nkibler7.osrswikiscraper.StatBonuses parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.github.nkibler7.osrswikiscraper.StatBonuses parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.github.nkibler7.osrswikiscraper.StatBonuses parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.github.nkibler7.osrswikiscraper.StatBonuses parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.github.nkibler7.osrswikiscraper.StatBonuses parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  public static com.github.nkibler7.osrswikiscraper.StatBonuses parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }

  public static com.github.nkibler7.osrswikiscraper.StatBonuses parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.github.nkibler7.osrswikiscraper.StatBonuses parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.github.nkibler7.osrswikiscraper.StatBonuses parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(com.github.nkibler7.osrswikiscraper.StatBonuses prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * <pre>
   * A set of unique stat bonuses applied by equipment. These values are used in damage calculations
   * between players &amp; monsters.
   * </pre>
   *
   * Protobuf type {@code github.nkibler7.osrswikiscraper.StatBonuses}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:github.nkibler7.osrswikiscraper.StatBonuses)
      com.github.nkibler7.osrswikiscraper.StatBonusesOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.github.nkibler7.osrswikiscraper.StatBonusesOuterClass.internal_static_github_nkibler7_osrswikiscraper_StatBonuses_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.github.nkibler7.osrswikiscraper.StatBonusesOuterClass.internal_static_github_nkibler7_osrswikiscraper_StatBonuses_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.github.nkibler7.osrswikiscraper.StatBonuses.class, com.github.nkibler7.osrswikiscraper.StatBonuses.Builder.class);
    }

    // Construct using com.github.nkibler7.osrswikiscraper.StatBonuses.newBuilder()
    private Builder() {

    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);

    }
    @java.lang.Override
    public Builder clear() {
      super.clear();
      bitField0_ = 0;
      stabAttack_ = 0;
      slashAttack_ = 0;
      crushAttack_ = 0;
      rangedAttack_ = 0;
      magicAttack_ = 0;
      stabDefence_ = 0;
      slashDefence_ = 0;
      crushDefence_ = 0;
      rangedDefence_ = 0;
      magicDefence_ = 0;
      meleeStrength_ = 0;
      rangedStrength_ = 0;
      magicDamage_ = 0D;
      prayer_ = 0;
      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return com.github.nkibler7.osrswikiscraper.StatBonusesOuterClass.internal_static_github_nkibler7_osrswikiscraper_StatBonuses_descriptor;
    }

    @java.lang.Override
    public com.github.nkibler7.osrswikiscraper.StatBonuses getDefaultInstanceForType() {
      return com.github.nkibler7.osrswikiscraper.StatBonuses.getDefaultInstance();
    }

    @java.lang.Override
    public com.github.nkibler7.osrswikiscraper.StatBonuses build() {
      com.github.nkibler7.osrswikiscraper.StatBonuses result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public com.github.nkibler7.osrswikiscraper.StatBonuses buildPartial() {
      com.github.nkibler7.osrswikiscraper.StatBonuses result = new com.github.nkibler7.osrswikiscraper.StatBonuses(this);
      if (bitField0_ != 0) { buildPartial0(result); }
      onBuilt();
      return result;
    }

    private void buildPartial0(com.github.nkibler7.osrswikiscraper.StatBonuses result) {
      int from_bitField0_ = bitField0_;
      if (((from_bitField0_ & 0x00000001) != 0)) {
        result.stabAttack_ = stabAttack_;
      }
      if (((from_bitField0_ & 0x00000002) != 0)) {
        result.slashAttack_ = slashAttack_;
      }
      if (((from_bitField0_ & 0x00000004) != 0)) {
        result.crushAttack_ = crushAttack_;
      }
      if (((from_bitField0_ & 0x00000008) != 0)) {
        result.rangedAttack_ = rangedAttack_;
      }
      if (((from_bitField0_ & 0x00000010) != 0)) {
        result.magicAttack_ = magicAttack_;
      }
      if (((from_bitField0_ & 0x00000020) != 0)) {
        result.stabDefence_ = stabDefence_;
      }
      if (((from_bitField0_ & 0x00000040) != 0)) {
        result.slashDefence_ = slashDefence_;
      }
      if (((from_bitField0_ & 0x00000080) != 0)) {
        result.crushDefence_ = crushDefence_;
      }
      if (((from_bitField0_ & 0x00000100) != 0)) {
        result.rangedDefence_ = rangedDefence_;
      }
      if (((from_bitField0_ & 0x00000200) != 0)) {
        result.magicDefence_ = magicDefence_;
      }
      if (((from_bitField0_ & 0x00000400) != 0)) {
        result.meleeStrength_ = meleeStrength_;
      }
      if (((from_bitField0_ & 0x00000800) != 0)) {
        result.rangedStrength_ = rangedStrength_;
      }
      if (((from_bitField0_ & 0x00001000) != 0)) {
        result.magicDamage_ = magicDamage_;
      }
      if (((from_bitField0_ & 0x00002000) != 0)) {
        result.prayer_ = prayer_;
      }
    }

    @java.lang.Override
    public Builder clone() {
      return super.clone();
    }
    @java.lang.Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.setField(field, value);
    }
    @java.lang.Override
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return super.clearField(field);
    }
    @java.lang.Override
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return super.clearOneof(oneof);
    }
    @java.lang.Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, java.lang.Object value) {
      return super.setRepeatedField(field, index, value);
    }
    @java.lang.Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.addRepeatedField(field, value);
    }
    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof com.github.nkibler7.osrswikiscraper.StatBonuses) {
        return mergeFrom((com.github.nkibler7.osrswikiscraper.StatBonuses)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(com.github.nkibler7.osrswikiscraper.StatBonuses other) {
      if (other == com.github.nkibler7.osrswikiscraper.StatBonuses.getDefaultInstance()) return this;
      if (other.getStabAttack() != 0) {
        setStabAttack(other.getStabAttack());
      }
      if (other.getSlashAttack() != 0) {
        setSlashAttack(other.getSlashAttack());
      }
      if (other.getCrushAttack() != 0) {
        setCrushAttack(other.getCrushAttack());
      }
      if (other.getRangedAttack() != 0) {
        setRangedAttack(other.getRangedAttack());
      }
      if (other.getMagicAttack() != 0) {
        setMagicAttack(other.getMagicAttack());
      }
      if (other.getStabDefence() != 0) {
        setStabDefence(other.getStabDefence());
      }
      if (other.getSlashDefence() != 0) {
        setSlashDefence(other.getSlashDefence());
      }
      if (other.getCrushDefence() != 0) {
        setCrushDefence(other.getCrushDefence());
      }
      if (other.getRangedDefence() != 0) {
        setRangedDefence(other.getRangedDefence());
      }
      if (other.getMagicDefence() != 0) {
        setMagicDefence(other.getMagicDefence());
      }
      if (other.getMeleeStrength() != 0) {
        setMeleeStrength(other.getMeleeStrength());
      }
      if (other.getRangedStrength() != 0) {
        setRangedStrength(other.getRangedStrength());
      }
      if (other.getMagicDamage() != 0D) {
        setMagicDamage(other.getMagicDamage());
      }
      if (other.getPrayer() != 0) {
        setPrayer(other.getPrayer());
      }
      this.mergeUnknownFields(other.getUnknownFields());
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 8: {
              stabAttack_ = input.readInt32();
              bitField0_ |= 0x00000001;
              break;
            } // case 8
            case 16: {
              slashAttack_ = input.readInt32();
              bitField0_ |= 0x00000002;
              break;
            } // case 16
            case 24: {
              crushAttack_ = input.readInt32();
              bitField0_ |= 0x00000004;
              break;
            } // case 24
            case 32: {
              rangedAttack_ = input.readInt32();
              bitField0_ |= 0x00000008;
              break;
            } // case 32
            case 40: {
              magicAttack_ = input.readInt32();
              bitField0_ |= 0x00000010;
              break;
            } // case 40
            case 48: {
              stabDefence_ = input.readInt32();
              bitField0_ |= 0x00000020;
              break;
            } // case 48
            case 56: {
              slashDefence_ = input.readInt32();
              bitField0_ |= 0x00000040;
              break;
            } // case 56
            case 64: {
              crushDefence_ = input.readInt32();
              bitField0_ |= 0x00000080;
              break;
            } // case 64
            case 72: {
              rangedDefence_ = input.readInt32();
              bitField0_ |= 0x00000100;
              break;
            } // case 72
            case 80: {
              magicDefence_ = input.readInt32();
              bitField0_ |= 0x00000200;
              break;
            } // case 80
            case 88: {
              meleeStrength_ = input.readInt32();
              bitField0_ |= 0x00000400;
              break;
            } // case 88
            case 96: {
              rangedStrength_ = input.readInt32();
              bitField0_ |= 0x00000800;
              break;
            } // case 96
            case 105: {
              magicDamage_ = input.readDouble();
              bitField0_ |= 0x00001000;
              break;
            } // case 105
            case 112: {
              prayer_ = input.readInt32();
              bitField0_ |= 0x00002000;
              break;
            } // case 112
            default: {
              if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                done = true; // was an endgroup tag
              }
              break;
            } // default:
          } // switch (tag)
        } // while (!done)
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.unwrapIOException();
      } finally {
        onChanged();
      } // finally
      return this;
    }
    private int bitField0_;

    private int stabAttack_ ;
    /**
     * <pre>
     * The accuracy bonus applied to melee attack calculations if a stab-based attack option is
     * chosen.
     * </pre>
     *
     * <code>int32 stab_attack = 1;</code>
     * @return The stabAttack.
     */
    @java.lang.Override
    public int getStabAttack() {
      return stabAttack_;
    }
    /**
     * <pre>
     * The accuracy bonus applied to melee attack calculations if a stab-based attack option is
     * chosen.
     * </pre>
     *
     * <code>int32 stab_attack = 1;</code>
     * @param value The stabAttack to set.
     * @return This builder for chaining.
     */
    public Builder setStabAttack(int value) {

      stabAttack_ = value;
      bitField0_ |= 0x00000001;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The accuracy bonus applied to melee attack calculations if a stab-based attack option is
     * chosen.
     * </pre>
     *
     * <code>int32 stab_attack = 1;</code>
     * @return This builder for chaining.
     */
    public Builder clearStabAttack() {
      bitField0_ = (bitField0_ & ~0x00000001);
      stabAttack_ = 0;
      onChanged();
      return this;
    }

    private int slashAttack_ ;
    /**
     * <pre>
     * The accuracy bonus applied to melee attack calculations if a slash-based attack option is
     * chosen.
     * </pre>
     *
     * <code>int32 slash_attack = 2;</code>
     * @return The slashAttack.
     */
    @java.lang.Override
    public int getSlashAttack() {
      return slashAttack_;
    }
    /**
     * <pre>
     * The accuracy bonus applied to melee attack calculations if a slash-based attack option is
     * chosen.
     * </pre>
     *
     * <code>int32 slash_attack = 2;</code>
     * @param value The slashAttack to set.
     * @return This builder for chaining.
     */
    public Builder setSlashAttack(int value) {

      slashAttack_ = value;
      bitField0_ |= 0x00000002;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The accuracy bonus applied to melee attack calculations if a slash-based attack option is
     * chosen.
     * </pre>
     *
     * <code>int32 slash_attack = 2;</code>
     * @return This builder for chaining.
     */
    public Builder clearSlashAttack() {
      bitField0_ = (bitField0_ & ~0x00000002);
      slashAttack_ = 0;
      onChanged();
      return this;
    }

    private int crushAttack_ ;
    /**
     * <pre>
     * The accuracy bonus applied to melee attack calculations if a crush-based attack option is
     * chosen.
     * </pre>
     *
     * <code>int32 crush_attack = 3;</code>
     * @return The crushAttack.
     */
    @java.lang.Override
    public int getCrushAttack() {
      return crushAttack_;
    }
    /**
     * <pre>
     * The accuracy bonus applied to melee attack calculations if a crush-based attack option is
     * chosen.
     * </pre>
     *
     * <code>int32 crush_attack = 3;</code>
     * @param value The crushAttack to set.
     * @return This builder for chaining.
     */
    public Builder setCrushAttack(int value) {

      crushAttack_ = value;
      bitField0_ |= 0x00000004;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The accuracy bonus applied to melee attack calculations if a crush-based attack option is
     * chosen.
     * </pre>
     *
     * <code>int32 crush_attack = 3;</code>
     * @return This builder for chaining.
     */
    public Builder clearCrushAttack() {
      bitField0_ = (bitField0_ & ~0x00000004);
      crushAttack_ = 0;
      onChanged();
      return this;
    }

    private int rangedAttack_ ;
    /**
     * <pre>
     * The accuracy bonus applied to ranged attack calculations.
     * </pre>
     *
     * <code>int32 ranged_attack = 4;</code>
     * @return The rangedAttack.
     */
    @java.lang.Override
    public int getRangedAttack() {
      return rangedAttack_;
    }
    /**
     * <pre>
     * The accuracy bonus applied to ranged attack calculations.
     * </pre>
     *
     * <code>int32 ranged_attack = 4;</code>
     * @param value The rangedAttack to set.
     * @return This builder for chaining.
     */
    public Builder setRangedAttack(int value) {

      rangedAttack_ = value;
      bitField0_ |= 0x00000008;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The accuracy bonus applied to ranged attack calculations.
     * </pre>
     *
     * <code>int32 ranged_attack = 4;</code>
     * @return This builder for chaining.
     */
    public Builder clearRangedAttack() {
      bitField0_ = (bitField0_ & ~0x00000008);
      rangedAttack_ = 0;
      onChanged();
      return this;
    }

    private int magicAttack_ ;
    /**
     * <pre>
     * The accuracy bonus applied to magic attack calculations.
     * </pre>
     *
     * <code>int32 magic_attack = 5;</code>
     * @return The magicAttack.
     */
    @java.lang.Override
    public int getMagicAttack() {
      return magicAttack_;
    }
    /**
     * <pre>
     * The accuracy bonus applied to magic attack calculations.
     * </pre>
     *
     * <code>int32 magic_attack = 5;</code>
     * @param value The magicAttack to set.
     * @return This builder for chaining.
     */
    public Builder setMagicAttack(int value) {

      magicAttack_ = value;
      bitField0_ |= 0x00000010;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The accuracy bonus applied to magic attack calculations.
     * </pre>
     *
     * <code>int32 magic_attack = 5;</code>
     * @return This builder for chaining.
     */
    public Builder clearMagicAttack() {
      bitField0_ = (bitField0_ & ~0x00000010);
      magicAttack_ = 0;
      onChanged();
      return this;
    }

    private int stabDefence_ ;
    /**
     * <pre>
     * The defensive bonus applied to melee defence calculations if a stab-based attack option is
     * used by the attacker.
     * </pre>
     *
     * <code>int32 stab_defence = 6;</code>
     * @return The stabDefence.
     */
    @java.lang.Override
    public int getStabDefence() {
      return stabDefence_;
    }
    /**
     * <pre>
     * The defensive bonus applied to melee defence calculations if a stab-based attack option is
     * used by the attacker.
     * </pre>
     *
     * <code>int32 stab_defence = 6;</code>
     * @param value The stabDefence to set.
     * @return This builder for chaining.
     */
    public Builder setStabDefence(int value) {

      stabDefence_ = value;
      bitField0_ |= 0x00000020;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The defensive bonus applied to melee defence calculations if a stab-based attack option is
     * used by the attacker.
     * </pre>
     *
     * <code>int32 stab_defence = 6;</code>
     * @return This builder for chaining.
     */
    public Builder clearStabDefence() {
      bitField0_ = (bitField0_ & ~0x00000020);
      stabDefence_ = 0;
      onChanged();
      return this;
    }

    private int slashDefence_ ;
    /**
     * <pre>
     * The defensive bonus applied to melee defence calculations if a slash-based attack option is
     * used by the attacker.
     * </pre>
     *
     * <code>int32 slash_defence = 7;</code>
     * @return The slashDefence.
     */
    @java.lang.Override
    public int getSlashDefence() {
      return slashDefence_;
    }
    /**
     * <pre>
     * The defensive bonus applied to melee defence calculations if a slash-based attack option is
     * used by the attacker.
     * </pre>
     *
     * <code>int32 slash_defence = 7;</code>
     * @param value The slashDefence to set.
     * @return This builder for chaining.
     */
    public Builder setSlashDefence(int value) {

      slashDefence_ = value;
      bitField0_ |= 0x00000040;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The defensive bonus applied to melee defence calculations if a slash-based attack option is
     * used by the attacker.
     * </pre>
     *
     * <code>int32 slash_defence = 7;</code>
     * @return This builder for chaining.
     */
    public Builder clearSlashDefence() {
      bitField0_ = (bitField0_ & ~0x00000040);
      slashDefence_ = 0;
      onChanged();
      return this;
    }

    private int crushDefence_ ;
    /**
     * <pre>
     * The defensive bonus applied to melee defence calculations if a crush-based attack option is
     * used by the attacker.
     * </pre>
     *
     * <code>int32 crush_defence = 8;</code>
     * @return The crushDefence.
     */
    @java.lang.Override
    public int getCrushDefence() {
      return crushDefence_;
    }
    /**
     * <pre>
     * The defensive bonus applied to melee defence calculations if a crush-based attack option is
     * used by the attacker.
     * </pre>
     *
     * <code>int32 crush_defence = 8;</code>
     * @param value The crushDefence to set.
     * @return This builder for chaining.
     */
    public Builder setCrushDefence(int value) {

      crushDefence_ = value;
      bitField0_ |= 0x00000080;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The defensive bonus applied to melee defence calculations if a crush-based attack option is
     * used by the attacker.
     * </pre>
     *
     * <code>int32 crush_defence = 8;</code>
     * @return This builder for chaining.
     */
    public Builder clearCrushDefence() {
      bitField0_ = (bitField0_ & ~0x00000080);
      crushDefence_ = 0;
      onChanged();
      return this;
    }

    private int rangedDefence_ ;
    /**
     * <pre>
     * The defensive bonus applied to magic defence calculations if a ranged attack is used by the
     * attacker.
     * </pre>
     *
     * <code>int32 ranged_defence = 9;</code>
     * @return The rangedDefence.
     */
    @java.lang.Override
    public int getRangedDefence() {
      return rangedDefence_;
    }
    /**
     * <pre>
     * The defensive bonus applied to magic defence calculations if a ranged attack is used by the
     * attacker.
     * </pre>
     *
     * <code>int32 ranged_defence = 9;</code>
     * @param value The rangedDefence to set.
     * @return This builder for chaining.
     */
    public Builder setRangedDefence(int value) {

      rangedDefence_ = value;
      bitField0_ |= 0x00000100;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The defensive bonus applied to magic defence calculations if a ranged attack is used by the
     * attacker.
     * </pre>
     *
     * <code>int32 ranged_defence = 9;</code>
     * @return This builder for chaining.
     */
    public Builder clearRangedDefence() {
      bitField0_ = (bitField0_ & ~0x00000100);
      rangedDefence_ = 0;
      onChanged();
      return this;
    }

    private int magicDefence_ ;
    /**
     * <pre>
     * The defensive bonus applied to magic defence calculations if a magic attack is used by the
     * attacker.
     * </pre>
     *
     * <code>int32 magic_defence = 10;</code>
     * @return The magicDefence.
     */
    @java.lang.Override
    public int getMagicDefence() {
      return magicDefence_;
    }
    /**
     * <pre>
     * The defensive bonus applied to magic defence calculations if a magic attack is used by the
     * attacker.
     * </pre>
     *
     * <code>int32 magic_defence = 10;</code>
     * @param value The magicDefence to set.
     * @return This builder for chaining.
     */
    public Builder setMagicDefence(int value) {

      magicDefence_ = value;
      bitField0_ |= 0x00000200;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The defensive bonus applied to magic defence calculations if a magic attack is used by the
     * attacker.
     * </pre>
     *
     * <code>int32 magic_defence = 10;</code>
     * @return This builder for chaining.
     */
    public Builder clearMagicDefence() {
      bitField0_ = (bitField0_ & ~0x00000200);
      magicDefence_ = 0;
      onChanged();
      return this;
    }

    private int meleeStrength_ ;
    /**
     * <pre>
     * The strength bonus used to determine the player's maximum melee damage.
     * </pre>
     *
     * <code>int32 melee_strength = 11;</code>
     * @return The meleeStrength.
     */
    @java.lang.Override
    public int getMeleeStrength() {
      return meleeStrength_;
    }
    /**
     * <pre>
     * The strength bonus used to determine the player's maximum melee damage.
     * </pre>
     *
     * <code>int32 melee_strength = 11;</code>
     * @param value The meleeStrength to set.
     * @return This builder for chaining.
     */
    public Builder setMeleeStrength(int value) {

      meleeStrength_ = value;
      bitField0_ |= 0x00000400;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The strength bonus used to determine the player's maximum melee damage.
     * </pre>
     *
     * <code>int32 melee_strength = 11;</code>
     * @return This builder for chaining.
     */
    public Builder clearMeleeStrength() {
      bitField0_ = (bitField0_ & ~0x00000400);
      meleeStrength_ = 0;
      onChanged();
      return this;
    }

    private int rangedStrength_ ;
    /**
     * <pre>
     * The strength bonus used to determine the player's maximum ranged damage.
     * </pre>
     *
     * <code>int32 ranged_strength = 12;</code>
     * @return The rangedStrength.
     */
    @java.lang.Override
    public int getRangedStrength() {
      return rangedStrength_;
    }
    /**
     * <pre>
     * The strength bonus used to determine the player's maximum ranged damage.
     * </pre>
     *
     * <code>int32 ranged_strength = 12;</code>
     * @param value The rangedStrength to set.
     * @return This builder for chaining.
     */
    public Builder setRangedStrength(int value) {

      rangedStrength_ = value;
      bitField0_ |= 0x00000800;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The strength bonus used to determine the player's maximum ranged damage.
     * </pre>
     *
     * <code>int32 ranged_strength = 12;</code>
     * @return This builder for chaining.
     */
    public Builder clearRangedStrength() {
      bitField0_ = (bitField0_ & ~0x00000800);
      rangedStrength_ = 0;
      onChanged();
      return this;
    }

    private double magicDamage_ ;
    /**
     * <pre>
     * The strength bonus used to determine the player's maximum magic damage.
     *
     * Unlike the other additive strength bonuses, this is a damage multiplier. A value of 0.20
     * corresponds to an additional 20% magic damage (applied according to standard calculations).
     * </pre>
     *
     * <code>double magic_damage = 13;</code>
     * @return The magicDamage.
     */
    @java.lang.Override
    public double getMagicDamage() {
      return magicDamage_;
    }
    /**
     * <pre>
     * The strength bonus used to determine the player's maximum magic damage.
     *
     * Unlike the other additive strength bonuses, this is a damage multiplier. A value of 0.20
     * corresponds to an additional 20% magic damage (applied according to standard calculations).
     * </pre>
     *
     * <code>double magic_damage = 13;</code>
     * @param value The magicDamage to set.
     * @return This builder for chaining.
     */
    public Builder setMagicDamage(double value) {

      magicDamage_ = value;
      bitField0_ |= 0x00001000;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The strength bonus used to determine the player's maximum magic damage.
     *
     * Unlike the other additive strength bonuses, this is a damage multiplier. A value of 0.20
     * corresponds to an additional 20% magic damage (applied according to standard calculations).
     * </pre>
     *
     * <code>double magic_damage = 13;</code>
     * @return This builder for chaining.
     */
    public Builder clearMagicDamage() {
      bitField0_ = (bitField0_ & ~0x00001000);
      magicDamage_ = 0D;
      onChanged();
      return this;
    }

    private int prayer_ ;
    /**
     * <pre>
     * The prayer bonus lowers the drain rate of prayers. The drain rate of a prayer is the amount of
     * time a prayer takes to drain 1 prayer point. A prayer bonus of +15 will make all prayers last
     * 50% longer. Comparatively a bonus of +30 will double the length any prayer can be used. Each
     * additional +1 prayer bonus provides a corresponding +3.333% increase in the duration of
     * activated prayers.
     * </pre>
     *
     * <code>int32 prayer = 14;</code>
     * @return The prayer.
     */
    @java.lang.Override
    public int getPrayer() {
      return prayer_;
    }
    /**
     * <pre>
     * The prayer bonus lowers the drain rate of prayers. The drain rate of a prayer is the amount of
     * time a prayer takes to drain 1 prayer point. A prayer bonus of +15 will make all prayers last
     * 50% longer. Comparatively a bonus of +30 will double the length any prayer can be used. Each
     * additional +1 prayer bonus provides a corresponding +3.333% increase in the duration of
     * activated prayers.
     * </pre>
     *
     * <code>int32 prayer = 14;</code>
     * @param value The prayer to set.
     * @return This builder for chaining.
     */
    public Builder setPrayer(int value) {

      prayer_ = value;
      bitField0_ |= 0x00002000;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The prayer bonus lowers the drain rate of prayers. The drain rate of a prayer is the amount of
     * time a prayer takes to drain 1 prayer point. A prayer bonus of +15 will make all prayers last
     * 50% longer. Comparatively a bonus of +30 will double the length any prayer can be used. Each
     * additional +1 prayer bonus provides a corresponding +3.333% increase in the duration of
     * activated prayers.
     * </pre>
     *
     * <code>int32 prayer = 14;</code>
     * @return This builder for chaining.
     */
    public Builder clearPrayer() {
      bitField0_ = (bitField0_ & ~0x00002000);
      prayer_ = 0;
      onChanged();
      return this;
    }
    @java.lang.Override
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @java.lang.Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:github.nkibler7.osrswikiscraper.StatBonuses)
  }

  // @@protoc_insertion_point(class_scope:github.nkibler7.osrswikiscraper.StatBonuses)
  private static final com.github.nkibler7.osrswikiscraper.StatBonuses DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new com.github.nkibler7.osrswikiscraper.StatBonuses();
  }

  public static com.github.nkibler7.osrswikiscraper.StatBonuses getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<StatBonuses>
      PARSER = new com.google.protobuf.AbstractParser<StatBonuses>() {
    @java.lang.Override
    public StatBonuses parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      Builder builder = newBuilder();
      try {
        builder.mergeFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(builder.buildPartial());
      } catch (com.google.protobuf.UninitializedMessageException e) {
        throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(e)
            .setUnfinishedMessage(builder.buildPartial());
      }
      return builder.buildPartial();
    }
  };

  public static com.google.protobuf.Parser<StatBonuses> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<StatBonuses> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public com.github.nkibler7.osrswikiscraper.StatBonuses getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

