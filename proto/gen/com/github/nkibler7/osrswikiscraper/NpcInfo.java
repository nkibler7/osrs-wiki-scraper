// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: npc_infos.proto

package com.github.nkibler7.osrswikiscraper;

/**
 * <pre>
 * A single NPC defined on the OSRS wiki.
 * Note that NPCs with variants or "versions" may have multiple NpcInfo protos in the processed list. The set of IDs
 * should always be unique, though.
 * These protos are parsed from the "Infobox Monster" templates found on the wiki pages associated with the "Monsters"
 * category. The field names listed here exactly match the key names used in the template. Multi-versioned key/value
 * pairs are identified with numeric suffixes (i.e. "version1") and cause multiple NpcInfos to be generated, one for
 * each unique number suffix.
 * </pre>
 *
 * Protobuf type {@code github.nkibler7.osrswikiscraper.NpcInfo}
 */
public final class NpcInfo extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:github.nkibler7.osrswikiscraper.NpcInfo)
    NpcInfoOrBuilder {
private static final long serialVersionUID = 0L;
  // Use NpcInfo.newBuilder() to construct.
  private NpcInfo(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private NpcInfo() {
    ids_ = emptyIntList();
    name_ = "";
    version_ = "";
  }

  @java.lang.Override
  @SuppressWarnings({"unused"})
  protected java.lang.Object newInstance(
      UnusedPrivateParameter unused) {
    return new NpcInfo();
  }

  @java.lang.Override
  public final com.google.protobuf.UnknownFieldSet
  getUnknownFields() {
    return this.unknownFields;
  }
  private NpcInfo(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    this();
    if (extensionRegistry == null) {
      throw new java.lang.NullPointerException();
    }
    int mutable_bitField0_ = 0;
    com.google.protobuf.UnknownFieldSet.Builder unknownFields =
        com.google.protobuf.UnknownFieldSet.newBuilder();
    try {
      boolean done = false;
      while (!done) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            done = true;
            break;
          case 8: {
            if (!((mutable_bitField0_ & 0x00000001) != 0)) {
              ids_ = newIntList();
              mutable_bitField0_ |= 0x00000001;
            }
            ids_.addInt(input.readInt32());
            break;
          }
          case 10: {
            int length = input.readRawVarint32();
            int limit = input.pushLimit(length);
            if (!((mutable_bitField0_ & 0x00000001) != 0) && input.getBytesUntilLimit() > 0) {
              ids_ = newIntList();
              mutable_bitField0_ |= 0x00000001;
            }
            while (input.getBytesUntilLimit() > 0) {
              ids_.addInt(input.readInt32());
            }
            input.popLimit(limit);
            break;
          }
          case 18: {
            java.lang.String s = input.readStringRequireUtf8();

            name_ = s;
            break;
          }
          case 26: {
            java.lang.String s = input.readStringRequireUtf8();

            version_ = s;
            break;
          }
          case 32: {

            hitpoints_ = input.readInt32();
            break;
          }
          case 40: {

            att_ = input.readInt32();
            break;
          }
          case 48: {

            str_ = input.readInt32();
            break;
          }
          case 56: {

            def_ = input.readInt32();
            break;
          }
          case 64: {

            mage_ = input.readInt32();
            break;
          }
          case 72: {

            range_ = input.readInt32();
            break;
          }
          case 80: {

            attbns_ = input.readInt32();
            break;
          }
          case 88: {

            strbns_ = input.readInt32();
            break;
          }
          case 96: {

            amagic_ = input.readInt32();
            break;
          }
          case 104: {

            mbns_ = input.readInt32();
            break;
          }
          case 112: {

            arange_ = input.readInt32();
            break;
          }
          case 120: {

            rngbns_ = input.readInt32();
            break;
          }
          case 128: {

            dstab_ = input.readInt32();
            break;
          }
          case 136: {

            dslash_ = input.readInt32();
            break;
          }
          case 144: {

            dcrush_ = input.readInt32();
            break;
          }
          case 152: {

            dmagic_ = input.readInt32();
            break;
          }
          case 160: {

            drange_ = input.readInt32();
            break;
          }
          default: {
            if (!parseUnknownField(
                input, unknownFields, extensionRegistry, tag)) {
              done = true;
            }
            break;
          }
        }
      }
    } catch (com.google.protobuf.InvalidProtocolBufferException e) {
      throw e.setUnfinishedMessage(this);
    } catch (java.io.IOException e) {
      throw new com.google.protobuf.InvalidProtocolBufferException(
          e).setUnfinishedMessage(this);
    } finally {
      if (((mutable_bitField0_ & 0x00000001) != 0)) {
        ids_.makeImmutable(); // C
      }
      this.unknownFields = unknownFields.build();
      makeExtensionsImmutable();
    }
  }
  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return com.github.nkibler7.osrswikiscraper.NpcInfosOuterClass.internal_static_github_nkibler7_osrswikiscraper_NpcInfo_descriptor;
  }

  @java.lang.Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return com.github.nkibler7.osrswikiscraper.NpcInfosOuterClass.internal_static_github_nkibler7_osrswikiscraper_NpcInfo_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            com.github.nkibler7.osrswikiscraper.NpcInfo.class, com.github.nkibler7.osrswikiscraper.NpcInfo.Builder.class);
  }

  public static final int IDS_FIELD_NUMBER = 1;
  private com.google.protobuf.Internal.IntList ids_;
  /**
   * <pre>
   * The list of IDs associated with this NPC.
   * </pre>
   *
   * <code>repeated int32 ids = 1;</code>
   * @return A list containing the ids.
   */
  @java.lang.Override
  public java.util.List<java.lang.Integer>
      getIdsList() {
    return ids_;
  }
  /**
   * <pre>
   * The list of IDs associated with this NPC.
   * </pre>
   *
   * <code>repeated int32 ids = 1;</code>
   * @return The count of ids.
   */
  public int getIdsCount() {
    return ids_.size();
  }
  /**
   * <pre>
   * The list of IDs associated with this NPC.
   * </pre>
   *
   * <code>repeated int32 ids = 1;</code>
   * @param index The index of the element to return.
   * @return The ids at the given index.
   */
  public int getIds(int index) {
    return ids_.getInt(index);
  }
  private int idsMemoizedSerializedSize = -1;

  public static final int NAME_FIELD_NUMBER = 2;
  private volatile java.lang.Object name_;
  /**
   * <pre>
   * The name of this NPC.
   * </pre>
   *
   * <code>string name = 2;</code>
   * @return The name.
   */
  @java.lang.Override
  public java.lang.String getName() {
    java.lang.Object ref = name_;
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = 
          (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      name_ = s;
      return s;
    }
  }
  /**
   * <pre>
   * The name of this NPC.
   * </pre>
   *
   * <code>string name = 2;</code>
   * @return The bytes for name.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString
      getNameBytes() {
    java.lang.Object ref = name_;
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b = 
          com.google.protobuf.ByteString.copyFromUtf8(
              (java.lang.String) ref);
      name_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int VERSION_FIELD_NUMBER = 3;
  private volatile java.lang.Object version_;
  /**
   * <pre>
   * The name of the version of this NPC, if one exists. This is set for NPCs that have multiple versions, yet are
   * represented by the same wiki page. Example values for this field are "Phase 1", "Phase 2", etc. for phased NPCs,
   * like the Abyssal Sire.
   * </pre>
   *
   * <code>string version = 3;</code>
   * @return The version.
   */
  @java.lang.Override
  public java.lang.String getVersion() {
    java.lang.Object ref = version_;
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = 
          (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      version_ = s;
      return s;
    }
  }
  /**
   * <pre>
   * The name of the version of this NPC, if one exists. This is set for NPCs that have multiple versions, yet are
   * represented by the same wiki page. Example values for this field are "Phase 1", "Phase 2", etc. for phased NPCs,
   * like the Abyssal Sire.
   * </pre>
   *
   * <code>string version = 3;</code>
   * @return The bytes for version.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString
      getVersionBytes() {
    java.lang.Object ref = version_;
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b = 
          com.google.protobuf.ByteString.copyFromUtf8(
              (java.lang.String) ref);
      version_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int HITPOINTS_FIELD_NUMBER = 4;
  private int hitpoints_;
  /**
   * <pre>
   * The max health of this NPC.
   * </pre>
   *
   * <code>int32 hitpoints = 4;</code>
   * @return The hitpoints.
   */
  @java.lang.Override
  public int getHitpoints() {
    return hitpoints_;
  }

  public static final int ATT_FIELD_NUMBER = 5;
  private int att_;
  /**
   * <pre>
   * The attack stat of this NPC, a measure of its melee accuracy.
   * </pre>
   *
   * <code>int32 att = 5;</code>
   * @return The att.
   */
  @java.lang.Override
  public int getAtt() {
    return att_;
  }

  public static final int STR_FIELD_NUMBER = 6;
  private int str_;
  /**
   * <pre>
   * The strength stat of this NPC, a measure of its melee power.
   * </pre>
   *
   * <code>int32 str = 6;</code>
   * @return The str.
   */
  @java.lang.Override
  public int getStr() {
    return str_;
  }

  public static final int DEF_FIELD_NUMBER = 7;
  private int def_;
  /**
   * <pre>
   * The defence stat of this NPC, a measure of its damage protection in combat.
   * </pre>
   *
   * <code>int32 def = 7;</code>
   * @return The def.
   */
  @java.lang.Override
  public int getDef() {
    return def_;
  }

  public static final int MAGE_FIELD_NUMBER = 8;
  private int mage_;
  /**
   * <pre>
   * The magic stat of this NPC.
   * </pre>
   *
   * <code>int32 mage = 8;</code>
   * @return The mage.
   */
  @java.lang.Override
  public int getMage() {
    return mage_;
  }

  public static final int RANGE_FIELD_NUMBER = 9;
  private int range_;
  /**
   * <pre>
   * The ranged stat of this NPC.
   * </pre>
   *
   * <code>int32 range = 9;</code>
   * @return The range.
   */
  @java.lang.Override
  public int getRange() {
    return range_;
  }

  public static final int ATTBNS_FIELD_NUMBER = 10;
  private int attbns_;
  /**
   * <pre>
   * The bonus attack stat of this NPC.
   * </pre>
   *
   * <code>int32 attbns = 10;</code>
   * @return The attbns.
   */
  @java.lang.Override
  public int getAttbns() {
    return attbns_;
  }

  public static final int STRBNS_FIELD_NUMBER = 11;
  private int strbns_;
  /**
   * <pre>
   * The bonus strength stat of this NPC.
   * </pre>
   *
   * <code>int32 strbns = 11;</code>
   * @return The strbns.
   */
  @java.lang.Override
  public int getStrbns() {
    return strbns_;
  }

  public static final int AMAGIC_FIELD_NUMBER = 12;
  private int amagic_;
  /**
   * <pre>
   * The bonus magic stat of this NPC.
   * </pre>
   *
   * <code>int32 amagic = 12;</code>
   * @return The amagic.
   */
  @java.lang.Override
  public int getAmagic() {
    return amagic_;
  }

  public static final int MBNS_FIELD_NUMBER = 13;
  private int mbns_;
  /**
   * <pre>
   * The bonus magic damage stat of this NPC.
   * </pre>
   *
   * <code>int32 mbns = 13;</code>
   * @return The mbns.
   */
  @java.lang.Override
  public int getMbns() {
    return mbns_;
  }

  public static final int ARANGE_FIELD_NUMBER = 14;
  private int arange_;
  /**
   * <pre>
   * The bonus ranged stat of this NPC.
   * </pre>
   *
   * <code>int32 arange = 14;</code>
   * @return The arange.
   */
  @java.lang.Override
  public int getArange() {
    return arange_;
  }

  public static final int RNGBNS_FIELD_NUMBER = 15;
  private int rngbns_;
  /**
   * <pre>
   * The bonus ranged damage stat of this NPC.
   * </pre>
   *
   * <code>int32 rngbns = 15;</code>
   * @return The rngbns.
   */
  @java.lang.Override
  public int getRngbns() {
    return rngbns_;
  }

  public static final int DSTAB_FIELD_NUMBER = 16;
  private int dstab_;
  /**
   * <pre>
   * This NPC's resistance to stab attacks.
   * </pre>
   *
   * <code>int32 dstab = 16;</code>
   * @return The dstab.
   */
  @java.lang.Override
  public int getDstab() {
    return dstab_;
  }

  public static final int DSLASH_FIELD_NUMBER = 17;
  private int dslash_;
  /**
   * <pre>
   * This NPC's resistance to slash attacks.
   * </pre>
   *
   * <code>int32 dslash = 17;</code>
   * @return The dslash.
   */
  @java.lang.Override
  public int getDslash() {
    return dslash_;
  }

  public static final int DCRUSH_FIELD_NUMBER = 18;
  private int dcrush_;
  /**
   * <pre>
   * This NPC's resistance to crush attacks.
   * </pre>
   *
   * <code>int32 dcrush = 18;</code>
   * @return The dcrush.
   */
  @java.lang.Override
  public int getDcrush() {
    return dcrush_;
  }

  public static final int DMAGIC_FIELD_NUMBER = 19;
  private int dmagic_;
  /**
   * <pre>
   * This NPC's resistance to magic attacks.
   * </pre>
   *
   * <code>int32 dmagic = 19;</code>
   * @return The dmagic.
   */
  @java.lang.Override
  public int getDmagic() {
    return dmagic_;
  }

  public static final int DRANGE_FIELD_NUMBER = 20;
  private int drange_;
  /**
   * <pre>
   * This NPC's resistance to ranged attacks.
   * </pre>
   *
   * <code>int32 drange = 20;</code>
   * @return The drange.
   */
  @java.lang.Override
  public int getDrange() {
    return drange_;
  }

  private byte memoizedIsInitialized = -1;
  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    getSerializedSize();
    if (getIdsList().size() > 0) {
      output.writeUInt32NoTag(10);
      output.writeUInt32NoTag(idsMemoizedSerializedSize);
    }
    for (int i = 0; i < ids_.size(); i++) {
      output.writeInt32NoTag(ids_.getInt(i));
    }
    if (!getNameBytes().isEmpty()) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 2, name_);
    }
    if (!getVersionBytes().isEmpty()) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 3, version_);
    }
    if (hitpoints_ != 0) {
      output.writeInt32(4, hitpoints_);
    }
    if (att_ != 0) {
      output.writeInt32(5, att_);
    }
    if (str_ != 0) {
      output.writeInt32(6, str_);
    }
    if (def_ != 0) {
      output.writeInt32(7, def_);
    }
    if (mage_ != 0) {
      output.writeInt32(8, mage_);
    }
    if (range_ != 0) {
      output.writeInt32(9, range_);
    }
    if (attbns_ != 0) {
      output.writeInt32(10, attbns_);
    }
    if (strbns_ != 0) {
      output.writeInt32(11, strbns_);
    }
    if (amagic_ != 0) {
      output.writeInt32(12, amagic_);
    }
    if (mbns_ != 0) {
      output.writeInt32(13, mbns_);
    }
    if (arange_ != 0) {
      output.writeInt32(14, arange_);
    }
    if (rngbns_ != 0) {
      output.writeInt32(15, rngbns_);
    }
    if (dstab_ != 0) {
      output.writeInt32(16, dstab_);
    }
    if (dslash_ != 0) {
      output.writeInt32(17, dslash_);
    }
    if (dcrush_ != 0) {
      output.writeInt32(18, dcrush_);
    }
    if (dmagic_ != 0) {
      output.writeInt32(19, dmagic_);
    }
    if (drange_ != 0) {
      output.writeInt32(20, drange_);
    }
    unknownFields.writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    {
      int dataSize = 0;
      for (int i = 0; i < ids_.size(); i++) {
        dataSize += com.google.protobuf.CodedOutputStream
          .computeInt32SizeNoTag(ids_.getInt(i));
      }
      size += dataSize;
      if (!getIdsList().isEmpty()) {
        size += 1;
        size += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(dataSize);
      }
      idsMemoizedSerializedSize = dataSize;
    }
    if (!getNameBytes().isEmpty()) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(2, name_);
    }
    if (!getVersionBytes().isEmpty()) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(3, version_);
    }
    if (hitpoints_ != 0) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt32Size(4, hitpoints_);
    }
    if (att_ != 0) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt32Size(5, att_);
    }
    if (str_ != 0) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt32Size(6, str_);
    }
    if (def_ != 0) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt32Size(7, def_);
    }
    if (mage_ != 0) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt32Size(8, mage_);
    }
    if (range_ != 0) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt32Size(9, range_);
    }
    if (attbns_ != 0) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt32Size(10, attbns_);
    }
    if (strbns_ != 0) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt32Size(11, strbns_);
    }
    if (amagic_ != 0) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt32Size(12, amagic_);
    }
    if (mbns_ != 0) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt32Size(13, mbns_);
    }
    if (arange_ != 0) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt32Size(14, arange_);
    }
    if (rngbns_ != 0) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt32Size(15, rngbns_);
    }
    if (dstab_ != 0) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt32Size(16, dstab_);
    }
    if (dslash_ != 0) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt32Size(17, dslash_);
    }
    if (dcrush_ != 0) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt32Size(18, dcrush_);
    }
    if (dmagic_ != 0) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt32Size(19, dmagic_);
    }
    if (drange_ != 0) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt32Size(20, drange_);
    }
    size += unknownFields.getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof com.github.nkibler7.osrswikiscraper.NpcInfo)) {
      return super.equals(obj);
    }
    com.github.nkibler7.osrswikiscraper.NpcInfo other = (com.github.nkibler7.osrswikiscraper.NpcInfo) obj;

    if (!getIdsList()
        .equals(other.getIdsList())) return false;
    if (!getName()
        .equals(other.getName())) return false;
    if (!getVersion()
        .equals(other.getVersion())) return false;
    if (getHitpoints()
        != other.getHitpoints()) return false;
    if (getAtt()
        != other.getAtt()) return false;
    if (getStr()
        != other.getStr()) return false;
    if (getDef()
        != other.getDef()) return false;
    if (getMage()
        != other.getMage()) return false;
    if (getRange()
        != other.getRange()) return false;
    if (getAttbns()
        != other.getAttbns()) return false;
    if (getStrbns()
        != other.getStrbns()) return false;
    if (getAmagic()
        != other.getAmagic()) return false;
    if (getMbns()
        != other.getMbns()) return false;
    if (getArange()
        != other.getArange()) return false;
    if (getRngbns()
        != other.getRngbns()) return false;
    if (getDstab()
        != other.getDstab()) return false;
    if (getDslash()
        != other.getDslash()) return false;
    if (getDcrush()
        != other.getDcrush()) return false;
    if (getDmagic()
        != other.getDmagic()) return false;
    if (getDrange()
        != other.getDrange()) return false;
    if (!unknownFields.equals(other.unknownFields)) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    if (getIdsCount() > 0) {
      hash = (37 * hash) + IDS_FIELD_NUMBER;
      hash = (53 * hash) + getIdsList().hashCode();
    }
    hash = (37 * hash) + NAME_FIELD_NUMBER;
    hash = (53 * hash) + getName().hashCode();
    hash = (37 * hash) + VERSION_FIELD_NUMBER;
    hash = (53 * hash) + getVersion().hashCode();
    hash = (37 * hash) + HITPOINTS_FIELD_NUMBER;
    hash = (53 * hash) + getHitpoints();
    hash = (37 * hash) + ATT_FIELD_NUMBER;
    hash = (53 * hash) + getAtt();
    hash = (37 * hash) + STR_FIELD_NUMBER;
    hash = (53 * hash) + getStr();
    hash = (37 * hash) + DEF_FIELD_NUMBER;
    hash = (53 * hash) + getDef();
    hash = (37 * hash) + MAGE_FIELD_NUMBER;
    hash = (53 * hash) + getMage();
    hash = (37 * hash) + RANGE_FIELD_NUMBER;
    hash = (53 * hash) + getRange();
    hash = (37 * hash) + ATTBNS_FIELD_NUMBER;
    hash = (53 * hash) + getAttbns();
    hash = (37 * hash) + STRBNS_FIELD_NUMBER;
    hash = (53 * hash) + getStrbns();
    hash = (37 * hash) + AMAGIC_FIELD_NUMBER;
    hash = (53 * hash) + getAmagic();
    hash = (37 * hash) + MBNS_FIELD_NUMBER;
    hash = (53 * hash) + getMbns();
    hash = (37 * hash) + ARANGE_FIELD_NUMBER;
    hash = (53 * hash) + getArange();
    hash = (37 * hash) + RNGBNS_FIELD_NUMBER;
    hash = (53 * hash) + getRngbns();
    hash = (37 * hash) + DSTAB_FIELD_NUMBER;
    hash = (53 * hash) + getDstab();
    hash = (37 * hash) + DSLASH_FIELD_NUMBER;
    hash = (53 * hash) + getDslash();
    hash = (37 * hash) + DCRUSH_FIELD_NUMBER;
    hash = (53 * hash) + getDcrush();
    hash = (37 * hash) + DMAGIC_FIELD_NUMBER;
    hash = (53 * hash) + getDmagic();
    hash = (37 * hash) + DRANGE_FIELD_NUMBER;
    hash = (53 * hash) + getDrange();
    hash = (29 * hash) + unknownFields.hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static com.github.nkibler7.osrswikiscraper.NpcInfo parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.github.nkibler7.osrswikiscraper.NpcInfo parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.github.nkibler7.osrswikiscraper.NpcInfo parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.github.nkibler7.osrswikiscraper.NpcInfo parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.github.nkibler7.osrswikiscraper.NpcInfo parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.github.nkibler7.osrswikiscraper.NpcInfo parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.github.nkibler7.osrswikiscraper.NpcInfo parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.github.nkibler7.osrswikiscraper.NpcInfo parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.github.nkibler7.osrswikiscraper.NpcInfo parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }
  public static com.github.nkibler7.osrswikiscraper.NpcInfo parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.github.nkibler7.osrswikiscraper.NpcInfo parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.github.nkibler7.osrswikiscraper.NpcInfo parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(com.github.nkibler7.osrswikiscraper.NpcInfo prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * <pre>
   * A single NPC defined on the OSRS wiki.
   * Note that NPCs with variants or "versions" may have multiple NpcInfo protos in the processed list. The set of IDs
   * should always be unique, though.
   * These protos are parsed from the "Infobox Monster" templates found on the wiki pages associated with the "Monsters"
   * category. The field names listed here exactly match the key names used in the template. Multi-versioned key/value
   * pairs are identified with numeric suffixes (i.e. "version1") and cause multiple NpcInfos to be generated, one for
   * each unique number suffix.
   * </pre>
   *
   * Protobuf type {@code github.nkibler7.osrswikiscraper.NpcInfo}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:github.nkibler7.osrswikiscraper.NpcInfo)
      com.github.nkibler7.osrswikiscraper.NpcInfoOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.github.nkibler7.osrswikiscraper.NpcInfosOuterClass.internal_static_github_nkibler7_osrswikiscraper_NpcInfo_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.github.nkibler7.osrswikiscraper.NpcInfosOuterClass.internal_static_github_nkibler7_osrswikiscraper_NpcInfo_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.github.nkibler7.osrswikiscraper.NpcInfo.class, com.github.nkibler7.osrswikiscraper.NpcInfo.Builder.class);
    }

    // Construct using com.github.nkibler7.osrswikiscraper.NpcInfo.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }
    private void maybeForceBuilderInitialization() {
      if (com.google.protobuf.GeneratedMessageV3
              .alwaysUseFieldBuilders) {
      }
    }
    @java.lang.Override
    public Builder clear() {
      super.clear();
      ids_ = emptyIntList();
      bitField0_ = (bitField0_ & ~0x00000001);
      name_ = "";

      version_ = "";

      hitpoints_ = 0;

      att_ = 0;

      str_ = 0;

      def_ = 0;

      mage_ = 0;

      range_ = 0;

      attbns_ = 0;

      strbns_ = 0;

      amagic_ = 0;

      mbns_ = 0;

      arange_ = 0;

      rngbns_ = 0;

      dstab_ = 0;

      dslash_ = 0;

      dcrush_ = 0;

      dmagic_ = 0;

      drange_ = 0;

      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return com.github.nkibler7.osrswikiscraper.NpcInfosOuterClass.internal_static_github_nkibler7_osrswikiscraper_NpcInfo_descriptor;
    }

    @java.lang.Override
    public com.github.nkibler7.osrswikiscraper.NpcInfo getDefaultInstanceForType() {
      return com.github.nkibler7.osrswikiscraper.NpcInfo.getDefaultInstance();
    }

    @java.lang.Override
    public com.github.nkibler7.osrswikiscraper.NpcInfo build() {
      com.github.nkibler7.osrswikiscraper.NpcInfo result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public com.github.nkibler7.osrswikiscraper.NpcInfo buildPartial() {
      com.github.nkibler7.osrswikiscraper.NpcInfo result = new com.github.nkibler7.osrswikiscraper.NpcInfo(this);
      int from_bitField0_ = bitField0_;
      if (((bitField0_ & 0x00000001) != 0)) {
        ids_.makeImmutable();
        bitField0_ = (bitField0_ & ~0x00000001);
      }
      result.ids_ = ids_;
      result.name_ = name_;
      result.version_ = version_;
      result.hitpoints_ = hitpoints_;
      result.att_ = att_;
      result.str_ = str_;
      result.def_ = def_;
      result.mage_ = mage_;
      result.range_ = range_;
      result.attbns_ = attbns_;
      result.strbns_ = strbns_;
      result.amagic_ = amagic_;
      result.mbns_ = mbns_;
      result.arange_ = arange_;
      result.rngbns_ = rngbns_;
      result.dstab_ = dstab_;
      result.dslash_ = dslash_;
      result.dcrush_ = dcrush_;
      result.dmagic_ = dmagic_;
      result.drange_ = drange_;
      onBuilt();
      return result;
    }

    @java.lang.Override
    public Builder clone() {
      return super.clone();
    }
    @java.lang.Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.setField(field, value);
    }
    @java.lang.Override
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return super.clearField(field);
    }
    @java.lang.Override
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return super.clearOneof(oneof);
    }
    @java.lang.Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, java.lang.Object value) {
      return super.setRepeatedField(field, index, value);
    }
    @java.lang.Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.addRepeatedField(field, value);
    }
    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof com.github.nkibler7.osrswikiscraper.NpcInfo) {
        return mergeFrom((com.github.nkibler7.osrswikiscraper.NpcInfo)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(com.github.nkibler7.osrswikiscraper.NpcInfo other) {
      if (other == com.github.nkibler7.osrswikiscraper.NpcInfo.getDefaultInstance()) return this;
      if (!other.ids_.isEmpty()) {
        if (ids_.isEmpty()) {
          ids_ = other.ids_;
          bitField0_ = (bitField0_ & ~0x00000001);
        } else {
          ensureIdsIsMutable();
          ids_.addAll(other.ids_);
        }
        onChanged();
      }
      if (!other.getName().isEmpty()) {
        name_ = other.name_;
        onChanged();
      }
      if (!other.getVersion().isEmpty()) {
        version_ = other.version_;
        onChanged();
      }
      if (other.getHitpoints() != 0) {
        setHitpoints(other.getHitpoints());
      }
      if (other.getAtt() != 0) {
        setAtt(other.getAtt());
      }
      if (other.getStr() != 0) {
        setStr(other.getStr());
      }
      if (other.getDef() != 0) {
        setDef(other.getDef());
      }
      if (other.getMage() != 0) {
        setMage(other.getMage());
      }
      if (other.getRange() != 0) {
        setRange(other.getRange());
      }
      if (other.getAttbns() != 0) {
        setAttbns(other.getAttbns());
      }
      if (other.getStrbns() != 0) {
        setStrbns(other.getStrbns());
      }
      if (other.getAmagic() != 0) {
        setAmagic(other.getAmagic());
      }
      if (other.getMbns() != 0) {
        setMbns(other.getMbns());
      }
      if (other.getArange() != 0) {
        setArange(other.getArange());
      }
      if (other.getRngbns() != 0) {
        setRngbns(other.getRngbns());
      }
      if (other.getDstab() != 0) {
        setDstab(other.getDstab());
      }
      if (other.getDslash() != 0) {
        setDslash(other.getDslash());
      }
      if (other.getDcrush() != 0) {
        setDcrush(other.getDcrush());
      }
      if (other.getDmagic() != 0) {
        setDmagic(other.getDmagic());
      }
      if (other.getDrange() != 0) {
        setDrange(other.getDrange());
      }
      this.mergeUnknownFields(other.unknownFields);
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      com.github.nkibler7.osrswikiscraper.NpcInfo parsedMessage = null;
      try {
        parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        parsedMessage = (com.github.nkibler7.osrswikiscraper.NpcInfo) e.getUnfinishedMessage();
        throw e.unwrapIOException();
      } finally {
        if (parsedMessage != null) {
          mergeFrom(parsedMessage);
        }
      }
      return this;
    }
    private int bitField0_;

    private com.google.protobuf.Internal.IntList ids_ = emptyIntList();
    private void ensureIdsIsMutable() {
      if (!((bitField0_ & 0x00000001) != 0)) {
        ids_ = mutableCopy(ids_);
        bitField0_ |= 0x00000001;
       }
    }
    /**
     * <pre>
     * The list of IDs associated with this NPC.
     * </pre>
     *
     * <code>repeated int32 ids = 1;</code>
     * @return A list containing the ids.
     */
    public java.util.List<java.lang.Integer>
        getIdsList() {
      return ((bitField0_ & 0x00000001) != 0) ?
               java.util.Collections.unmodifiableList(ids_) : ids_;
    }
    /**
     * <pre>
     * The list of IDs associated with this NPC.
     * </pre>
     *
     * <code>repeated int32 ids = 1;</code>
     * @return The count of ids.
     */
    public int getIdsCount() {
      return ids_.size();
    }
    /**
     * <pre>
     * The list of IDs associated with this NPC.
     * </pre>
     *
     * <code>repeated int32 ids = 1;</code>
     * @param index The index of the element to return.
     * @return The ids at the given index.
     */
    public int getIds(int index) {
      return ids_.getInt(index);
    }
    /**
     * <pre>
     * The list of IDs associated with this NPC.
     * </pre>
     *
     * <code>repeated int32 ids = 1;</code>
     * @param index The index to set the value at.
     * @param value The ids to set.
     * @return This builder for chaining.
     */
    public Builder setIds(
        int index, int value) {
      ensureIdsIsMutable();
      ids_.setInt(index, value);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The list of IDs associated with this NPC.
     * </pre>
     *
     * <code>repeated int32 ids = 1;</code>
     * @param value The ids to add.
     * @return This builder for chaining.
     */
    public Builder addIds(int value) {
      ensureIdsIsMutable();
      ids_.addInt(value);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The list of IDs associated with this NPC.
     * </pre>
     *
     * <code>repeated int32 ids = 1;</code>
     * @param values The ids to add.
     * @return This builder for chaining.
     */
    public Builder addAllIds(
        java.lang.Iterable<? extends java.lang.Integer> values) {
      ensureIdsIsMutable();
      com.google.protobuf.AbstractMessageLite.Builder.addAll(
          values, ids_);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The list of IDs associated with this NPC.
     * </pre>
     *
     * <code>repeated int32 ids = 1;</code>
     * @return This builder for chaining.
     */
    public Builder clearIds() {
      ids_ = emptyIntList();
      bitField0_ = (bitField0_ & ~0x00000001);
      onChanged();
      return this;
    }

    private java.lang.Object name_ = "";
    /**
     * <pre>
     * The name of this NPC.
     * </pre>
     *
     * <code>string name = 2;</code>
     * @return The name.
     */
    public java.lang.String getName() {
      java.lang.Object ref = name_;
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        name_ = s;
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }
    /**
     * <pre>
     * The name of this NPC.
     * </pre>
     *
     * <code>string name = 2;</code>
     * @return The bytes for name.
     */
    public com.google.protobuf.ByteString
        getNameBytes() {
      java.lang.Object ref = name_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        name_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <pre>
     * The name of this NPC.
     * </pre>
     *
     * <code>string name = 2;</code>
     * @param value The name to set.
     * @return This builder for chaining.
     */
    public Builder setName(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      name_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The name of this NPC.
     * </pre>
     *
     * <code>string name = 2;</code>
     * @return This builder for chaining.
     */
    public Builder clearName() {
      
      name_ = getDefaultInstance().getName();
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The name of this NPC.
     * </pre>
     *
     * <code>string name = 2;</code>
     * @param value The bytes for name to set.
     * @return This builder for chaining.
     */
    public Builder setNameBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      
      name_ = value;
      onChanged();
      return this;
    }

    private java.lang.Object version_ = "";
    /**
     * <pre>
     * The name of the version of this NPC, if one exists. This is set for NPCs that have multiple versions, yet are
     * represented by the same wiki page. Example values for this field are "Phase 1", "Phase 2", etc. for phased NPCs,
     * like the Abyssal Sire.
     * </pre>
     *
     * <code>string version = 3;</code>
     * @return The version.
     */
    public java.lang.String getVersion() {
      java.lang.Object ref = version_;
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        version_ = s;
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }
    /**
     * <pre>
     * The name of the version of this NPC, if one exists. This is set for NPCs that have multiple versions, yet are
     * represented by the same wiki page. Example values for this field are "Phase 1", "Phase 2", etc. for phased NPCs,
     * like the Abyssal Sire.
     * </pre>
     *
     * <code>string version = 3;</code>
     * @return The bytes for version.
     */
    public com.google.protobuf.ByteString
        getVersionBytes() {
      java.lang.Object ref = version_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        version_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <pre>
     * The name of the version of this NPC, if one exists. This is set for NPCs that have multiple versions, yet are
     * represented by the same wiki page. Example values for this field are "Phase 1", "Phase 2", etc. for phased NPCs,
     * like the Abyssal Sire.
     * </pre>
     *
     * <code>string version = 3;</code>
     * @param value The version to set.
     * @return This builder for chaining.
     */
    public Builder setVersion(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      version_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The name of the version of this NPC, if one exists. This is set for NPCs that have multiple versions, yet are
     * represented by the same wiki page. Example values for this field are "Phase 1", "Phase 2", etc. for phased NPCs,
     * like the Abyssal Sire.
     * </pre>
     *
     * <code>string version = 3;</code>
     * @return This builder for chaining.
     */
    public Builder clearVersion() {
      
      version_ = getDefaultInstance().getVersion();
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The name of the version of this NPC, if one exists. This is set for NPCs that have multiple versions, yet are
     * represented by the same wiki page. Example values for this field are "Phase 1", "Phase 2", etc. for phased NPCs,
     * like the Abyssal Sire.
     * </pre>
     *
     * <code>string version = 3;</code>
     * @param value The bytes for version to set.
     * @return This builder for chaining.
     */
    public Builder setVersionBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      
      version_ = value;
      onChanged();
      return this;
    }

    private int hitpoints_ ;
    /**
     * <pre>
     * The max health of this NPC.
     * </pre>
     *
     * <code>int32 hitpoints = 4;</code>
     * @return The hitpoints.
     */
    @java.lang.Override
    public int getHitpoints() {
      return hitpoints_;
    }
    /**
     * <pre>
     * The max health of this NPC.
     * </pre>
     *
     * <code>int32 hitpoints = 4;</code>
     * @param value The hitpoints to set.
     * @return This builder for chaining.
     */
    public Builder setHitpoints(int value) {
      
      hitpoints_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The max health of this NPC.
     * </pre>
     *
     * <code>int32 hitpoints = 4;</code>
     * @return This builder for chaining.
     */
    public Builder clearHitpoints() {
      
      hitpoints_ = 0;
      onChanged();
      return this;
    }

    private int att_ ;
    /**
     * <pre>
     * The attack stat of this NPC, a measure of its melee accuracy.
     * </pre>
     *
     * <code>int32 att = 5;</code>
     * @return The att.
     */
    @java.lang.Override
    public int getAtt() {
      return att_;
    }
    /**
     * <pre>
     * The attack stat of this NPC, a measure of its melee accuracy.
     * </pre>
     *
     * <code>int32 att = 5;</code>
     * @param value The att to set.
     * @return This builder for chaining.
     */
    public Builder setAtt(int value) {
      
      att_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The attack stat of this NPC, a measure of its melee accuracy.
     * </pre>
     *
     * <code>int32 att = 5;</code>
     * @return This builder for chaining.
     */
    public Builder clearAtt() {
      
      att_ = 0;
      onChanged();
      return this;
    }

    private int str_ ;
    /**
     * <pre>
     * The strength stat of this NPC, a measure of its melee power.
     * </pre>
     *
     * <code>int32 str = 6;</code>
     * @return The str.
     */
    @java.lang.Override
    public int getStr() {
      return str_;
    }
    /**
     * <pre>
     * The strength stat of this NPC, a measure of its melee power.
     * </pre>
     *
     * <code>int32 str = 6;</code>
     * @param value The str to set.
     * @return This builder for chaining.
     */
    public Builder setStr(int value) {
      
      str_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The strength stat of this NPC, a measure of its melee power.
     * </pre>
     *
     * <code>int32 str = 6;</code>
     * @return This builder for chaining.
     */
    public Builder clearStr() {
      
      str_ = 0;
      onChanged();
      return this;
    }

    private int def_ ;
    /**
     * <pre>
     * The defence stat of this NPC, a measure of its damage protection in combat.
     * </pre>
     *
     * <code>int32 def = 7;</code>
     * @return The def.
     */
    @java.lang.Override
    public int getDef() {
      return def_;
    }
    /**
     * <pre>
     * The defence stat of this NPC, a measure of its damage protection in combat.
     * </pre>
     *
     * <code>int32 def = 7;</code>
     * @param value The def to set.
     * @return This builder for chaining.
     */
    public Builder setDef(int value) {
      
      def_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The defence stat of this NPC, a measure of its damage protection in combat.
     * </pre>
     *
     * <code>int32 def = 7;</code>
     * @return This builder for chaining.
     */
    public Builder clearDef() {
      
      def_ = 0;
      onChanged();
      return this;
    }

    private int mage_ ;
    /**
     * <pre>
     * The magic stat of this NPC.
     * </pre>
     *
     * <code>int32 mage = 8;</code>
     * @return The mage.
     */
    @java.lang.Override
    public int getMage() {
      return mage_;
    }
    /**
     * <pre>
     * The magic stat of this NPC.
     * </pre>
     *
     * <code>int32 mage = 8;</code>
     * @param value The mage to set.
     * @return This builder for chaining.
     */
    public Builder setMage(int value) {
      
      mage_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The magic stat of this NPC.
     * </pre>
     *
     * <code>int32 mage = 8;</code>
     * @return This builder for chaining.
     */
    public Builder clearMage() {
      
      mage_ = 0;
      onChanged();
      return this;
    }

    private int range_ ;
    /**
     * <pre>
     * The ranged stat of this NPC.
     * </pre>
     *
     * <code>int32 range = 9;</code>
     * @return The range.
     */
    @java.lang.Override
    public int getRange() {
      return range_;
    }
    /**
     * <pre>
     * The ranged stat of this NPC.
     * </pre>
     *
     * <code>int32 range = 9;</code>
     * @param value The range to set.
     * @return This builder for chaining.
     */
    public Builder setRange(int value) {
      
      range_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The ranged stat of this NPC.
     * </pre>
     *
     * <code>int32 range = 9;</code>
     * @return This builder for chaining.
     */
    public Builder clearRange() {
      
      range_ = 0;
      onChanged();
      return this;
    }

    private int attbns_ ;
    /**
     * <pre>
     * The bonus attack stat of this NPC.
     * </pre>
     *
     * <code>int32 attbns = 10;</code>
     * @return The attbns.
     */
    @java.lang.Override
    public int getAttbns() {
      return attbns_;
    }
    /**
     * <pre>
     * The bonus attack stat of this NPC.
     * </pre>
     *
     * <code>int32 attbns = 10;</code>
     * @param value The attbns to set.
     * @return This builder for chaining.
     */
    public Builder setAttbns(int value) {
      
      attbns_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The bonus attack stat of this NPC.
     * </pre>
     *
     * <code>int32 attbns = 10;</code>
     * @return This builder for chaining.
     */
    public Builder clearAttbns() {
      
      attbns_ = 0;
      onChanged();
      return this;
    }

    private int strbns_ ;
    /**
     * <pre>
     * The bonus strength stat of this NPC.
     * </pre>
     *
     * <code>int32 strbns = 11;</code>
     * @return The strbns.
     */
    @java.lang.Override
    public int getStrbns() {
      return strbns_;
    }
    /**
     * <pre>
     * The bonus strength stat of this NPC.
     * </pre>
     *
     * <code>int32 strbns = 11;</code>
     * @param value The strbns to set.
     * @return This builder for chaining.
     */
    public Builder setStrbns(int value) {
      
      strbns_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The bonus strength stat of this NPC.
     * </pre>
     *
     * <code>int32 strbns = 11;</code>
     * @return This builder for chaining.
     */
    public Builder clearStrbns() {
      
      strbns_ = 0;
      onChanged();
      return this;
    }

    private int amagic_ ;
    /**
     * <pre>
     * The bonus magic stat of this NPC.
     * </pre>
     *
     * <code>int32 amagic = 12;</code>
     * @return The amagic.
     */
    @java.lang.Override
    public int getAmagic() {
      return amagic_;
    }
    /**
     * <pre>
     * The bonus magic stat of this NPC.
     * </pre>
     *
     * <code>int32 amagic = 12;</code>
     * @param value The amagic to set.
     * @return This builder for chaining.
     */
    public Builder setAmagic(int value) {
      
      amagic_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The bonus magic stat of this NPC.
     * </pre>
     *
     * <code>int32 amagic = 12;</code>
     * @return This builder for chaining.
     */
    public Builder clearAmagic() {
      
      amagic_ = 0;
      onChanged();
      return this;
    }

    private int mbns_ ;
    /**
     * <pre>
     * The bonus magic damage stat of this NPC.
     * </pre>
     *
     * <code>int32 mbns = 13;</code>
     * @return The mbns.
     */
    @java.lang.Override
    public int getMbns() {
      return mbns_;
    }
    /**
     * <pre>
     * The bonus magic damage stat of this NPC.
     * </pre>
     *
     * <code>int32 mbns = 13;</code>
     * @param value The mbns to set.
     * @return This builder for chaining.
     */
    public Builder setMbns(int value) {
      
      mbns_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The bonus magic damage stat of this NPC.
     * </pre>
     *
     * <code>int32 mbns = 13;</code>
     * @return This builder for chaining.
     */
    public Builder clearMbns() {
      
      mbns_ = 0;
      onChanged();
      return this;
    }

    private int arange_ ;
    /**
     * <pre>
     * The bonus ranged stat of this NPC.
     * </pre>
     *
     * <code>int32 arange = 14;</code>
     * @return The arange.
     */
    @java.lang.Override
    public int getArange() {
      return arange_;
    }
    /**
     * <pre>
     * The bonus ranged stat of this NPC.
     * </pre>
     *
     * <code>int32 arange = 14;</code>
     * @param value The arange to set.
     * @return This builder for chaining.
     */
    public Builder setArange(int value) {
      
      arange_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The bonus ranged stat of this NPC.
     * </pre>
     *
     * <code>int32 arange = 14;</code>
     * @return This builder for chaining.
     */
    public Builder clearArange() {
      
      arange_ = 0;
      onChanged();
      return this;
    }

    private int rngbns_ ;
    /**
     * <pre>
     * The bonus ranged damage stat of this NPC.
     * </pre>
     *
     * <code>int32 rngbns = 15;</code>
     * @return The rngbns.
     */
    @java.lang.Override
    public int getRngbns() {
      return rngbns_;
    }
    /**
     * <pre>
     * The bonus ranged damage stat of this NPC.
     * </pre>
     *
     * <code>int32 rngbns = 15;</code>
     * @param value The rngbns to set.
     * @return This builder for chaining.
     */
    public Builder setRngbns(int value) {
      
      rngbns_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The bonus ranged damage stat of this NPC.
     * </pre>
     *
     * <code>int32 rngbns = 15;</code>
     * @return This builder for chaining.
     */
    public Builder clearRngbns() {
      
      rngbns_ = 0;
      onChanged();
      return this;
    }

    private int dstab_ ;
    /**
     * <pre>
     * This NPC's resistance to stab attacks.
     * </pre>
     *
     * <code>int32 dstab = 16;</code>
     * @return The dstab.
     */
    @java.lang.Override
    public int getDstab() {
      return dstab_;
    }
    /**
     * <pre>
     * This NPC's resistance to stab attacks.
     * </pre>
     *
     * <code>int32 dstab = 16;</code>
     * @param value The dstab to set.
     * @return This builder for chaining.
     */
    public Builder setDstab(int value) {
      
      dstab_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * This NPC's resistance to stab attacks.
     * </pre>
     *
     * <code>int32 dstab = 16;</code>
     * @return This builder for chaining.
     */
    public Builder clearDstab() {
      
      dstab_ = 0;
      onChanged();
      return this;
    }

    private int dslash_ ;
    /**
     * <pre>
     * This NPC's resistance to slash attacks.
     * </pre>
     *
     * <code>int32 dslash = 17;</code>
     * @return The dslash.
     */
    @java.lang.Override
    public int getDslash() {
      return dslash_;
    }
    /**
     * <pre>
     * This NPC's resistance to slash attacks.
     * </pre>
     *
     * <code>int32 dslash = 17;</code>
     * @param value The dslash to set.
     * @return This builder for chaining.
     */
    public Builder setDslash(int value) {
      
      dslash_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * This NPC's resistance to slash attacks.
     * </pre>
     *
     * <code>int32 dslash = 17;</code>
     * @return This builder for chaining.
     */
    public Builder clearDslash() {
      
      dslash_ = 0;
      onChanged();
      return this;
    }

    private int dcrush_ ;
    /**
     * <pre>
     * This NPC's resistance to crush attacks.
     * </pre>
     *
     * <code>int32 dcrush = 18;</code>
     * @return The dcrush.
     */
    @java.lang.Override
    public int getDcrush() {
      return dcrush_;
    }
    /**
     * <pre>
     * This NPC's resistance to crush attacks.
     * </pre>
     *
     * <code>int32 dcrush = 18;</code>
     * @param value The dcrush to set.
     * @return This builder for chaining.
     */
    public Builder setDcrush(int value) {
      
      dcrush_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * This NPC's resistance to crush attacks.
     * </pre>
     *
     * <code>int32 dcrush = 18;</code>
     * @return This builder for chaining.
     */
    public Builder clearDcrush() {
      
      dcrush_ = 0;
      onChanged();
      return this;
    }

    private int dmagic_ ;
    /**
     * <pre>
     * This NPC's resistance to magic attacks.
     * </pre>
     *
     * <code>int32 dmagic = 19;</code>
     * @return The dmagic.
     */
    @java.lang.Override
    public int getDmagic() {
      return dmagic_;
    }
    /**
     * <pre>
     * This NPC's resistance to magic attacks.
     * </pre>
     *
     * <code>int32 dmagic = 19;</code>
     * @param value The dmagic to set.
     * @return This builder for chaining.
     */
    public Builder setDmagic(int value) {
      
      dmagic_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * This NPC's resistance to magic attacks.
     * </pre>
     *
     * <code>int32 dmagic = 19;</code>
     * @return This builder for chaining.
     */
    public Builder clearDmagic() {
      
      dmagic_ = 0;
      onChanged();
      return this;
    }

    private int drange_ ;
    /**
     * <pre>
     * This NPC's resistance to ranged attacks.
     * </pre>
     *
     * <code>int32 drange = 20;</code>
     * @return The drange.
     */
    @java.lang.Override
    public int getDrange() {
      return drange_;
    }
    /**
     * <pre>
     * This NPC's resistance to ranged attacks.
     * </pre>
     *
     * <code>int32 drange = 20;</code>
     * @param value The drange to set.
     * @return This builder for chaining.
     */
    public Builder setDrange(int value) {
      
      drange_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * This NPC's resistance to ranged attacks.
     * </pre>
     *
     * <code>int32 drange = 20;</code>
     * @return This builder for chaining.
     */
    public Builder clearDrange() {
      
      drange_ = 0;
      onChanged();
      return this;
    }
    @java.lang.Override
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @java.lang.Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:github.nkibler7.osrswikiscraper.NpcInfo)
  }

  // @@protoc_insertion_point(class_scope:github.nkibler7.osrswikiscraper.NpcInfo)
  private static final com.github.nkibler7.osrswikiscraper.NpcInfo DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new com.github.nkibler7.osrswikiscraper.NpcInfo();
  }

  public static com.github.nkibler7.osrswikiscraper.NpcInfo getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<NpcInfo>
      PARSER = new com.google.protobuf.AbstractParser<NpcInfo>() {
    @java.lang.Override
    public NpcInfo parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return new NpcInfo(input, extensionRegistry);
    }
  };

  public static com.google.protobuf.Parser<NpcInfo> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<NpcInfo> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public com.github.nkibler7.osrswikiscraper.NpcInfo getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

