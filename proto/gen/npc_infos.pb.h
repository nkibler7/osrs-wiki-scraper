// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: npc_infos.proto
// Protobuf C++ Version: 4.25.1

#ifndef GOOGLE_PROTOBUF_INCLUDED_npc_5finfos_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_npc_5finfos_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4025000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4025001 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_npc_5finfos_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_npc_5finfos_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_npc_5finfos_2eproto;
namespace github {
namespace nkibler7 {
namespace osrswikiscraper {
class NpcInfo;
struct NpcInfoDefaultTypeInternal;
extern NpcInfoDefaultTypeInternal _NpcInfo_default_instance_;
class NpcInfos;
struct NpcInfosDefaultTypeInternal;
extern NpcInfosDefaultTypeInternal _NpcInfos_default_instance_;
}  // namespace osrswikiscraper
}  // namespace nkibler7
}  // namespace github
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace github {
namespace nkibler7 {
namespace osrswikiscraper {

// ===================================================================


// -------------------------------------------------------------------

class NpcInfo final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:github.nkibler7.osrswikiscraper.NpcInfo) */ {
 public:
  inline NpcInfo() : NpcInfo(nullptr) {}
  ~NpcInfo() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR NpcInfo(::google::protobuf::internal::ConstantInitialized);

  inline NpcInfo(const NpcInfo& from)
      : NpcInfo(nullptr, from) {}
  NpcInfo(NpcInfo&& from) noexcept
    : NpcInfo() {
    *this = ::std::move(from);
  }

  inline NpcInfo& operator=(const NpcInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline NpcInfo& operator=(NpcInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NpcInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const NpcInfo* internal_default_instance() {
    return reinterpret_cast<const NpcInfo*>(
               &_NpcInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(NpcInfo& a, NpcInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(NpcInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NpcInfo* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NpcInfo* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<NpcInfo>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const NpcInfo& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const NpcInfo& from) {
    NpcInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(NpcInfo* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "github.nkibler7.osrswikiscraper.NpcInfo";
  }
  protected:
  explicit NpcInfo(::google::protobuf::Arena* arena);
  NpcInfo(::google::protobuf::Arena* arena, const NpcInfo& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdsFieldNumber = 1,
    kNameFieldNumber = 2,
    kVersionFieldNumber = 3,
    kAttributesFieldNumber = 21,
    kHitpointsFieldNumber = 4,
    kAttFieldNumber = 5,
    kStrFieldNumber = 6,
    kDefFieldNumber = 7,
    kMageFieldNumber = 8,
    kRangeFieldNumber = 9,
    kAttbnsFieldNumber = 10,
    kStrbnsFieldNumber = 11,
    kAmagicFieldNumber = 12,
    kMbnsFieldNumber = 13,
    kArangeFieldNumber = 14,
    kRngbnsFieldNumber = 15,
    kDstabFieldNumber = 16,
    kDslashFieldNumber = 17,
    kDcrushFieldNumber = 18,
    kDmagicFieldNumber = 19,
    kDrangeFieldNumber = 20,
  };
  // repeated int32 ids = 1;
  int ids_size() const;
  private:
  int _internal_ids_size() const;

  public:
  void clear_ids() ;
  ::int32_t ids(int index) const;
  void set_ids(int index, ::int32_t value);
  void add_ids(::int32_t value);
  const ::google::protobuf::RepeatedField<::int32_t>& ids() const;
  ::google::protobuf::RepeatedField<::int32_t>* mutable_ids();

  private:
  const ::google::protobuf::RepeatedField<::int32_t>& _internal_ids() const;
  ::google::protobuf::RepeatedField<::int32_t>* _internal_mutable_ids();

  public:
  // string name = 2;
  void clear_name() ;
  const std::string& name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* value);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // string version = 3;
  void clear_version() ;
  const std::string& version() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_version(Arg_&& arg, Args_... args);
  std::string* mutable_version();
  PROTOBUF_NODISCARD std::string* release_version();
  void set_allocated_version(std::string* value);

  private:
  const std::string& _internal_version() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_version(
      const std::string& value);
  std::string* _internal_mutable_version();

  public:
  // string attributes = 21;
  void clear_attributes() ;
  const std::string& attributes() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_attributes(Arg_&& arg, Args_... args);
  std::string* mutable_attributes();
  PROTOBUF_NODISCARD std::string* release_attributes();
  void set_allocated_attributes(std::string* value);

  private:
  const std::string& _internal_attributes() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_attributes(
      const std::string& value);
  std::string* _internal_mutable_attributes();

  public:
  // int32 hitpoints = 4;
  void clear_hitpoints() ;
  ::int32_t hitpoints() const;
  void set_hitpoints(::int32_t value);

  private:
  ::int32_t _internal_hitpoints() const;
  void _internal_set_hitpoints(::int32_t value);

  public:
  // int32 att = 5;
  void clear_att() ;
  ::int32_t att() const;
  void set_att(::int32_t value);

  private:
  ::int32_t _internal_att() const;
  void _internal_set_att(::int32_t value);

  public:
  // int32 str = 6;
  void clear_str() ;
  ::int32_t str() const;
  void set_str(::int32_t value);

  private:
  ::int32_t _internal_str() const;
  void _internal_set_str(::int32_t value);

  public:
  // int32 def = 7;
  void clear_def() ;
  ::int32_t def() const;
  void set_def(::int32_t value);

  private:
  ::int32_t _internal_def() const;
  void _internal_set_def(::int32_t value);

  public:
  // int32 mage = 8;
  void clear_mage() ;
  ::int32_t mage() const;
  void set_mage(::int32_t value);

  private:
  ::int32_t _internal_mage() const;
  void _internal_set_mage(::int32_t value);

  public:
  // int32 range = 9;
  void clear_range() ;
  ::int32_t range() const;
  void set_range(::int32_t value);

  private:
  ::int32_t _internal_range() const;
  void _internal_set_range(::int32_t value);

  public:
  // int32 attbns = 10;
  void clear_attbns() ;
  ::int32_t attbns() const;
  void set_attbns(::int32_t value);

  private:
  ::int32_t _internal_attbns() const;
  void _internal_set_attbns(::int32_t value);

  public:
  // int32 strbns = 11;
  void clear_strbns() ;
  ::int32_t strbns() const;
  void set_strbns(::int32_t value);

  private:
  ::int32_t _internal_strbns() const;
  void _internal_set_strbns(::int32_t value);

  public:
  // int32 amagic = 12;
  void clear_amagic() ;
  ::int32_t amagic() const;
  void set_amagic(::int32_t value);

  private:
  ::int32_t _internal_amagic() const;
  void _internal_set_amagic(::int32_t value);

  public:
  // int32 mbns = 13;
  void clear_mbns() ;
  ::int32_t mbns() const;
  void set_mbns(::int32_t value);

  private:
  ::int32_t _internal_mbns() const;
  void _internal_set_mbns(::int32_t value);

  public:
  // int32 arange = 14;
  void clear_arange() ;
  ::int32_t arange() const;
  void set_arange(::int32_t value);

  private:
  ::int32_t _internal_arange() const;
  void _internal_set_arange(::int32_t value);

  public:
  // int32 rngbns = 15;
  void clear_rngbns() ;
  ::int32_t rngbns() const;
  void set_rngbns(::int32_t value);

  private:
  ::int32_t _internal_rngbns() const;
  void _internal_set_rngbns(::int32_t value);

  public:
  // int32 dstab = 16;
  void clear_dstab() ;
  ::int32_t dstab() const;
  void set_dstab(::int32_t value);

  private:
  ::int32_t _internal_dstab() const;
  void _internal_set_dstab(::int32_t value);

  public:
  // int32 dslash = 17;
  void clear_dslash() ;
  ::int32_t dslash() const;
  void set_dslash(::int32_t value);

  private:
  ::int32_t _internal_dslash() const;
  void _internal_set_dslash(::int32_t value);

  public:
  // int32 dcrush = 18;
  void clear_dcrush() ;
  ::int32_t dcrush() const;
  void set_dcrush(::int32_t value);

  private:
  ::int32_t _internal_dcrush() const;
  void _internal_set_dcrush(::int32_t value);

  public:
  // int32 dmagic = 19;
  void clear_dmagic() ;
  ::int32_t dmagic() const;
  void set_dmagic(::int32_t value);

  private:
  ::int32_t _internal_dmagic() const;
  void _internal_set_dmagic(::int32_t value);

  public:
  // int32 drange = 20;
  void clear_drange() ;
  ::int32_t drange() const;
  void set_drange(::int32_t value);

  private:
  ::int32_t _internal_drange() const;
  void _internal_set_drange(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:github.nkibler7.osrswikiscraper.NpcInfo)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      5, 21, 0,
      85, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::RepeatedField<::int32_t> ids_;
    mutable ::google::protobuf::internal::CachedSize _ids_cached_byte_size_;
    ::google::protobuf::internal::ArenaStringPtr name_;
    ::google::protobuf::internal::ArenaStringPtr version_;
    ::google::protobuf::internal::ArenaStringPtr attributes_;
    ::int32_t hitpoints_;
    ::int32_t att_;
    ::int32_t str_;
    ::int32_t def_;
    ::int32_t mage_;
    ::int32_t range_;
    ::int32_t attbns_;
    ::int32_t strbns_;
    ::int32_t amagic_;
    ::int32_t mbns_;
    ::int32_t arange_;
    ::int32_t rngbns_;
    ::int32_t dstab_;
    ::int32_t dslash_;
    ::int32_t dcrush_;
    ::int32_t dmagic_;
    ::int32_t drange_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_npc_5finfos_2eproto;
};// -------------------------------------------------------------------

class NpcInfos final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:github.nkibler7.osrswikiscraper.NpcInfos) */ {
 public:
  inline NpcInfos() : NpcInfos(nullptr) {}
  ~NpcInfos() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR NpcInfos(::google::protobuf::internal::ConstantInitialized);

  inline NpcInfos(const NpcInfos& from)
      : NpcInfos(nullptr, from) {}
  NpcInfos(NpcInfos&& from) noexcept
    : NpcInfos() {
    *this = ::std::move(from);
  }

  inline NpcInfos& operator=(const NpcInfos& from) {
    CopyFrom(from);
    return *this;
  }
  inline NpcInfos& operator=(NpcInfos&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NpcInfos& default_instance() {
    return *internal_default_instance();
  }
  static inline const NpcInfos* internal_default_instance() {
    return reinterpret_cast<const NpcInfos*>(
               &_NpcInfos_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(NpcInfos& a, NpcInfos& b) {
    a.Swap(&b);
  }
  inline void Swap(NpcInfos* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NpcInfos* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NpcInfos* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<NpcInfos>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const NpcInfos& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const NpcInfos& from) {
    NpcInfos::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(NpcInfos* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "github.nkibler7.osrswikiscraper.NpcInfos";
  }
  protected:
  explicit NpcInfos(::google::protobuf::Arena* arena);
  NpcInfos(::google::protobuf::Arena* arena, const NpcInfos& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNpcsFieldNumber = 1,
  };
  // repeated .github.nkibler7.osrswikiscraper.NpcInfo npcs = 1;
  int npcs_size() const;
  private:
  int _internal_npcs_size() const;

  public:
  void clear_npcs() ;
  ::github::nkibler7::osrswikiscraper::NpcInfo* mutable_npcs(int index);
  ::google::protobuf::RepeatedPtrField< ::github::nkibler7::osrswikiscraper::NpcInfo >*
      mutable_npcs();
  private:
  const ::google::protobuf::RepeatedPtrField<::github::nkibler7::osrswikiscraper::NpcInfo>& _internal_npcs() const;
  ::google::protobuf::RepeatedPtrField<::github::nkibler7::osrswikiscraper::NpcInfo>* _internal_mutable_npcs();
  public:
  const ::github::nkibler7::osrswikiscraper::NpcInfo& npcs(int index) const;
  ::github::nkibler7::osrswikiscraper::NpcInfo* add_npcs();
  const ::google::protobuf::RepeatedPtrField< ::github::nkibler7::osrswikiscraper::NpcInfo >&
      npcs() const;
  // @@protoc_insertion_point(class_scope:github.nkibler7.osrswikiscraper.NpcInfos)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::RepeatedPtrField< ::github::nkibler7::osrswikiscraper::NpcInfo > npcs_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_npc_5finfos_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// NpcInfos

// repeated .github.nkibler7.osrswikiscraper.NpcInfo npcs = 1;
inline int NpcInfos::_internal_npcs_size() const {
  return _internal_npcs().size();
}
inline int NpcInfos::npcs_size() const {
  return _internal_npcs_size();
}
inline void NpcInfos::clear_npcs() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.npcs_.Clear();
}
inline ::github::nkibler7::osrswikiscraper::NpcInfo* NpcInfos::mutable_npcs(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:github.nkibler7.osrswikiscraper.NpcInfos.npcs)
  return _internal_mutable_npcs()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::github::nkibler7::osrswikiscraper::NpcInfo>* NpcInfos::mutable_npcs()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:github.nkibler7.osrswikiscraper.NpcInfos.npcs)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_npcs();
}
inline const ::github::nkibler7::osrswikiscraper::NpcInfo& NpcInfos::npcs(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:github.nkibler7.osrswikiscraper.NpcInfos.npcs)
  return _internal_npcs().Get(index);
}
inline ::github::nkibler7::osrswikiscraper::NpcInfo* NpcInfos::add_npcs() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::github::nkibler7::osrswikiscraper::NpcInfo* _add = _internal_mutable_npcs()->Add();
  // @@protoc_insertion_point(field_add:github.nkibler7.osrswikiscraper.NpcInfos.npcs)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::github::nkibler7::osrswikiscraper::NpcInfo>& NpcInfos::npcs() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:github.nkibler7.osrswikiscraper.NpcInfos.npcs)
  return _internal_npcs();
}
inline const ::google::protobuf::RepeatedPtrField<::github::nkibler7::osrswikiscraper::NpcInfo>&
NpcInfos::_internal_npcs() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.npcs_;
}
inline ::google::protobuf::RepeatedPtrField<::github::nkibler7::osrswikiscraper::NpcInfo>*
NpcInfos::_internal_mutable_npcs() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.npcs_;
}

// -------------------------------------------------------------------

// NpcInfo

// repeated int32 ids = 1;
inline int NpcInfo::_internal_ids_size() const {
  return _internal_ids().size();
}
inline int NpcInfo::ids_size() const {
  return _internal_ids_size();
}
inline void NpcInfo::clear_ids() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.ids_.Clear();
}
inline ::int32_t NpcInfo::ids(int index) const {
  // @@protoc_insertion_point(field_get:github.nkibler7.osrswikiscraper.NpcInfo.ids)
  return _internal_ids().Get(index);
}
inline void NpcInfo::set_ids(int index, ::int32_t value) {
  _internal_mutable_ids()->Set(index, value);
  // @@protoc_insertion_point(field_set:github.nkibler7.osrswikiscraper.NpcInfo.ids)
}
inline void NpcInfo::add_ids(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_ids()->Add(value);
  // @@protoc_insertion_point(field_add:github.nkibler7.osrswikiscraper.NpcInfo.ids)
}
inline const ::google::protobuf::RepeatedField<::int32_t>& NpcInfo::ids() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:github.nkibler7.osrswikiscraper.NpcInfo.ids)
  return _internal_ids();
}
inline ::google::protobuf::RepeatedField<::int32_t>* NpcInfo::mutable_ids()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:github.nkibler7.osrswikiscraper.NpcInfo.ids)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_ids();
}
inline const ::google::protobuf::RepeatedField<::int32_t>& NpcInfo::_internal_ids()
    const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.ids_;
}
inline ::google::protobuf::RepeatedField<::int32_t>* NpcInfo::_internal_mutable_ids() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.ids_;
}

// string name = 2;
inline void NpcInfo::clear_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.name_.ClearToEmpty();
}
inline const std::string& NpcInfo::name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:github.nkibler7.osrswikiscraper.NpcInfo.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void NpcInfo::set_name(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:github.nkibler7.osrswikiscraper.NpcInfo.name)
}
inline std::string* NpcInfo::mutable_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:github.nkibler7.osrswikiscraper.NpcInfo.name)
  return _s;
}
inline const std::string& NpcInfo::_internal_name() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.name_.Get();
}
inline void NpcInfo::_internal_set_name(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.name_.Set(value, GetArena());
}
inline std::string* NpcInfo::_internal_mutable_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.name_.Mutable( GetArena());
}
inline std::string* NpcInfo::release_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:github.nkibler7.osrswikiscraper.NpcInfo.name)
  return _impl_.name_.Release();
}
inline void NpcInfo::set_allocated_name(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.name_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.name_.IsDefault()) {
          _impl_.name_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:github.nkibler7.osrswikiscraper.NpcInfo.name)
}

// string version = 3;
inline void NpcInfo::clear_version() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.version_.ClearToEmpty();
}
inline const std::string& NpcInfo::version() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:github.nkibler7.osrswikiscraper.NpcInfo.version)
  return _internal_version();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void NpcInfo::set_version(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.version_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:github.nkibler7.osrswikiscraper.NpcInfo.version)
}
inline std::string* NpcInfo::mutable_version() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_version();
  // @@protoc_insertion_point(field_mutable:github.nkibler7.osrswikiscraper.NpcInfo.version)
  return _s;
}
inline const std::string& NpcInfo::_internal_version() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.version_.Get();
}
inline void NpcInfo::_internal_set_version(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.version_.Set(value, GetArena());
}
inline std::string* NpcInfo::_internal_mutable_version() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.version_.Mutable( GetArena());
}
inline std::string* NpcInfo::release_version() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:github.nkibler7.osrswikiscraper.NpcInfo.version)
  return _impl_.version_.Release();
}
inline void NpcInfo::set_allocated_version(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.version_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.version_.IsDefault()) {
          _impl_.version_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:github.nkibler7.osrswikiscraper.NpcInfo.version)
}

// string attributes = 21;
inline void NpcInfo::clear_attributes() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.attributes_.ClearToEmpty();
}
inline const std::string& NpcInfo::attributes() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:github.nkibler7.osrswikiscraper.NpcInfo.attributes)
  return _internal_attributes();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void NpcInfo::set_attributes(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.attributes_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:github.nkibler7.osrswikiscraper.NpcInfo.attributes)
}
inline std::string* NpcInfo::mutable_attributes() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_attributes();
  // @@protoc_insertion_point(field_mutable:github.nkibler7.osrswikiscraper.NpcInfo.attributes)
  return _s;
}
inline const std::string& NpcInfo::_internal_attributes() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.attributes_.Get();
}
inline void NpcInfo::_internal_set_attributes(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.attributes_.Set(value, GetArena());
}
inline std::string* NpcInfo::_internal_mutable_attributes() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.attributes_.Mutable( GetArena());
}
inline std::string* NpcInfo::release_attributes() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:github.nkibler7.osrswikiscraper.NpcInfo.attributes)
  return _impl_.attributes_.Release();
}
inline void NpcInfo::set_allocated_attributes(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.attributes_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.attributes_.IsDefault()) {
          _impl_.attributes_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:github.nkibler7.osrswikiscraper.NpcInfo.attributes)
}

// int32 hitpoints = 4;
inline void NpcInfo::clear_hitpoints() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.hitpoints_ = 0;
}
inline ::int32_t NpcInfo::hitpoints() const {
  // @@protoc_insertion_point(field_get:github.nkibler7.osrswikiscraper.NpcInfo.hitpoints)
  return _internal_hitpoints();
}
inline void NpcInfo::set_hitpoints(::int32_t value) {
  _internal_set_hitpoints(value);
  // @@protoc_insertion_point(field_set:github.nkibler7.osrswikiscraper.NpcInfo.hitpoints)
}
inline ::int32_t NpcInfo::_internal_hitpoints() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.hitpoints_;
}
inline void NpcInfo::_internal_set_hitpoints(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.hitpoints_ = value;
}

// int32 att = 5;
inline void NpcInfo::clear_att() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.att_ = 0;
}
inline ::int32_t NpcInfo::att() const {
  // @@protoc_insertion_point(field_get:github.nkibler7.osrswikiscraper.NpcInfo.att)
  return _internal_att();
}
inline void NpcInfo::set_att(::int32_t value) {
  _internal_set_att(value);
  // @@protoc_insertion_point(field_set:github.nkibler7.osrswikiscraper.NpcInfo.att)
}
inline ::int32_t NpcInfo::_internal_att() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.att_;
}
inline void NpcInfo::_internal_set_att(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.att_ = value;
}

// int32 str = 6;
inline void NpcInfo::clear_str() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.str_ = 0;
}
inline ::int32_t NpcInfo::str() const {
  // @@protoc_insertion_point(field_get:github.nkibler7.osrswikiscraper.NpcInfo.str)
  return _internal_str();
}
inline void NpcInfo::set_str(::int32_t value) {
  _internal_set_str(value);
  // @@protoc_insertion_point(field_set:github.nkibler7.osrswikiscraper.NpcInfo.str)
}
inline ::int32_t NpcInfo::_internal_str() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.str_;
}
inline void NpcInfo::_internal_set_str(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.str_ = value;
}

// int32 def = 7;
inline void NpcInfo::clear_def() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.def_ = 0;
}
inline ::int32_t NpcInfo::def() const {
  // @@protoc_insertion_point(field_get:github.nkibler7.osrswikiscraper.NpcInfo.def)
  return _internal_def();
}
inline void NpcInfo::set_def(::int32_t value) {
  _internal_set_def(value);
  // @@protoc_insertion_point(field_set:github.nkibler7.osrswikiscraper.NpcInfo.def)
}
inline ::int32_t NpcInfo::_internal_def() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.def_;
}
inline void NpcInfo::_internal_set_def(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.def_ = value;
}

// int32 mage = 8;
inline void NpcInfo::clear_mage() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.mage_ = 0;
}
inline ::int32_t NpcInfo::mage() const {
  // @@protoc_insertion_point(field_get:github.nkibler7.osrswikiscraper.NpcInfo.mage)
  return _internal_mage();
}
inline void NpcInfo::set_mage(::int32_t value) {
  _internal_set_mage(value);
  // @@protoc_insertion_point(field_set:github.nkibler7.osrswikiscraper.NpcInfo.mage)
}
inline ::int32_t NpcInfo::_internal_mage() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.mage_;
}
inline void NpcInfo::_internal_set_mage(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.mage_ = value;
}

// int32 range = 9;
inline void NpcInfo::clear_range() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.range_ = 0;
}
inline ::int32_t NpcInfo::range() const {
  // @@protoc_insertion_point(field_get:github.nkibler7.osrswikiscraper.NpcInfo.range)
  return _internal_range();
}
inline void NpcInfo::set_range(::int32_t value) {
  _internal_set_range(value);
  // @@protoc_insertion_point(field_set:github.nkibler7.osrswikiscraper.NpcInfo.range)
}
inline ::int32_t NpcInfo::_internal_range() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.range_;
}
inline void NpcInfo::_internal_set_range(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.range_ = value;
}

// int32 attbns = 10;
inline void NpcInfo::clear_attbns() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.attbns_ = 0;
}
inline ::int32_t NpcInfo::attbns() const {
  // @@protoc_insertion_point(field_get:github.nkibler7.osrswikiscraper.NpcInfo.attbns)
  return _internal_attbns();
}
inline void NpcInfo::set_attbns(::int32_t value) {
  _internal_set_attbns(value);
  // @@protoc_insertion_point(field_set:github.nkibler7.osrswikiscraper.NpcInfo.attbns)
}
inline ::int32_t NpcInfo::_internal_attbns() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.attbns_;
}
inline void NpcInfo::_internal_set_attbns(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.attbns_ = value;
}

// int32 strbns = 11;
inline void NpcInfo::clear_strbns() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.strbns_ = 0;
}
inline ::int32_t NpcInfo::strbns() const {
  // @@protoc_insertion_point(field_get:github.nkibler7.osrswikiscraper.NpcInfo.strbns)
  return _internal_strbns();
}
inline void NpcInfo::set_strbns(::int32_t value) {
  _internal_set_strbns(value);
  // @@protoc_insertion_point(field_set:github.nkibler7.osrswikiscraper.NpcInfo.strbns)
}
inline ::int32_t NpcInfo::_internal_strbns() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.strbns_;
}
inline void NpcInfo::_internal_set_strbns(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.strbns_ = value;
}

// int32 amagic = 12;
inline void NpcInfo::clear_amagic() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.amagic_ = 0;
}
inline ::int32_t NpcInfo::amagic() const {
  // @@protoc_insertion_point(field_get:github.nkibler7.osrswikiscraper.NpcInfo.amagic)
  return _internal_amagic();
}
inline void NpcInfo::set_amagic(::int32_t value) {
  _internal_set_amagic(value);
  // @@protoc_insertion_point(field_set:github.nkibler7.osrswikiscraper.NpcInfo.amagic)
}
inline ::int32_t NpcInfo::_internal_amagic() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.amagic_;
}
inline void NpcInfo::_internal_set_amagic(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.amagic_ = value;
}

// int32 mbns = 13;
inline void NpcInfo::clear_mbns() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.mbns_ = 0;
}
inline ::int32_t NpcInfo::mbns() const {
  // @@protoc_insertion_point(field_get:github.nkibler7.osrswikiscraper.NpcInfo.mbns)
  return _internal_mbns();
}
inline void NpcInfo::set_mbns(::int32_t value) {
  _internal_set_mbns(value);
  // @@protoc_insertion_point(field_set:github.nkibler7.osrswikiscraper.NpcInfo.mbns)
}
inline ::int32_t NpcInfo::_internal_mbns() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.mbns_;
}
inline void NpcInfo::_internal_set_mbns(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.mbns_ = value;
}

// int32 arange = 14;
inline void NpcInfo::clear_arange() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.arange_ = 0;
}
inline ::int32_t NpcInfo::arange() const {
  // @@protoc_insertion_point(field_get:github.nkibler7.osrswikiscraper.NpcInfo.arange)
  return _internal_arange();
}
inline void NpcInfo::set_arange(::int32_t value) {
  _internal_set_arange(value);
  // @@protoc_insertion_point(field_set:github.nkibler7.osrswikiscraper.NpcInfo.arange)
}
inline ::int32_t NpcInfo::_internal_arange() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.arange_;
}
inline void NpcInfo::_internal_set_arange(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.arange_ = value;
}

// int32 rngbns = 15;
inline void NpcInfo::clear_rngbns() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.rngbns_ = 0;
}
inline ::int32_t NpcInfo::rngbns() const {
  // @@protoc_insertion_point(field_get:github.nkibler7.osrswikiscraper.NpcInfo.rngbns)
  return _internal_rngbns();
}
inline void NpcInfo::set_rngbns(::int32_t value) {
  _internal_set_rngbns(value);
  // @@protoc_insertion_point(field_set:github.nkibler7.osrswikiscraper.NpcInfo.rngbns)
}
inline ::int32_t NpcInfo::_internal_rngbns() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.rngbns_;
}
inline void NpcInfo::_internal_set_rngbns(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.rngbns_ = value;
}

// int32 dstab = 16;
inline void NpcInfo::clear_dstab() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.dstab_ = 0;
}
inline ::int32_t NpcInfo::dstab() const {
  // @@protoc_insertion_point(field_get:github.nkibler7.osrswikiscraper.NpcInfo.dstab)
  return _internal_dstab();
}
inline void NpcInfo::set_dstab(::int32_t value) {
  _internal_set_dstab(value);
  // @@protoc_insertion_point(field_set:github.nkibler7.osrswikiscraper.NpcInfo.dstab)
}
inline ::int32_t NpcInfo::_internal_dstab() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.dstab_;
}
inline void NpcInfo::_internal_set_dstab(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.dstab_ = value;
}

// int32 dslash = 17;
inline void NpcInfo::clear_dslash() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.dslash_ = 0;
}
inline ::int32_t NpcInfo::dslash() const {
  // @@protoc_insertion_point(field_get:github.nkibler7.osrswikiscraper.NpcInfo.dslash)
  return _internal_dslash();
}
inline void NpcInfo::set_dslash(::int32_t value) {
  _internal_set_dslash(value);
  // @@protoc_insertion_point(field_set:github.nkibler7.osrswikiscraper.NpcInfo.dslash)
}
inline ::int32_t NpcInfo::_internal_dslash() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.dslash_;
}
inline void NpcInfo::_internal_set_dslash(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.dslash_ = value;
}

// int32 dcrush = 18;
inline void NpcInfo::clear_dcrush() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.dcrush_ = 0;
}
inline ::int32_t NpcInfo::dcrush() const {
  // @@protoc_insertion_point(field_get:github.nkibler7.osrswikiscraper.NpcInfo.dcrush)
  return _internal_dcrush();
}
inline void NpcInfo::set_dcrush(::int32_t value) {
  _internal_set_dcrush(value);
  // @@protoc_insertion_point(field_set:github.nkibler7.osrswikiscraper.NpcInfo.dcrush)
}
inline ::int32_t NpcInfo::_internal_dcrush() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.dcrush_;
}
inline void NpcInfo::_internal_set_dcrush(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.dcrush_ = value;
}

// int32 dmagic = 19;
inline void NpcInfo::clear_dmagic() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.dmagic_ = 0;
}
inline ::int32_t NpcInfo::dmagic() const {
  // @@protoc_insertion_point(field_get:github.nkibler7.osrswikiscraper.NpcInfo.dmagic)
  return _internal_dmagic();
}
inline void NpcInfo::set_dmagic(::int32_t value) {
  _internal_set_dmagic(value);
  // @@protoc_insertion_point(field_set:github.nkibler7.osrswikiscraper.NpcInfo.dmagic)
}
inline ::int32_t NpcInfo::_internal_dmagic() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.dmagic_;
}
inline void NpcInfo::_internal_set_dmagic(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.dmagic_ = value;
}

// int32 drange = 20;
inline void NpcInfo::clear_drange() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.drange_ = 0;
}
inline ::int32_t NpcInfo::drange() const {
  // @@protoc_insertion_point(field_get:github.nkibler7.osrswikiscraper.NpcInfo.drange)
  return _internal_drange();
}
inline void NpcInfo::set_drange(::int32_t value) {
  _internal_set_drange(value);
  // @@protoc_insertion_point(field_set:github.nkibler7.osrswikiscraper.NpcInfo.drange)
}
inline ::int32_t NpcInfo::_internal_drange() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.drange_;
}
inline void NpcInfo::_internal_set_drange(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.drange_ = value;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace osrswikiscraper
}  // namespace nkibler7
}  // namespace github


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_npc_5finfos_2eproto_2epb_2eh
