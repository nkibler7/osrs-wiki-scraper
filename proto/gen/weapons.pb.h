// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: weapons.proto
// Protobuf C++ Version: 4.25.1

#ifndef GOOGLE_PROTOBUF_INCLUDED_weapons_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_weapons_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4025000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4025001 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/map.h"  // IWYU pragma: export
#include "google/protobuf/map_entry.h"
#include "google/protobuf/map_field_inl.h"
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
#include "stat_bonuses.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_weapons_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_weapons_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_weapons_2eproto;
namespace github {
namespace nkibler7 {
namespace osrswikiscraper {
class CombatOption;
struct CombatOptionDefaultTypeInternal;
extern CombatOptionDefaultTypeInternal _CombatOption_default_instance_;
class CombatOption_Modifiers;
struct CombatOption_ModifiersDefaultTypeInternal;
extern CombatOption_ModifiersDefaultTypeInternal _CombatOption_Modifiers_default_instance_;
class MagicCombatOption;
struct MagicCombatOptionDefaultTypeInternal;
extern MagicCombatOptionDefaultTypeInternal _MagicCombatOption_default_instance_;
class MeleeCombatOption;
struct MeleeCombatOptionDefaultTypeInternal;
extern MeleeCombatOptionDefaultTypeInternal _MeleeCombatOption_default_instance_;
class RangedCombatOption;
struct RangedCombatOptionDefaultTypeInternal;
extern RangedCombatOptionDefaultTypeInternal _RangedCombatOption_default_instance_;
class Weapon;
struct WeaponDefaultTypeInternal;
extern WeaponDefaultTypeInternal _Weapon_default_instance_;
class Weapons;
struct WeaponsDefaultTypeInternal;
extern WeaponsDefaultTypeInternal _Weapons_default_instance_;
class Weapons_WeaponsEntry_DoNotUse;
struct Weapons_WeaponsEntry_DoNotUseDefaultTypeInternal;
extern Weapons_WeaponsEntry_DoNotUseDefaultTypeInternal _Weapons_WeaponsEntry_DoNotUse_default_instance_;
}  // namespace osrswikiscraper
}  // namespace nkibler7
}  // namespace github
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace github {
namespace nkibler7 {
namespace osrswikiscraper {
enum MeleeCombatOption_MeleeAttackStyle : int {
  MeleeCombatOption_MeleeAttackStyle_MELEE_ATTACK_STYLE_UNSPECIFIED = 0,
  MeleeCombatOption_MeleeAttackStyle_MELEE_ATTACK_STYLE_ACCURATE = 1,
  MeleeCombatOption_MeleeAttackStyle_MELEE_ATTACK_STYLE_AGGRESSIVE = 2,
  MeleeCombatOption_MeleeAttackStyle_MELEE_ATTACK_STYLE_DEFENSIVE = 3,
  MeleeCombatOption_MeleeAttackStyle_MELEE_ATTACK_STYLE_CONTROLLED = 4,
  MeleeCombatOption_MeleeAttackStyle_MeleeCombatOption_MeleeAttackStyle_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  MeleeCombatOption_MeleeAttackStyle_MeleeCombatOption_MeleeAttackStyle_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool MeleeCombatOption_MeleeAttackStyle_IsValid(int value);
extern const uint32_t MeleeCombatOption_MeleeAttackStyle_internal_data_[];
constexpr MeleeCombatOption_MeleeAttackStyle MeleeCombatOption_MeleeAttackStyle_MeleeAttackStyle_MIN = static_cast<MeleeCombatOption_MeleeAttackStyle>(0);
constexpr MeleeCombatOption_MeleeAttackStyle MeleeCombatOption_MeleeAttackStyle_MeleeAttackStyle_MAX = static_cast<MeleeCombatOption_MeleeAttackStyle>(4);
constexpr int MeleeCombatOption_MeleeAttackStyle_MeleeAttackStyle_ARRAYSIZE = 4 + 1;
const ::google::protobuf::EnumDescriptor*
MeleeCombatOption_MeleeAttackStyle_descriptor();
template <typename T>
const std::string& MeleeCombatOption_MeleeAttackStyle_Name(T value) {
  static_assert(std::is_same<T, MeleeCombatOption_MeleeAttackStyle>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to MeleeAttackStyle_Name().");
  return MeleeCombatOption_MeleeAttackStyle_Name(static_cast<MeleeCombatOption_MeleeAttackStyle>(value));
}
template <>
inline const std::string& MeleeCombatOption_MeleeAttackStyle_Name(MeleeCombatOption_MeleeAttackStyle value) {
  return ::google::protobuf::internal::NameOfDenseEnum<MeleeCombatOption_MeleeAttackStyle_descriptor,
                                                 0, 4>(
      static_cast<int>(value));
}
inline bool MeleeCombatOption_MeleeAttackStyle_Parse(absl::string_view name, MeleeCombatOption_MeleeAttackStyle* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MeleeCombatOption_MeleeAttackStyle>(
      MeleeCombatOption_MeleeAttackStyle_descriptor(), name, value);
}
enum MeleeCombatOption_MeleeAttackType : int {
  MeleeCombatOption_MeleeAttackType_MELEE_ATTACK_TYPE_UNSPECIFIED = 0,
  MeleeCombatOption_MeleeAttackType_MELEE_ATTACK_TYPE_STAB = 1,
  MeleeCombatOption_MeleeAttackType_MELEE_ATTACK_TYPE_SLASH = 2,
  MeleeCombatOption_MeleeAttackType_MELEE_ATTACK_TYPE_CRUSH = 3,
  MeleeCombatOption_MeleeAttackType_MeleeCombatOption_MeleeAttackType_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  MeleeCombatOption_MeleeAttackType_MeleeCombatOption_MeleeAttackType_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool MeleeCombatOption_MeleeAttackType_IsValid(int value);
extern const uint32_t MeleeCombatOption_MeleeAttackType_internal_data_[];
constexpr MeleeCombatOption_MeleeAttackType MeleeCombatOption_MeleeAttackType_MeleeAttackType_MIN = static_cast<MeleeCombatOption_MeleeAttackType>(0);
constexpr MeleeCombatOption_MeleeAttackType MeleeCombatOption_MeleeAttackType_MeleeAttackType_MAX = static_cast<MeleeCombatOption_MeleeAttackType>(3);
constexpr int MeleeCombatOption_MeleeAttackType_MeleeAttackType_ARRAYSIZE = 3 + 1;
const ::google::protobuf::EnumDescriptor*
MeleeCombatOption_MeleeAttackType_descriptor();
template <typename T>
const std::string& MeleeCombatOption_MeleeAttackType_Name(T value) {
  static_assert(std::is_same<T, MeleeCombatOption_MeleeAttackType>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to MeleeAttackType_Name().");
  return MeleeCombatOption_MeleeAttackType_Name(static_cast<MeleeCombatOption_MeleeAttackType>(value));
}
template <>
inline const std::string& MeleeCombatOption_MeleeAttackType_Name(MeleeCombatOption_MeleeAttackType value) {
  return ::google::protobuf::internal::NameOfDenseEnum<MeleeCombatOption_MeleeAttackType_descriptor,
                                                 0, 3>(
      static_cast<int>(value));
}
inline bool MeleeCombatOption_MeleeAttackType_Parse(absl::string_view name, MeleeCombatOption_MeleeAttackType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MeleeCombatOption_MeleeAttackType>(
      MeleeCombatOption_MeleeAttackType_descriptor(), name, value);
}
enum RangedCombatOption_RangedAttackStyle : int {
  RangedCombatOption_RangedAttackStyle_RANGED_ATTACK_STYLE_UNSPECIFIED = 0,
  RangedCombatOption_RangedAttackStyle_RANGED_ATTACK_STYLE_ACCURATE = 1,
  RangedCombatOption_RangedAttackStyle_RANGED_ATTACK_STYLE_RAPID = 2,
  RangedCombatOption_RangedAttackStyle_RANGED_ATTACK_STYLE_LONGRANGE = 3,
  RangedCombatOption_RangedAttackStyle_RangedCombatOption_RangedAttackStyle_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  RangedCombatOption_RangedAttackStyle_RangedCombatOption_RangedAttackStyle_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool RangedCombatOption_RangedAttackStyle_IsValid(int value);
extern const uint32_t RangedCombatOption_RangedAttackStyle_internal_data_[];
constexpr RangedCombatOption_RangedAttackStyle RangedCombatOption_RangedAttackStyle_RangedAttackStyle_MIN = static_cast<RangedCombatOption_RangedAttackStyle>(0);
constexpr RangedCombatOption_RangedAttackStyle RangedCombatOption_RangedAttackStyle_RangedAttackStyle_MAX = static_cast<RangedCombatOption_RangedAttackStyle>(3);
constexpr int RangedCombatOption_RangedAttackStyle_RangedAttackStyle_ARRAYSIZE = 3 + 1;
const ::google::protobuf::EnumDescriptor*
RangedCombatOption_RangedAttackStyle_descriptor();
template <typename T>
const std::string& RangedCombatOption_RangedAttackStyle_Name(T value) {
  static_assert(std::is_same<T, RangedCombatOption_RangedAttackStyle>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to RangedAttackStyle_Name().");
  return RangedCombatOption_RangedAttackStyle_Name(static_cast<RangedCombatOption_RangedAttackStyle>(value));
}
template <>
inline const std::string& RangedCombatOption_RangedAttackStyle_Name(RangedCombatOption_RangedAttackStyle value) {
  return ::google::protobuf::internal::NameOfDenseEnum<RangedCombatOption_RangedAttackStyle_descriptor,
                                                 0, 3>(
      static_cast<int>(value));
}
inline bool RangedCombatOption_RangedAttackStyle_Parse(absl::string_view name, RangedCombatOption_RangedAttackStyle* value) {
  return ::google::protobuf::internal::ParseNamedEnum<RangedCombatOption_RangedAttackStyle>(
      RangedCombatOption_RangedAttackStyle_descriptor(), name, value);
}
enum MagicCombatOption_MagicAttackStyle : int {
  MagicCombatOption_MagicAttackStyle_MAGIC_ATTACK_STYLE_UNSPECIFIED = 0,
  MagicCombatOption_MagicAttackStyle_MAGIC_ATTACK_STYLE_AUTOCAST = 1,
  MagicCombatOption_MagicAttackStyle_MAGIC_ATTACK_STYLE_DEFENSIVE_AUTOCAST = 2,
  MagicCombatOption_MagicAttackStyle_MAGIC_ATTACK_STYLE_ACCURATE = 3,
  MagicCombatOption_MagicAttackStyle_MAGIC_ATTACK_STYLE_LONGRANGE = 4,
  MagicCombatOption_MagicAttackStyle_MAGIC_ATTACK_STYLE_DEFENSIVE = 5,
  MagicCombatOption_MagicAttackStyle_MagicCombatOption_MagicAttackStyle_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  MagicCombatOption_MagicAttackStyle_MagicCombatOption_MagicAttackStyle_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool MagicCombatOption_MagicAttackStyle_IsValid(int value);
extern const uint32_t MagicCombatOption_MagicAttackStyle_internal_data_[];
constexpr MagicCombatOption_MagicAttackStyle MagicCombatOption_MagicAttackStyle_MagicAttackStyle_MIN = static_cast<MagicCombatOption_MagicAttackStyle>(0);
constexpr MagicCombatOption_MagicAttackStyle MagicCombatOption_MagicAttackStyle_MagicAttackStyle_MAX = static_cast<MagicCombatOption_MagicAttackStyle>(5);
constexpr int MagicCombatOption_MagicAttackStyle_MagicAttackStyle_ARRAYSIZE = 5 + 1;
const ::google::protobuf::EnumDescriptor*
MagicCombatOption_MagicAttackStyle_descriptor();
template <typename T>
const std::string& MagicCombatOption_MagicAttackStyle_Name(T value) {
  static_assert(std::is_same<T, MagicCombatOption_MagicAttackStyle>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to MagicAttackStyle_Name().");
  return MagicCombatOption_MagicAttackStyle_Name(static_cast<MagicCombatOption_MagicAttackStyle>(value));
}
template <>
inline const std::string& MagicCombatOption_MagicAttackStyle_Name(MagicCombatOption_MagicAttackStyle value) {
  return ::google::protobuf::internal::NameOfDenseEnum<MagicCombatOption_MagicAttackStyle_descriptor,
                                                 0, 5>(
      static_cast<int>(value));
}
inline bool MagicCombatOption_MagicAttackStyle_Parse(absl::string_view name, MagicCombatOption_MagicAttackStyle* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MagicCombatOption_MagicAttackStyle>(
      MagicCombatOption_MagicAttackStyle_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class RangedCombatOption final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:github.nkibler7.osrswikiscraper.RangedCombatOption) */ {
 public:
  inline RangedCombatOption() : RangedCombatOption(nullptr) {}
  ~RangedCombatOption() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR RangedCombatOption(::google::protobuf::internal::ConstantInitialized);

  inline RangedCombatOption(const RangedCombatOption& from)
      : RangedCombatOption(nullptr, from) {}
  RangedCombatOption(RangedCombatOption&& from) noexcept
    : RangedCombatOption() {
    *this = ::std::move(from);
  }

  inline RangedCombatOption& operator=(const RangedCombatOption& from) {
    CopyFrom(from);
    return *this;
  }
  inline RangedCombatOption& operator=(RangedCombatOption&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RangedCombatOption& default_instance() {
    return *internal_default_instance();
  }
  static inline const RangedCombatOption* internal_default_instance() {
    return reinterpret_cast<const RangedCombatOption*>(
               &_RangedCombatOption_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(RangedCombatOption& a, RangedCombatOption& b) {
    a.Swap(&b);
  }
  inline void Swap(RangedCombatOption* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RangedCombatOption* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RangedCombatOption* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RangedCombatOption>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const RangedCombatOption& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const RangedCombatOption& from) {
    RangedCombatOption::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(RangedCombatOption* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "github.nkibler7.osrswikiscraper.RangedCombatOption";
  }
  protected:
  explicit RangedCombatOption(::google::protobuf::Arena* arena);
  RangedCombatOption(::google::protobuf::Arena* arena, const RangedCombatOption& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  using RangedAttackStyle = RangedCombatOption_RangedAttackStyle;
  static constexpr RangedAttackStyle RANGED_ATTACK_STYLE_UNSPECIFIED = RangedCombatOption_RangedAttackStyle_RANGED_ATTACK_STYLE_UNSPECIFIED;
  static constexpr RangedAttackStyle RANGED_ATTACK_STYLE_ACCURATE = RangedCombatOption_RangedAttackStyle_RANGED_ATTACK_STYLE_ACCURATE;
  static constexpr RangedAttackStyle RANGED_ATTACK_STYLE_RAPID = RangedCombatOption_RangedAttackStyle_RANGED_ATTACK_STYLE_RAPID;
  static constexpr RangedAttackStyle RANGED_ATTACK_STYLE_LONGRANGE = RangedCombatOption_RangedAttackStyle_RANGED_ATTACK_STYLE_LONGRANGE;
  static inline bool RangedAttackStyle_IsValid(int value) {
    return RangedCombatOption_RangedAttackStyle_IsValid(value);
  }
  static constexpr RangedAttackStyle RangedAttackStyle_MIN = RangedCombatOption_RangedAttackStyle_RangedAttackStyle_MIN;
  static constexpr RangedAttackStyle RangedAttackStyle_MAX = RangedCombatOption_RangedAttackStyle_RangedAttackStyle_MAX;
  static constexpr int RangedAttackStyle_ARRAYSIZE = RangedCombatOption_RangedAttackStyle_RangedAttackStyle_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* RangedAttackStyle_descriptor() {
    return RangedCombatOption_RangedAttackStyle_descriptor();
  }
  template <typename T>
  static inline const std::string& RangedAttackStyle_Name(T value) {
    return RangedCombatOption_RangedAttackStyle_Name(value);
  }
  static inline bool RangedAttackStyle_Parse(absl::string_view name, RangedAttackStyle* value) {
    return RangedCombatOption_RangedAttackStyle_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kAttackStyleFieldNumber = 1,
  };
  // .github.nkibler7.osrswikiscraper.RangedCombatOption.RangedAttackStyle attack_style = 1;
  void clear_attack_style() ;
  ::github::nkibler7::osrswikiscraper::RangedCombatOption_RangedAttackStyle attack_style() const;
  void set_attack_style(::github::nkibler7::osrswikiscraper::RangedCombatOption_RangedAttackStyle value);

  private:
  ::github::nkibler7::osrswikiscraper::RangedCombatOption_RangedAttackStyle _internal_attack_style() const;
  void _internal_set_attack_style(::github::nkibler7::osrswikiscraper::RangedCombatOption_RangedAttackStyle value);

  public:
  // @@protoc_insertion_point(class_scope:github.nkibler7.osrswikiscraper.RangedCombatOption)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    int attack_style_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_weapons_2eproto;
};// -------------------------------------------------------------------

class MeleeCombatOption final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:github.nkibler7.osrswikiscraper.MeleeCombatOption) */ {
 public:
  inline MeleeCombatOption() : MeleeCombatOption(nullptr) {}
  ~MeleeCombatOption() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR MeleeCombatOption(::google::protobuf::internal::ConstantInitialized);

  inline MeleeCombatOption(const MeleeCombatOption& from)
      : MeleeCombatOption(nullptr, from) {}
  MeleeCombatOption(MeleeCombatOption&& from) noexcept
    : MeleeCombatOption() {
    *this = ::std::move(from);
  }

  inline MeleeCombatOption& operator=(const MeleeCombatOption& from) {
    CopyFrom(from);
    return *this;
  }
  inline MeleeCombatOption& operator=(MeleeCombatOption&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MeleeCombatOption& default_instance() {
    return *internal_default_instance();
  }
  static inline const MeleeCombatOption* internal_default_instance() {
    return reinterpret_cast<const MeleeCombatOption*>(
               &_MeleeCombatOption_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(MeleeCombatOption& a, MeleeCombatOption& b) {
    a.Swap(&b);
  }
  inline void Swap(MeleeCombatOption* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MeleeCombatOption* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MeleeCombatOption* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MeleeCombatOption>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const MeleeCombatOption& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const MeleeCombatOption& from) {
    MeleeCombatOption::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(MeleeCombatOption* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "github.nkibler7.osrswikiscraper.MeleeCombatOption";
  }
  protected:
  explicit MeleeCombatOption(::google::protobuf::Arena* arena);
  MeleeCombatOption(::google::protobuf::Arena* arena, const MeleeCombatOption& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  using MeleeAttackStyle = MeleeCombatOption_MeleeAttackStyle;
  static constexpr MeleeAttackStyle MELEE_ATTACK_STYLE_UNSPECIFIED = MeleeCombatOption_MeleeAttackStyle_MELEE_ATTACK_STYLE_UNSPECIFIED;
  static constexpr MeleeAttackStyle MELEE_ATTACK_STYLE_ACCURATE = MeleeCombatOption_MeleeAttackStyle_MELEE_ATTACK_STYLE_ACCURATE;
  static constexpr MeleeAttackStyle MELEE_ATTACK_STYLE_AGGRESSIVE = MeleeCombatOption_MeleeAttackStyle_MELEE_ATTACK_STYLE_AGGRESSIVE;
  static constexpr MeleeAttackStyle MELEE_ATTACK_STYLE_DEFENSIVE = MeleeCombatOption_MeleeAttackStyle_MELEE_ATTACK_STYLE_DEFENSIVE;
  static constexpr MeleeAttackStyle MELEE_ATTACK_STYLE_CONTROLLED = MeleeCombatOption_MeleeAttackStyle_MELEE_ATTACK_STYLE_CONTROLLED;
  static inline bool MeleeAttackStyle_IsValid(int value) {
    return MeleeCombatOption_MeleeAttackStyle_IsValid(value);
  }
  static constexpr MeleeAttackStyle MeleeAttackStyle_MIN = MeleeCombatOption_MeleeAttackStyle_MeleeAttackStyle_MIN;
  static constexpr MeleeAttackStyle MeleeAttackStyle_MAX = MeleeCombatOption_MeleeAttackStyle_MeleeAttackStyle_MAX;
  static constexpr int MeleeAttackStyle_ARRAYSIZE = MeleeCombatOption_MeleeAttackStyle_MeleeAttackStyle_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* MeleeAttackStyle_descriptor() {
    return MeleeCombatOption_MeleeAttackStyle_descriptor();
  }
  template <typename T>
  static inline const std::string& MeleeAttackStyle_Name(T value) {
    return MeleeCombatOption_MeleeAttackStyle_Name(value);
  }
  static inline bool MeleeAttackStyle_Parse(absl::string_view name, MeleeAttackStyle* value) {
    return MeleeCombatOption_MeleeAttackStyle_Parse(name, value);
  }

  using MeleeAttackType = MeleeCombatOption_MeleeAttackType;
  static constexpr MeleeAttackType MELEE_ATTACK_TYPE_UNSPECIFIED = MeleeCombatOption_MeleeAttackType_MELEE_ATTACK_TYPE_UNSPECIFIED;
  static constexpr MeleeAttackType MELEE_ATTACK_TYPE_STAB = MeleeCombatOption_MeleeAttackType_MELEE_ATTACK_TYPE_STAB;
  static constexpr MeleeAttackType MELEE_ATTACK_TYPE_SLASH = MeleeCombatOption_MeleeAttackType_MELEE_ATTACK_TYPE_SLASH;
  static constexpr MeleeAttackType MELEE_ATTACK_TYPE_CRUSH = MeleeCombatOption_MeleeAttackType_MELEE_ATTACK_TYPE_CRUSH;
  static inline bool MeleeAttackType_IsValid(int value) {
    return MeleeCombatOption_MeleeAttackType_IsValid(value);
  }
  static constexpr MeleeAttackType MeleeAttackType_MIN = MeleeCombatOption_MeleeAttackType_MeleeAttackType_MIN;
  static constexpr MeleeAttackType MeleeAttackType_MAX = MeleeCombatOption_MeleeAttackType_MeleeAttackType_MAX;
  static constexpr int MeleeAttackType_ARRAYSIZE = MeleeCombatOption_MeleeAttackType_MeleeAttackType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* MeleeAttackType_descriptor() {
    return MeleeCombatOption_MeleeAttackType_descriptor();
  }
  template <typename T>
  static inline const std::string& MeleeAttackType_Name(T value) {
    return MeleeCombatOption_MeleeAttackType_Name(value);
  }
  static inline bool MeleeAttackType_Parse(absl::string_view name, MeleeAttackType* value) {
    return MeleeCombatOption_MeleeAttackType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kAttackStyleFieldNumber = 1,
    kAttackTypeFieldNumber = 2,
  };
  // .github.nkibler7.osrswikiscraper.MeleeCombatOption.MeleeAttackStyle attack_style = 1;
  void clear_attack_style() ;
  ::github::nkibler7::osrswikiscraper::MeleeCombatOption_MeleeAttackStyle attack_style() const;
  void set_attack_style(::github::nkibler7::osrswikiscraper::MeleeCombatOption_MeleeAttackStyle value);

  private:
  ::github::nkibler7::osrswikiscraper::MeleeCombatOption_MeleeAttackStyle _internal_attack_style() const;
  void _internal_set_attack_style(::github::nkibler7::osrswikiscraper::MeleeCombatOption_MeleeAttackStyle value);

  public:
  // .github.nkibler7.osrswikiscraper.MeleeCombatOption.MeleeAttackType attack_type = 2;
  void clear_attack_type() ;
  ::github::nkibler7::osrswikiscraper::MeleeCombatOption_MeleeAttackType attack_type() const;
  void set_attack_type(::github::nkibler7::osrswikiscraper::MeleeCombatOption_MeleeAttackType value);

  private:
  ::github::nkibler7::osrswikiscraper::MeleeCombatOption_MeleeAttackType _internal_attack_type() const;
  void _internal_set_attack_type(::github::nkibler7::osrswikiscraper::MeleeCombatOption_MeleeAttackType value);

  public:
  // @@protoc_insertion_point(class_scope:github.nkibler7.osrswikiscraper.MeleeCombatOption)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    int attack_style_;
    int attack_type_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_weapons_2eproto;
};// -------------------------------------------------------------------

class MagicCombatOption final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:github.nkibler7.osrswikiscraper.MagicCombatOption) */ {
 public:
  inline MagicCombatOption() : MagicCombatOption(nullptr) {}
  ~MagicCombatOption() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR MagicCombatOption(::google::protobuf::internal::ConstantInitialized);

  inline MagicCombatOption(const MagicCombatOption& from)
      : MagicCombatOption(nullptr, from) {}
  MagicCombatOption(MagicCombatOption&& from) noexcept
    : MagicCombatOption() {
    *this = ::std::move(from);
  }

  inline MagicCombatOption& operator=(const MagicCombatOption& from) {
    CopyFrom(from);
    return *this;
  }
  inline MagicCombatOption& operator=(MagicCombatOption&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MagicCombatOption& default_instance() {
    return *internal_default_instance();
  }
  static inline const MagicCombatOption* internal_default_instance() {
    return reinterpret_cast<const MagicCombatOption*>(
               &_MagicCombatOption_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(MagicCombatOption& a, MagicCombatOption& b) {
    a.Swap(&b);
  }
  inline void Swap(MagicCombatOption* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MagicCombatOption* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MagicCombatOption* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MagicCombatOption>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const MagicCombatOption& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const MagicCombatOption& from) {
    MagicCombatOption::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(MagicCombatOption* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "github.nkibler7.osrswikiscraper.MagicCombatOption";
  }
  protected:
  explicit MagicCombatOption(::google::protobuf::Arena* arena);
  MagicCombatOption(::google::protobuf::Arena* arena, const MagicCombatOption& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  using MagicAttackStyle = MagicCombatOption_MagicAttackStyle;
  static constexpr MagicAttackStyle MAGIC_ATTACK_STYLE_UNSPECIFIED = MagicCombatOption_MagicAttackStyle_MAGIC_ATTACK_STYLE_UNSPECIFIED;
  static constexpr MagicAttackStyle MAGIC_ATTACK_STYLE_AUTOCAST = MagicCombatOption_MagicAttackStyle_MAGIC_ATTACK_STYLE_AUTOCAST;
  static constexpr MagicAttackStyle MAGIC_ATTACK_STYLE_DEFENSIVE_AUTOCAST = MagicCombatOption_MagicAttackStyle_MAGIC_ATTACK_STYLE_DEFENSIVE_AUTOCAST;
  static constexpr MagicAttackStyle MAGIC_ATTACK_STYLE_ACCURATE = MagicCombatOption_MagicAttackStyle_MAGIC_ATTACK_STYLE_ACCURATE;
  static constexpr MagicAttackStyle MAGIC_ATTACK_STYLE_LONGRANGE = MagicCombatOption_MagicAttackStyle_MAGIC_ATTACK_STYLE_LONGRANGE;
  static constexpr MagicAttackStyle MAGIC_ATTACK_STYLE_DEFENSIVE = MagicCombatOption_MagicAttackStyle_MAGIC_ATTACK_STYLE_DEFENSIVE;
  static inline bool MagicAttackStyle_IsValid(int value) {
    return MagicCombatOption_MagicAttackStyle_IsValid(value);
  }
  static constexpr MagicAttackStyle MagicAttackStyle_MIN = MagicCombatOption_MagicAttackStyle_MagicAttackStyle_MIN;
  static constexpr MagicAttackStyle MagicAttackStyle_MAX = MagicCombatOption_MagicAttackStyle_MagicAttackStyle_MAX;
  static constexpr int MagicAttackStyle_ARRAYSIZE = MagicCombatOption_MagicAttackStyle_MagicAttackStyle_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* MagicAttackStyle_descriptor() {
    return MagicCombatOption_MagicAttackStyle_descriptor();
  }
  template <typename T>
  static inline const std::string& MagicAttackStyle_Name(T value) {
    return MagicCombatOption_MagicAttackStyle_Name(value);
  }
  static inline bool MagicAttackStyle_Parse(absl::string_view name, MagicAttackStyle* value) {
    return MagicCombatOption_MagicAttackStyle_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kAttackStyleFieldNumber = 1,
  };
  // .github.nkibler7.osrswikiscraper.MagicCombatOption.MagicAttackStyle attack_style = 1;
  void clear_attack_style() ;
  ::github::nkibler7::osrswikiscraper::MagicCombatOption_MagicAttackStyle attack_style() const;
  void set_attack_style(::github::nkibler7::osrswikiscraper::MagicCombatOption_MagicAttackStyle value);

  private:
  ::github::nkibler7::osrswikiscraper::MagicCombatOption_MagicAttackStyle _internal_attack_style() const;
  void _internal_set_attack_style(::github::nkibler7::osrswikiscraper::MagicCombatOption_MagicAttackStyle value);

  public:
  // @@protoc_insertion_point(class_scope:github.nkibler7.osrswikiscraper.MagicCombatOption)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    int attack_style_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_weapons_2eproto;
};// -------------------------------------------------------------------

class CombatOption_Modifiers final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:github.nkibler7.osrswikiscraper.CombatOption.Modifiers) */ {
 public:
  inline CombatOption_Modifiers() : CombatOption_Modifiers(nullptr) {}
  ~CombatOption_Modifiers() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR CombatOption_Modifiers(::google::protobuf::internal::ConstantInitialized);

  inline CombatOption_Modifiers(const CombatOption_Modifiers& from)
      : CombatOption_Modifiers(nullptr, from) {}
  CombatOption_Modifiers(CombatOption_Modifiers&& from) noexcept
    : CombatOption_Modifiers() {
    *this = ::std::move(from);
  }

  inline CombatOption_Modifiers& operator=(const CombatOption_Modifiers& from) {
    CopyFrom(from);
    return *this;
  }
  inline CombatOption_Modifiers& operator=(CombatOption_Modifiers&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CombatOption_Modifiers& default_instance() {
    return *internal_default_instance();
  }
  static inline const CombatOption_Modifiers* internal_default_instance() {
    return reinterpret_cast<const CombatOption_Modifiers*>(
               &_CombatOption_Modifiers_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(CombatOption_Modifiers& a, CombatOption_Modifiers& b) {
    a.Swap(&b);
  }
  inline void Swap(CombatOption_Modifiers* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CombatOption_Modifiers* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CombatOption_Modifiers* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CombatOption_Modifiers>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const CombatOption_Modifiers& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const CombatOption_Modifiers& from) {
    CombatOption_Modifiers::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(CombatOption_Modifiers* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "github.nkibler7.osrswikiscraper.CombatOption.Modifiers";
  }
  protected:
  explicit CombatOption_Modifiers(::google::protobuf::Arena* arena);
  CombatOption_Modifiers(::google::protobuf::Arena* arena, const CombatOption_Modifiers& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAttackModifierFieldNumber = 1,
    kStrengthModifierFieldNumber = 2,
    kDefenceModifierFieldNumber = 3,
    kRangedModifierFieldNumber = 4,
    kMagicModifierFieldNumber = 5,
    kAttackSpeedModifierFieldNumber = 6,
    kAttackRangeModifierFieldNumber = 7,
  };
  // int32 attack_modifier = 1;
  void clear_attack_modifier() ;
  ::int32_t attack_modifier() const;
  void set_attack_modifier(::int32_t value);

  private:
  ::int32_t _internal_attack_modifier() const;
  void _internal_set_attack_modifier(::int32_t value);

  public:
  // int32 strength_modifier = 2;
  void clear_strength_modifier() ;
  ::int32_t strength_modifier() const;
  void set_strength_modifier(::int32_t value);

  private:
  ::int32_t _internal_strength_modifier() const;
  void _internal_set_strength_modifier(::int32_t value);

  public:
  // int32 defence_modifier = 3;
  void clear_defence_modifier() ;
  ::int32_t defence_modifier() const;
  void set_defence_modifier(::int32_t value);

  private:
  ::int32_t _internal_defence_modifier() const;
  void _internal_set_defence_modifier(::int32_t value);

  public:
  // int32 ranged_modifier = 4;
  void clear_ranged_modifier() ;
  ::int32_t ranged_modifier() const;
  void set_ranged_modifier(::int32_t value);

  private:
  ::int32_t _internal_ranged_modifier() const;
  void _internal_set_ranged_modifier(::int32_t value);

  public:
  // int32 magic_modifier = 5;
  void clear_magic_modifier() ;
  ::int32_t magic_modifier() const;
  void set_magic_modifier(::int32_t value);

  private:
  ::int32_t _internal_magic_modifier() const;
  void _internal_set_magic_modifier(::int32_t value);

  public:
  // int32 attack_speed_modifier = 6;
  void clear_attack_speed_modifier() ;
  ::int32_t attack_speed_modifier() const;
  void set_attack_speed_modifier(::int32_t value);

  private:
  ::int32_t _internal_attack_speed_modifier() const;
  void _internal_set_attack_speed_modifier(::int32_t value);

  public:
  // int32 attack_range_modifier = 7;
  void clear_attack_range_modifier() ;
  ::int32_t attack_range_modifier() const;
  void set_attack_range_modifier(::int32_t value);

  private:
  ::int32_t _internal_attack_range_modifier() const;
  void _internal_set_attack_range_modifier(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:github.nkibler7.osrswikiscraper.CombatOption.Modifiers)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 7, 0,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::int32_t attack_modifier_;
    ::int32_t strength_modifier_;
    ::int32_t defence_modifier_;
    ::int32_t ranged_modifier_;
    ::int32_t magic_modifier_;
    ::int32_t attack_speed_modifier_;
    ::int32_t attack_range_modifier_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_weapons_2eproto;
};// -------------------------------------------------------------------

class CombatOption final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:github.nkibler7.osrswikiscraper.CombatOption) */ {
 public:
  inline CombatOption() : CombatOption(nullptr) {}
  ~CombatOption() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR CombatOption(::google::protobuf::internal::ConstantInitialized);

  inline CombatOption(const CombatOption& from)
      : CombatOption(nullptr, from) {}
  CombatOption(CombatOption&& from) noexcept
    : CombatOption() {
    *this = ::std::move(from);
  }

  inline CombatOption& operator=(const CombatOption& from) {
    CopyFrom(from);
    return *this;
  }
  inline CombatOption& operator=(CombatOption&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CombatOption& default_instance() {
    return *internal_default_instance();
  }
  enum CombatTypeCase {
    kMelee = 3,
    kRanged = 4,
    kMagic = 5,
    COMBAT_TYPE_NOT_SET = 0,
  };

  static inline const CombatOption* internal_default_instance() {
    return reinterpret_cast<const CombatOption*>(
               &_CombatOption_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(CombatOption& a, CombatOption& b) {
    a.Swap(&b);
  }
  inline void Swap(CombatOption* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CombatOption* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CombatOption* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CombatOption>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const CombatOption& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const CombatOption& from) {
    CombatOption::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(CombatOption* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "github.nkibler7.osrswikiscraper.CombatOption";
  }
  protected:
  explicit CombatOption(::google::protobuf::Arena* arena);
  CombatOption(::google::protobuf::Arena* arena, const CombatOption& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  using Modifiers = CombatOption_Modifiers;

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kModifiersFieldNumber = 2,
    kMeleeFieldNumber = 3,
    kRangedFieldNumber = 4,
    kMagicFieldNumber = 5,
  };
  // string name = 1;
  void clear_name() ;
  const std::string& name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* value);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // .github.nkibler7.osrswikiscraper.CombatOption.Modifiers modifiers = 2;
  bool has_modifiers() const;
  void clear_modifiers() ;
  const ::github::nkibler7::osrswikiscraper::CombatOption_Modifiers& modifiers() const;
  PROTOBUF_NODISCARD ::github::nkibler7::osrswikiscraper::CombatOption_Modifiers* release_modifiers();
  ::github::nkibler7::osrswikiscraper::CombatOption_Modifiers* mutable_modifiers();
  void set_allocated_modifiers(::github::nkibler7::osrswikiscraper::CombatOption_Modifiers* value);
  void unsafe_arena_set_allocated_modifiers(::github::nkibler7::osrswikiscraper::CombatOption_Modifiers* value);
  ::github::nkibler7::osrswikiscraper::CombatOption_Modifiers* unsafe_arena_release_modifiers();

  private:
  const ::github::nkibler7::osrswikiscraper::CombatOption_Modifiers& _internal_modifiers() const;
  ::github::nkibler7::osrswikiscraper::CombatOption_Modifiers* _internal_mutable_modifiers();

  public:
  // .github.nkibler7.osrswikiscraper.MeleeCombatOption melee = 3;
  bool has_melee() const;
  private:
  bool _internal_has_melee() const;

  public:
  void clear_melee() ;
  const ::github::nkibler7::osrswikiscraper::MeleeCombatOption& melee() const;
  PROTOBUF_NODISCARD ::github::nkibler7::osrswikiscraper::MeleeCombatOption* release_melee();
  ::github::nkibler7::osrswikiscraper::MeleeCombatOption* mutable_melee();
  void set_allocated_melee(::github::nkibler7::osrswikiscraper::MeleeCombatOption* value);
  void unsafe_arena_set_allocated_melee(::github::nkibler7::osrswikiscraper::MeleeCombatOption* value);
  ::github::nkibler7::osrswikiscraper::MeleeCombatOption* unsafe_arena_release_melee();

  private:
  const ::github::nkibler7::osrswikiscraper::MeleeCombatOption& _internal_melee() const;
  ::github::nkibler7::osrswikiscraper::MeleeCombatOption* _internal_mutable_melee();

  public:
  // .github.nkibler7.osrswikiscraper.RangedCombatOption ranged = 4;
  bool has_ranged() const;
  private:
  bool _internal_has_ranged() const;

  public:
  void clear_ranged() ;
  const ::github::nkibler7::osrswikiscraper::RangedCombatOption& ranged() const;
  PROTOBUF_NODISCARD ::github::nkibler7::osrswikiscraper::RangedCombatOption* release_ranged();
  ::github::nkibler7::osrswikiscraper::RangedCombatOption* mutable_ranged();
  void set_allocated_ranged(::github::nkibler7::osrswikiscraper::RangedCombatOption* value);
  void unsafe_arena_set_allocated_ranged(::github::nkibler7::osrswikiscraper::RangedCombatOption* value);
  ::github::nkibler7::osrswikiscraper::RangedCombatOption* unsafe_arena_release_ranged();

  private:
  const ::github::nkibler7::osrswikiscraper::RangedCombatOption& _internal_ranged() const;
  ::github::nkibler7::osrswikiscraper::RangedCombatOption* _internal_mutable_ranged();

  public:
  // .github.nkibler7.osrswikiscraper.MagicCombatOption magic = 5;
  bool has_magic() const;
  private:
  bool _internal_has_magic() const;

  public:
  void clear_magic() ;
  const ::github::nkibler7::osrswikiscraper::MagicCombatOption& magic() const;
  PROTOBUF_NODISCARD ::github::nkibler7::osrswikiscraper::MagicCombatOption* release_magic();
  ::github::nkibler7::osrswikiscraper::MagicCombatOption* mutable_magic();
  void set_allocated_magic(::github::nkibler7::osrswikiscraper::MagicCombatOption* value);
  void unsafe_arena_set_allocated_magic(::github::nkibler7::osrswikiscraper::MagicCombatOption* value);
  ::github::nkibler7::osrswikiscraper::MagicCombatOption* unsafe_arena_release_magic();

  private:
  const ::github::nkibler7::osrswikiscraper::MagicCombatOption& _internal_magic() const;
  ::github::nkibler7::osrswikiscraper::MagicCombatOption* _internal_mutable_magic();

  public:
  void clear_combat_type();
  CombatTypeCase combat_type_case() const;
  // @@protoc_insertion_point(class_scope:github.nkibler7.osrswikiscraper.CombatOption)
 private:
  class _Internal;
  void set_has_melee();
  void set_has_ranged();
  void set_has_magic();

  inline bool has_combat_type() const;
  inline void clear_has_combat_type();

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 5, 4,
      57, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr name_;
    ::github::nkibler7::osrswikiscraper::CombatOption_Modifiers* modifiers_;
    union CombatTypeUnion {
      constexpr CombatTypeUnion() : _constinit_{} {}
        ::google::protobuf::internal::ConstantInitialized _constinit_;
      ::github::nkibler7::osrswikiscraper::MeleeCombatOption* melee_;
      ::github::nkibler7::osrswikiscraper::RangedCombatOption* ranged_;
      ::github::nkibler7::osrswikiscraper::MagicCombatOption* magic_;
    } combat_type_;
    ::uint32_t _oneof_case_[1];

    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_weapons_2eproto;
};// -------------------------------------------------------------------

class Weapon final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:github.nkibler7.osrswikiscraper.Weapon) */ {
 public:
  inline Weapon() : Weapon(nullptr) {}
  ~Weapon() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Weapon(::google::protobuf::internal::ConstantInitialized);

  inline Weapon(const Weapon& from)
      : Weapon(nullptr, from) {}
  Weapon(Weapon&& from) noexcept
    : Weapon() {
    *this = ::std::move(from);
  }

  inline Weapon& operator=(const Weapon& from) {
    CopyFrom(from);
    return *this;
  }
  inline Weapon& operator=(Weapon&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Weapon& default_instance() {
    return *internal_default_instance();
  }
  static inline const Weapon* internal_default_instance() {
    return reinterpret_cast<const Weapon*>(
               &_Weapon_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Weapon& a, Weapon& b) {
    a.Swap(&b);
  }
  inline void Swap(Weapon* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Weapon* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Weapon* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Weapon>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Weapon& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const Weapon& from) {
    Weapon::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Weapon* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "github.nkibler7.osrswikiscraper.Weapon";
  }
  protected:
  explicit Weapon(::google::protobuf::Arena* arena);
  Weapon(::google::protobuf::Arena* arena, const Weapon& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCombatOptionsFieldNumber = 6,
    kNameFieldNumber = 1,
    kStatBonusesFieldNumber = 5,
    kIdFieldNumber = 2,
    kBaseAttackSpeedFieldNumber = 3,
    kBaseAttackRangeFieldNumber = 4,
  };
  // repeated .github.nkibler7.osrswikiscraper.CombatOption combat_options = 6;
  int combat_options_size() const;
  private:
  int _internal_combat_options_size() const;

  public:
  void clear_combat_options() ;
  ::github::nkibler7::osrswikiscraper::CombatOption* mutable_combat_options(int index);
  ::google::protobuf::RepeatedPtrField< ::github::nkibler7::osrswikiscraper::CombatOption >*
      mutable_combat_options();
  private:
  const ::google::protobuf::RepeatedPtrField<::github::nkibler7::osrswikiscraper::CombatOption>& _internal_combat_options() const;
  ::google::protobuf::RepeatedPtrField<::github::nkibler7::osrswikiscraper::CombatOption>* _internal_mutable_combat_options();
  public:
  const ::github::nkibler7::osrswikiscraper::CombatOption& combat_options(int index) const;
  ::github::nkibler7::osrswikiscraper::CombatOption* add_combat_options();
  const ::google::protobuf::RepeatedPtrField< ::github::nkibler7::osrswikiscraper::CombatOption >&
      combat_options() const;
  // string name = 1;
  void clear_name() ;
  const std::string& name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* value);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // .github.nkibler7.osrswikiscraper.StatBonuses stat_bonuses = 5;
  bool has_stat_bonuses() const;
  void clear_stat_bonuses() ;
  const ::github::nkibler7::osrswikiscraper::StatBonuses& stat_bonuses() const;
  PROTOBUF_NODISCARD ::github::nkibler7::osrswikiscraper::StatBonuses* release_stat_bonuses();
  ::github::nkibler7::osrswikiscraper::StatBonuses* mutable_stat_bonuses();
  void set_allocated_stat_bonuses(::github::nkibler7::osrswikiscraper::StatBonuses* value);
  void unsafe_arena_set_allocated_stat_bonuses(::github::nkibler7::osrswikiscraper::StatBonuses* value);
  ::github::nkibler7::osrswikiscraper::StatBonuses* unsafe_arena_release_stat_bonuses();

  private:
  const ::github::nkibler7::osrswikiscraper::StatBonuses& _internal_stat_bonuses() const;
  ::github::nkibler7::osrswikiscraper::StatBonuses* _internal_mutable_stat_bonuses();

  public:
  // int32 id = 2;
  void clear_id() ;
  ::int32_t id() const;
  void set_id(::int32_t value);

  private:
  ::int32_t _internal_id() const;
  void _internal_set_id(::int32_t value);

  public:
  // int32 base_attack_speed = 3;
  void clear_base_attack_speed() ;
  ::int32_t base_attack_speed() const;
  void set_base_attack_speed(::int32_t value);

  private:
  ::int32_t _internal_base_attack_speed() const;
  void _internal_set_base_attack_speed(::int32_t value);

  public:
  // int32 base_attack_range = 4;
  void clear_base_attack_range() ;
  ::int32_t base_attack_range() const;
  void set_base_attack_range(::int32_t value);

  private:
  ::int32_t _internal_base_attack_range() const;
  void _internal_set_base_attack_range(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:github.nkibler7.osrswikiscraper.Weapon)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 6, 2,
      51, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField< ::github::nkibler7::osrswikiscraper::CombatOption > combat_options_;
    ::google::protobuf::internal::ArenaStringPtr name_;
    ::github::nkibler7::osrswikiscraper::StatBonuses* stat_bonuses_;
    ::int32_t id_;
    ::int32_t base_attack_speed_;
    ::int32_t base_attack_range_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_weapons_2eproto;
};// -------------------------------------------------------------------

class Weapons_WeaponsEntry_DoNotUse final
    : public ::google::protobuf::internal::MapEntry<
          Weapons_WeaponsEntry_DoNotUse, ::int32_t, ::github::nkibler7::osrswikiscraper::Weapon,
          ::google::protobuf::internal::WireFormatLite::TYPE_INT32,
          ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE> {
 public:
  using SuperType = ::google::protobuf::internal::MapEntry<
      Weapons_WeaponsEntry_DoNotUse, ::int32_t, ::github::nkibler7::osrswikiscraper::Weapon,
      ::google::protobuf::internal::WireFormatLite::TYPE_INT32,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE>;
  Weapons_WeaponsEntry_DoNotUse();
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Weapons_WeaponsEntry_DoNotUse(
      ::google::protobuf::internal::ConstantInitialized);
  explicit Weapons_WeaponsEntry_DoNotUse(::google::protobuf::Arena* arena);
  static const Weapons_WeaponsEntry_DoNotUse* internal_default_instance() {
    return reinterpret_cast<const Weapons_WeaponsEntry_DoNotUse*>(
        &_Weapons_WeaponsEntry_DoNotUse_default_instance_);
  }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(void*) { return true; }
  ::google::protobuf::Metadata GetMetadata() const final;
  friend struct ::TableStruct_weapons_2eproto;
};
// -------------------------------------------------------------------

class Weapons final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:github.nkibler7.osrswikiscraper.Weapons) */ {
 public:
  inline Weapons() : Weapons(nullptr) {}
  ~Weapons() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Weapons(::google::protobuf::internal::ConstantInitialized);

  inline Weapons(const Weapons& from)
      : Weapons(nullptr, from) {}
  Weapons(Weapons&& from) noexcept
    : Weapons() {
    *this = ::std::move(from);
  }

  inline Weapons& operator=(const Weapons& from) {
    CopyFrom(from);
    return *this;
  }
  inline Weapons& operator=(Weapons&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Weapons& default_instance() {
    return *internal_default_instance();
  }
  static inline const Weapons* internal_default_instance() {
    return reinterpret_cast<const Weapons*>(
               &_Weapons_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Weapons& a, Weapons& b) {
    a.Swap(&b);
  }
  inline void Swap(Weapons* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Weapons* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Weapons* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Weapons>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Weapons& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const Weapons& from) {
    Weapons::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Weapons* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "github.nkibler7.osrswikiscraper.Weapons";
  }
  protected:
  explicit Weapons(::google::protobuf::Arena* arena);
  Weapons(::google::protobuf::Arena* arena, const Weapons& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kWeaponsFieldNumber = 1,
  };
  // map<int32, .github.nkibler7.osrswikiscraper.Weapon> weapons = 1;
  int weapons_size() const;
  private:
  int _internal_weapons_size() const;

  public:
  void clear_weapons() ;
  const ::google::protobuf::Map<::int32_t, ::github::nkibler7::osrswikiscraper::Weapon>& weapons() const;
  ::google::protobuf::Map<::int32_t, ::github::nkibler7::osrswikiscraper::Weapon>* mutable_weapons();

  private:
  const ::google::protobuf::Map<::int32_t, ::github::nkibler7::osrswikiscraper::Weapon>& _internal_weapons() const;
  ::google::protobuf::Map<::int32_t, ::github::nkibler7::osrswikiscraper::Weapon>* _internal_mutable_weapons();

  public:
  // @@protoc_insertion_point(class_scope:github.nkibler7.osrswikiscraper.Weapons)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 2,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::MapField<Weapons_WeaponsEntry_DoNotUse, ::int32_t, ::github::nkibler7::osrswikiscraper::Weapon,
                      ::google::protobuf::internal::WireFormatLite::TYPE_INT32,
                      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE>
        weapons_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_weapons_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// Weapons

// map<int32, .github.nkibler7.osrswikiscraper.Weapon> weapons = 1;
inline int Weapons::_internal_weapons_size() const {
  return _internal_weapons().size();
}
inline int Weapons::weapons_size() const {
  return _internal_weapons_size();
}
inline void Weapons::clear_weapons() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.weapons_.Clear();
}
inline const ::google::protobuf::Map<::int32_t, ::github::nkibler7::osrswikiscraper::Weapon>& Weapons::_internal_weapons() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.weapons_.GetMap();
}
inline const ::google::protobuf::Map<::int32_t, ::github::nkibler7::osrswikiscraper::Weapon>& Weapons::weapons() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_map:github.nkibler7.osrswikiscraper.Weapons.weapons)
  return _internal_weapons();
}
inline ::google::protobuf::Map<::int32_t, ::github::nkibler7::osrswikiscraper::Weapon>* Weapons::_internal_mutable_weapons() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _impl_.weapons_.MutableMap();
}
inline ::google::protobuf::Map<::int32_t, ::github::nkibler7::osrswikiscraper::Weapon>* Weapons::mutable_weapons() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_map:github.nkibler7.osrswikiscraper.Weapons.weapons)
  return _internal_mutable_weapons();
}

// -------------------------------------------------------------------

// Weapon

// string name = 1;
inline void Weapon::clear_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.name_.ClearToEmpty();
}
inline const std::string& Weapon::name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:github.nkibler7.osrswikiscraper.Weapon.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Weapon::set_name(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:github.nkibler7.osrswikiscraper.Weapon.name)
}
inline std::string* Weapon::mutable_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:github.nkibler7.osrswikiscraper.Weapon.name)
  return _s;
}
inline const std::string& Weapon::_internal_name() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.name_.Get();
}
inline void Weapon::_internal_set_name(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.name_.Set(value, GetArena());
}
inline std::string* Weapon::_internal_mutable_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.name_.Mutable( GetArena());
}
inline std::string* Weapon::release_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:github.nkibler7.osrswikiscraper.Weapon.name)
  return _impl_.name_.Release();
}
inline void Weapon::set_allocated_name(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.name_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.name_.IsDefault()) {
          _impl_.name_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:github.nkibler7.osrswikiscraper.Weapon.name)
}

// int32 id = 2;
inline void Weapon::clear_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.id_ = 0;
}
inline ::int32_t Weapon::id() const {
  // @@protoc_insertion_point(field_get:github.nkibler7.osrswikiscraper.Weapon.id)
  return _internal_id();
}
inline void Weapon::set_id(::int32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:github.nkibler7.osrswikiscraper.Weapon.id)
}
inline ::int32_t Weapon::_internal_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.id_;
}
inline void Weapon::_internal_set_id(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.id_ = value;
}

// int32 base_attack_speed = 3;
inline void Weapon::clear_base_attack_speed() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.base_attack_speed_ = 0;
}
inline ::int32_t Weapon::base_attack_speed() const {
  // @@protoc_insertion_point(field_get:github.nkibler7.osrswikiscraper.Weapon.base_attack_speed)
  return _internal_base_attack_speed();
}
inline void Weapon::set_base_attack_speed(::int32_t value) {
  _internal_set_base_attack_speed(value);
  // @@protoc_insertion_point(field_set:github.nkibler7.osrswikiscraper.Weapon.base_attack_speed)
}
inline ::int32_t Weapon::_internal_base_attack_speed() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.base_attack_speed_;
}
inline void Weapon::_internal_set_base_attack_speed(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.base_attack_speed_ = value;
}

// int32 base_attack_range = 4;
inline void Weapon::clear_base_attack_range() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.base_attack_range_ = 0;
}
inline ::int32_t Weapon::base_attack_range() const {
  // @@protoc_insertion_point(field_get:github.nkibler7.osrswikiscraper.Weapon.base_attack_range)
  return _internal_base_attack_range();
}
inline void Weapon::set_base_attack_range(::int32_t value) {
  _internal_set_base_attack_range(value);
  // @@protoc_insertion_point(field_set:github.nkibler7.osrswikiscraper.Weapon.base_attack_range)
}
inline ::int32_t Weapon::_internal_base_attack_range() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.base_attack_range_;
}
inline void Weapon::_internal_set_base_attack_range(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.base_attack_range_ = value;
}

// .github.nkibler7.osrswikiscraper.StatBonuses stat_bonuses = 5;
inline bool Weapon::has_stat_bonuses() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.stat_bonuses_ != nullptr);
  return value;
}
inline const ::github::nkibler7::osrswikiscraper::StatBonuses& Weapon::_internal_stat_bonuses() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::github::nkibler7::osrswikiscraper::StatBonuses* p = _impl_.stat_bonuses_;
  return p != nullptr ? *p : reinterpret_cast<const ::github::nkibler7::osrswikiscraper::StatBonuses&>(::github::nkibler7::osrswikiscraper::_StatBonuses_default_instance_);
}
inline const ::github::nkibler7::osrswikiscraper::StatBonuses& Weapon::stat_bonuses() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:github.nkibler7.osrswikiscraper.Weapon.stat_bonuses)
  return _internal_stat_bonuses();
}
inline void Weapon::unsafe_arena_set_allocated_stat_bonuses(::github::nkibler7::osrswikiscraper::StatBonuses* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.stat_bonuses_);
  }
  _impl_.stat_bonuses_ = reinterpret_cast<::github::nkibler7::osrswikiscraper::StatBonuses*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:github.nkibler7.osrswikiscraper.Weapon.stat_bonuses)
}
inline ::github::nkibler7::osrswikiscraper::StatBonuses* Weapon::release_stat_bonuses() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::github::nkibler7::osrswikiscraper::StatBonuses* released = _impl_.stat_bonuses_;
  _impl_.stat_bonuses_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::github::nkibler7::osrswikiscraper::StatBonuses* Weapon::unsafe_arena_release_stat_bonuses() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:github.nkibler7.osrswikiscraper.Weapon.stat_bonuses)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::github::nkibler7::osrswikiscraper::StatBonuses* temp = _impl_.stat_bonuses_;
  _impl_.stat_bonuses_ = nullptr;
  return temp;
}
inline ::github::nkibler7::osrswikiscraper::StatBonuses* Weapon::_internal_mutable_stat_bonuses() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.stat_bonuses_ == nullptr) {
    auto* p = CreateMaybeMessage<::github::nkibler7::osrswikiscraper::StatBonuses>(GetArena());
    _impl_.stat_bonuses_ = reinterpret_cast<::github::nkibler7::osrswikiscraper::StatBonuses*>(p);
  }
  return _impl_.stat_bonuses_;
}
inline ::github::nkibler7::osrswikiscraper::StatBonuses* Weapon::mutable_stat_bonuses() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::github::nkibler7::osrswikiscraper::StatBonuses* _msg = _internal_mutable_stat_bonuses();
  // @@protoc_insertion_point(field_mutable:github.nkibler7.osrswikiscraper.Weapon.stat_bonuses)
  return _msg;
}
inline void Weapon::set_allocated_stat_bonuses(::github::nkibler7::osrswikiscraper::StatBonuses* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.stat_bonuses_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.stat_bonuses_ = reinterpret_cast<::github::nkibler7::osrswikiscraper::StatBonuses*>(value);
  // @@protoc_insertion_point(field_set_allocated:github.nkibler7.osrswikiscraper.Weapon.stat_bonuses)
}

// repeated .github.nkibler7.osrswikiscraper.CombatOption combat_options = 6;
inline int Weapon::_internal_combat_options_size() const {
  return _internal_combat_options().size();
}
inline int Weapon::combat_options_size() const {
  return _internal_combat_options_size();
}
inline void Weapon::clear_combat_options() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.combat_options_.Clear();
}
inline ::github::nkibler7::osrswikiscraper::CombatOption* Weapon::mutable_combat_options(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:github.nkibler7.osrswikiscraper.Weapon.combat_options)
  return _internal_mutable_combat_options()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::github::nkibler7::osrswikiscraper::CombatOption>* Weapon::mutable_combat_options()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:github.nkibler7.osrswikiscraper.Weapon.combat_options)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_combat_options();
}
inline const ::github::nkibler7::osrswikiscraper::CombatOption& Weapon::combat_options(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:github.nkibler7.osrswikiscraper.Weapon.combat_options)
  return _internal_combat_options().Get(index);
}
inline ::github::nkibler7::osrswikiscraper::CombatOption* Weapon::add_combat_options() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::github::nkibler7::osrswikiscraper::CombatOption* _add = _internal_mutable_combat_options()->Add();
  // @@protoc_insertion_point(field_add:github.nkibler7.osrswikiscraper.Weapon.combat_options)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::github::nkibler7::osrswikiscraper::CombatOption>& Weapon::combat_options() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:github.nkibler7.osrswikiscraper.Weapon.combat_options)
  return _internal_combat_options();
}
inline const ::google::protobuf::RepeatedPtrField<::github::nkibler7::osrswikiscraper::CombatOption>&
Weapon::_internal_combat_options() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.combat_options_;
}
inline ::google::protobuf::RepeatedPtrField<::github::nkibler7::osrswikiscraper::CombatOption>*
Weapon::_internal_mutable_combat_options() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.combat_options_;
}

// -------------------------------------------------------------------

// CombatOption_Modifiers

// int32 attack_modifier = 1;
inline void CombatOption_Modifiers::clear_attack_modifier() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.attack_modifier_ = 0;
}
inline ::int32_t CombatOption_Modifiers::attack_modifier() const {
  // @@protoc_insertion_point(field_get:github.nkibler7.osrswikiscraper.CombatOption.Modifiers.attack_modifier)
  return _internal_attack_modifier();
}
inline void CombatOption_Modifiers::set_attack_modifier(::int32_t value) {
  _internal_set_attack_modifier(value);
  // @@protoc_insertion_point(field_set:github.nkibler7.osrswikiscraper.CombatOption.Modifiers.attack_modifier)
}
inline ::int32_t CombatOption_Modifiers::_internal_attack_modifier() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.attack_modifier_;
}
inline void CombatOption_Modifiers::_internal_set_attack_modifier(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.attack_modifier_ = value;
}

// int32 strength_modifier = 2;
inline void CombatOption_Modifiers::clear_strength_modifier() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.strength_modifier_ = 0;
}
inline ::int32_t CombatOption_Modifiers::strength_modifier() const {
  // @@protoc_insertion_point(field_get:github.nkibler7.osrswikiscraper.CombatOption.Modifiers.strength_modifier)
  return _internal_strength_modifier();
}
inline void CombatOption_Modifiers::set_strength_modifier(::int32_t value) {
  _internal_set_strength_modifier(value);
  // @@protoc_insertion_point(field_set:github.nkibler7.osrswikiscraper.CombatOption.Modifiers.strength_modifier)
}
inline ::int32_t CombatOption_Modifiers::_internal_strength_modifier() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.strength_modifier_;
}
inline void CombatOption_Modifiers::_internal_set_strength_modifier(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.strength_modifier_ = value;
}

// int32 defence_modifier = 3;
inline void CombatOption_Modifiers::clear_defence_modifier() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.defence_modifier_ = 0;
}
inline ::int32_t CombatOption_Modifiers::defence_modifier() const {
  // @@protoc_insertion_point(field_get:github.nkibler7.osrswikiscraper.CombatOption.Modifiers.defence_modifier)
  return _internal_defence_modifier();
}
inline void CombatOption_Modifiers::set_defence_modifier(::int32_t value) {
  _internal_set_defence_modifier(value);
  // @@protoc_insertion_point(field_set:github.nkibler7.osrswikiscraper.CombatOption.Modifiers.defence_modifier)
}
inline ::int32_t CombatOption_Modifiers::_internal_defence_modifier() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.defence_modifier_;
}
inline void CombatOption_Modifiers::_internal_set_defence_modifier(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.defence_modifier_ = value;
}

// int32 ranged_modifier = 4;
inline void CombatOption_Modifiers::clear_ranged_modifier() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.ranged_modifier_ = 0;
}
inline ::int32_t CombatOption_Modifiers::ranged_modifier() const {
  // @@protoc_insertion_point(field_get:github.nkibler7.osrswikiscraper.CombatOption.Modifiers.ranged_modifier)
  return _internal_ranged_modifier();
}
inline void CombatOption_Modifiers::set_ranged_modifier(::int32_t value) {
  _internal_set_ranged_modifier(value);
  // @@protoc_insertion_point(field_set:github.nkibler7.osrswikiscraper.CombatOption.Modifiers.ranged_modifier)
}
inline ::int32_t CombatOption_Modifiers::_internal_ranged_modifier() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.ranged_modifier_;
}
inline void CombatOption_Modifiers::_internal_set_ranged_modifier(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.ranged_modifier_ = value;
}

// int32 magic_modifier = 5;
inline void CombatOption_Modifiers::clear_magic_modifier() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.magic_modifier_ = 0;
}
inline ::int32_t CombatOption_Modifiers::magic_modifier() const {
  // @@protoc_insertion_point(field_get:github.nkibler7.osrswikiscraper.CombatOption.Modifiers.magic_modifier)
  return _internal_magic_modifier();
}
inline void CombatOption_Modifiers::set_magic_modifier(::int32_t value) {
  _internal_set_magic_modifier(value);
  // @@protoc_insertion_point(field_set:github.nkibler7.osrswikiscraper.CombatOption.Modifiers.magic_modifier)
}
inline ::int32_t CombatOption_Modifiers::_internal_magic_modifier() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.magic_modifier_;
}
inline void CombatOption_Modifiers::_internal_set_magic_modifier(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.magic_modifier_ = value;
}

// int32 attack_speed_modifier = 6;
inline void CombatOption_Modifiers::clear_attack_speed_modifier() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.attack_speed_modifier_ = 0;
}
inline ::int32_t CombatOption_Modifiers::attack_speed_modifier() const {
  // @@protoc_insertion_point(field_get:github.nkibler7.osrswikiscraper.CombatOption.Modifiers.attack_speed_modifier)
  return _internal_attack_speed_modifier();
}
inline void CombatOption_Modifiers::set_attack_speed_modifier(::int32_t value) {
  _internal_set_attack_speed_modifier(value);
  // @@protoc_insertion_point(field_set:github.nkibler7.osrswikiscraper.CombatOption.Modifiers.attack_speed_modifier)
}
inline ::int32_t CombatOption_Modifiers::_internal_attack_speed_modifier() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.attack_speed_modifier_;
}
inline void CombatOption_Modifiers::_internal_set_attack_speed_modifier(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.attack_speed_modifier_ = value;
}

// int32 attack_range_modifier = 7;
inline void CombatOption_Modifiers::clear_attack_range_modifier() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.attack_range_modifier_ = 0;
}
inline ::int32_t CombatOption_Modifiers::attack_range_modifier() const {
  // @@protoc_insertion_point(field_get:github.nkibler7.osrswikiscraper.CombatOption.Modifiers.attack_range_modifier)
  return _internal_attack_range_modifier();
}
inline void CombatOption_Modifiers::set_attack_range_modifier(::int32_t value) {
  _internal_set_attack_range_modifier(value);
  // @@protoc_insertion_point(field_set:github.nkibler7.osrswikiscraper.CombatOption.Modifiers.attack_range_modifier)
}
inline ::int32_t CombatOption_Modifiers::_internal_attack_range_modifier() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.attack_range_modifier_;
}
inline void CombatOption_Modifiers::_internal_set_attack_range_modifier(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.attack_range_modifier_ = value;
}

// -------------------------------------------------------------------

// CombatOption

// string name = 1;
inline void CombatOption::clear_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.name_.ClearToEmpty();
}
inline const std::string& CombatOption::name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:github.nkibler7.osrswikiscraper.CombatOption.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void CombatOption::set_name(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:github.nkibler7.osrswikiscraper.CombatOption.name)
}
inline std::string* CombatOption::mutable_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:github.nkibler7.osrswikiscraper.CombatOption.name)
  return _s;
}
inline const std::string& CombatOption::_internal_name() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.name_.Get();
}
inline void CombatOption::_internal_set_name(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.name_.Set(value, GetArena());
}
inline std::string* CombatOption::_internal_mutable_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.name_.Mutable( GetArena());
}
inline std::string* CombatOption::release_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:github.nkibler7.osrswikiscraper.CombatOption.name)
  return _impl_.name_.Release();
}
inline void CombatOption::set_allocated_name(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.name_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.name_.IsDefault()) {
          _impl_.name_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:github.nkibler7.osrswikiscraper.CombatOption.name)
}

// .github.nkibler7.osrswikiscraper.CombatOption.Modifiers modifiers = 2;
inline bool CombatOption::has_modifiers() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.modifiers_ != nullptr);
  return value;
}
inline void CombatOption::clear_modifiers() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.modifiers_ != nullptr) _impl_.modifiers_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::github::nkibler7::osrswikiscraper::CombatOption_Modifiers& CombatOption::_internal_modifiers() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::github::nkibler7::osrswikiscraper::CombatOption_Modifiers* p = _impl_.modifiers_;
  return p != nullptr ? *p : reinterpret_cast<const ::github::nkibler7::osrswikiscraper::CombatOption_Modifiers&>(::github::nkibler7::osrswikiscraper::_CombatOption_Modifiers_default_instance_);
}
inline const ::github::nkibler7::osrswikiscraper::CombatOption_Modifiers& CombatOption::modifiers() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:github.nkibler7.osrswikiscraper.CombatOption.modifiers)
  return _internal_modifiers();
}
inline void CombatOption::unsafe_arena_set_allocated_modifiers(::github::nkibler7::osrswikiscraper::CombatOption_Modifiers* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.modifiers_);
  }
  _impl_.modifiers_ = reinterpret_cast<::github::nkibler7::osrswikiscraper::CombatOption_Modifiers*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:github.nkibler7.osrswikiscraper.CombatOption.modifiers)
}
inline ::github::nkibler7::osrswikiscraper::CombatOption_Modifiers* CombatOption::release_modifiers() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::github::nkibler7::osrswikiscraper::CombatOption_Modifiers* released = _impl_.modifiers_;
  _impl_.modifiers_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::github::nkibler7::osrswikiscraper::CombatOption_Modifiers* CombatOption::unsafe_arena_release_modifiers() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:github.nkibler7.osrswikiscraper.CombatOption.modifiers)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::github::nkibler7::osrswikiscraper::CombatOption_Modifiers* temp = _impl_.modifiers_;
  _impl_.modifiers_ = nullptr;
  return temp;
}
inline ::github::nkibler7::osrswikiscraper::CombatOption_Modifiers* CombatOption::_internal_mutable_modifiers() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.modifiers_ == nullptr) {
    auto* p = CreateMaybeMessage<::github::nkibler7::osrswikiscraper::CombatOption_Modifiers>(GetArena());
    _impl_.modifiers_ = reinterpret_cast<::github::nkibler7::osrswikiscraper::CombatOption_Modifiers*>(p);
  }
  return _impl_.modifiers_;
}
inline ::github::nkibler7::osrswikiscraper::CombatOption_Modifiers* CombatOption::mutable_modifiers() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::github::nkibler7::osrswikiscraper::CombatOption_Modifiers* _msg = _internal_mutable_modifiers();
  // @@protoc_insertion_point(field_mutable:github.nkibler7.osrswikiscraper.CombatOption.modifiers)
  return _msg;
}
inline void CombatOption::set_allocated_modifiers(::github::nkibler7::osrswikiscraper::CombatOption_Modifiers* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::github::nkibler7::osrswikiscraper::CombatOption_Modifiers*>(_impl_.modifiers_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::github::nkibler7::osrswikiscraper::CombatOption_Modifiers*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.modifiers_ = reinterpret_cast<::github::nkibler7::osrswikiscraper::CombatOption_Modifiers*>(value);
  // @@protoc_insertion_point(field_set_allocated:github.nkibler7.osrswikiscraper.CombatOption.modifiers)
}

// .github.nkibler7.osrswikiscraper.MeleeCombatOption melee = 3;
inline bool CombatOption::has_melee() const {
  return combat_type_case() == kMelee;
}
inline bool CombatOption::_internal_has_melee() const {
  return combat_type_case() == kMelee;
}
inline void CombatOption::set_has_melee() {
  _impl_._oneof_case_[0] = kMelee;
}
inline void CombatOption::clear_melee() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (combat_type_case() == kMelee) {
    if (GetArena() == nullptr) {
      delete _impl_.combat_type_.melee_;
    }
    clear_has_combat_type();
  }
}
inline ::github::nkibler7::osrswikiscraper::MeleeCombatOption* CombatOption::release_melee() {
  // @@protoc_insertion_point(field_release:github.nkibler7.osrswikiscraper.CombatOption.melee)
  if (combat_type_case() == kMelee) {
    clear_has_combat_type();
    auto* temp = _impl_.combat_type_.melee_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.combat_type_.melee_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::github::nkibler7::osrswikiscraper::MeleeCombatOption& CombatOption::_internal_melee() const {
  return combat_type_case() == kMelee ? *_impl_.combat_type_.melee_ : reinterpret_cast<::github::nkibler7::osrswikiscraper::MeleeCombatOption&>(::github::nkibler7::osrswikiscraper::_MeleeCombatOption_default_instance_);
}
inline const ::github::nkibler7::osrswikiscraper::MeleeCombatOption& CombatOption::melee() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:github.nkibler7.osrswikiscraper.CombatOption.melee)
  return _internal_melee();
}
inline ::github::nkibler7::osrswikiscraper::MeleeCombatOption* CombatOption::unsafe_arena_release_melee() {
  // @@protoc_insertion_point(field_unsafe_arena_release:github.nkibler7.osrswikiscraper.CombatOption.melee)
  if (combat_type_case() == kMelee) {
    clear_has_combat_type();
    auto* temp = _impl_.combat_type_.melee_;
    _impl_.combat_type_.melee_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void CombatOption::unsafe_arena_set_allocated_melee(::github::nkibler7::osrswikiscraper::MeleeCombatOption* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_combat_type();
  if (value) {
    set_has_melee();
    _impl_.combat_type_.melee_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:github.nkibler7.osrswikiscraper.CombatOption.melee)
}
inline ::github::nkibler7::osrswikiscraper::MeleeCombatOption* CombatOption::_internal_mutable_melee() {
  if (combat_type_case() != kMelee) {
    clear_combat_type();
    set_has_melee();
    _impl_.combat_type_.melee_ = CreateMaybeMessage<::github::nkibler7::osrswikiscraper::MeleeCombatOption>(GetArena());
  }
  return _impl_.combat_type_.melee_;
}
inline ::github::nkibler7::osrswikiscraper::MeleeCombatOption* CombatOption::mutable_melee() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::github::nkibler7::osrswikiscraper::MeleeCombatOption* _msg = _internal_mutable_melee();
  // @@protoc_insertion_point(field_mutable:github.nkibler7.osrswikiscraper.CombatOption.melee)
  return _msg;
}

// .github.nkibler7.osrswikiscraper.RangedCombatOption ranged = 4;
inline bool CombatOption::has_ranged() const {
  return combat_type_case() == kRanged;
}
inline bool CombatOption::_internal_has_ranged() const {
  return combat_type_case() == kRanged;
}
inline void CombatOption::set_has_ranged() {
  _impl_._oneof_case_[0] = kRanged;
}
inline void CombatOption::clear_ranged() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (combat_type_case() == kRanged) {
    if (GetArena() == nullptr) {
      delete _impl_.combat_type_.ranged_;
    }
    clear_has_combat_type();
  }
}
inline ::github::nkibler7::osrswikiscraper::RangedCombatOption* CombatOption::release_ranged() {
  // @@protoc_insertion_point(field_release:github.nkibler7.osrswikiscraper.CombatOption.ranged)
  if (combat_type_case() == kRanged) {
    clear_has_combat_type();
    auto* temp = _impl_.combat_type_.ranged_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.combat_type_.ranged_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::github::nkibler7::osrswikiscraper::RangedCombatOption& CombatOption::_internal_ranged() const {
  return combat_type_case() == kRanged ? *_impl_.combat_type_.ranged_ : reinterpret_cast<::github::nkibler7::osrswikiscraper::RangedCombatOption&>(::github::nkibler7::osrswikiscraper::_RangedCombatOption_default_instance_);
}
inline const ::github::nkibler7::osrswikiscraper::RangedCombatOption& CombatOption::ranged() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:github.nkibler7.osrswikiscraper.CombatOption.ranged)
  return _internal_ranged();
}
inline ::github::nkibler7::osrswikiscraper::RangedCombatOption* CombatOption::unsafe_arena_release_ranged() {
  // @@protoc_insertion_point(field_unsafe_arena_release:github.nkibler7.osrswikiscraper.CombatOption.ranged)
  if (combat_type_case() == kRanged) {
    clear_has_combat_type();
    auto* temp = _impl_.combat_type_.ranged_;
    _impl_.combat_type_.ranged_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void CombatOption::unsafe_arena_set_allocated_ranged(::github::nkibler7::osrswikiscraper::RangedCombatOption* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_combat_type();
  if (value) {
    set_has_ranged();
    _impl_.combat_type_.ranged_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:github.nkibler7.osrswikiscraper.CombatOption.ranged)
}
inline ::github::nkibler7::osrswikiscraper::RangedCombatOption* CombatOption::_internal_mutable_ranged() {
  if (combat_type_case() != kRanged) {
    clear_combat_type();
    set_has_ranged();
    _impl_.combat_type_.ranged_ = CreateMaybeMessage<::github::nkibler7::osrswikiscraper::RangedCombatOption>(GetArena());
  }
  return _impl_.combat_type_.ranged_;
}
inline ::github::nkibler7::osrswikiscraper::RangedCombatOption* CombatOption::mutable_ranged() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::github::nkibler7::osrswikiscraper::RangedCombatOption* _msg = _internal_mutable_ranged();
  // @@protoc_insertion_point(field_mutable:github.nkibler7.osrswikiscraper.CombatOption.ranged)
  return _msg;
}

// .github.nkibler7.osrswikiscraper.MagicCombatOption magic = 5;
inline bool CombatOption::has_magic() const {
  return combat_type_case() == kMagic;
}
inline bool CombatOption::_internal_has_magic() const {
  return combat_type_case() == kMagic;
}
inline void CombatOption::set_has_magic() {
  _impl_._oneof_case_[0] = kMagic;
}
inline void CombatOption::clear_magic() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (combat_type_case() == kMagic) {
    if (GetArena() == nullptr) {
      delete _impl_.combat_type_.magic_;
    }
    clear_has_combat_type();
  }
}
inline ::github::nkibler7::osrswikiscraper::MagicCombatOption* CombatOption::release_magic() {
  // @@protoc_insertion_point(field_release:github.nkibler7.osrswikiscraper.CombatOption.magic)
  if (combat_type_case() == kMagic) {
    clear_has_combat_type();
    auto* temp = _impl_.combat_type_.magic_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.combat_type_.magic_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::github::nkibler7::osrswikiscraper::MagicCombatOption& CombatOption::_internal_magic() const {
  return combat_type_case() == kMagic ? *_impl_.combat_type_.magic_ : reinterpret_cast<::github::nkibler7::osrswikiscraper::MagicCombatOption&>(::github::nkibler7::osrswikiscraper::_MagicCombatOption_default_instance_);
}
inline const ::github::nkibler7::osrswikiscraper::MagicCombatOption& CombatOption::magic() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:github.nkibler7.osrswikiscraper.CombatOption.magic)
  return _internal_magic();
}
inline ::github::nkibler7::osrswikiscraper::MagicCombatOption* CombatOption::unsafe_arena_release_magic() {
  // @@protoc_insertion_point(field_unsafe_arena_release:github.nkibler7.osrswikiscraper.CombatOption.magic)
  if (combat_type_case() == kMagic) {
    clear_has_combat_type();
    auto* temp = _impl_.combat_type_.magic_;
    _impl_.combat_type_.magic_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void CombatOption::unsafe_arena_set_allocated_magic(::github::nkibler7::osrswikiscraper::MagicCombatOption* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_combat_type();
  if (value) {
    set_has_magic();
    _impl_.combat_type_.magic_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:github.nkibler7.osrswikiscraper.CombatOption.magic)
}
inline ::github::nkibler7::osrswikiscraper::MagicCombatOption* CombatOption::_internal_mutable_magic() {
  if (combat_type_case() != kMagic) {
    clear_combat_type();
    set_has_magic();
    _impl_.combat_type_.magic_ = CreateMaybeMessage<::github::nkibler7::osrswikiscraper::MagicCombatOption>(GetArena());
  }
  return _impl_.combat_type_.magic_;
}
inline ::github::nkibler7::osrswikiscraper::MagicCombatOption* CombatOption::mutable_magic() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::github::nkibler7::osrswikiscraper::MagicCombatOption* _msg = _internal_mutable_magic();
  // @@protoc_insertion_point(field_mutable:github.nkibler7.osrswikiscraper.CombatOption.magic)
  return _msg;
}

inline bool CombatOption::has_combat_type() const {
  return combat_type_case() != COMBAT_TYPE_NOT_SET;
}
inline void CombatOption::clear_has_combat_type() {
  _impl_._oneof_case_[0] = COMBAT_TYPE_NOT_SET;
}
inline CombatOption::CombatTypeCase CombatOption::combat_type_case() const {
  return CombatOption::CombatTypeCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// MeleeCombatOption

// .github.nkibler7.osrswikiscraper.MeleeCombatOption.MeleeAttackStyle attack_style = 1;
inline void MeleeCombatOption::clear_attack_style() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.attack_style_ = 0;
}
inline ::github::nkibler7::osrswikiscraper::MeleeCombatOption_MeleeAttackStyle MeleeCombatOption::attack_style() const {
  // @@protoc_insertion_point(field_get:github.nkibler7.osrswikiscraper.MeleeCombatOption.attack_style)
  return _internal_attack_style();
}
inline void MeleeCombatOption::set_attack_style(::github::nkibler7::osrswikiscraper::MeleeCombatOption_MeleeAttackStyle value) {
  _internal_set_attack_style(value);
  // @@protoc_insertion_point(field_set:github.nkibler7.osrswikiscraper.MeleeCombatOption.attack_style)
}
inline ::github::nkibler7::osrswikiscraper::MeleeCombatOption_MeleeAttackStyle MeleeCombatOption::_internal_attack_style() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::github::nkibler7::osrswikiscraper::MeleeCombatOption_MeleeAttackStyle>(_impl_.attack_style_);
}
inline void MeleeCombatOption::_internal_set_attack_style(::github::nkibler7::osrswikiscraper::MeleeCombatOption_MeleeAttackStyle value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.attack_style_ = value;
}

// .github.nkibler7.osrswikiscraper.MeleeCombatOption.MeleeAttackType attack_type = 2;
inline void MeleeCombatOption::clear_attack_type() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.attack_type_ = 0;
}
inline ::github::nkibler7::osrswikiscraper::MeleeCombatOption_MeleeAttackType MeleeCombatOption::attack_type() const {
  // @@protoc_insertion_point(field_get:github.nkibler7.osrswikiscraper.MeleeCombatOption.attack_type)
  return _internal_attack_type();
}
inline void MeleeCombatOption::set_attack_type(::github::nkibler7::osrswikiscraper::MeleeCombatOption_MeleeAttackType value) {
  _internal_set_attack_type(value);
  // @@protoc_insertion_point(field_set:github.nkibler7.osrswikiscraper.MeleeCombatOption.attack_type)
}
inline ::github::nkibler7::osrswikiscraper::MeleeCombatOption_MeleeAttackType MeleeCombatOption::_internal_attack_type() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::github::nkibler7::osrswikiscraper::MeleeCombatOption_MeleeAttackType>(_impl_.attack_type_);
}
inline void MeleeCombatOption::_internal_set_attack_type(::github::nkibler7::osrswikiscraper::MeleeCombatOption_MeleeAttackType value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.attack_type_ = value;
}

// -------------------------------------------------------------------

// RangedCombatOption

// .github.nkibler7.osrswikiscraper.RangedCombatOption.RangedAttackStyle attack_style = 1;
inline void RangedCombatOption::clear_attack_style() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.attack_style_ = 0;
}
inline ::github::nkibler7::osrswikiscraper::RangedCombatOption_RangedAttackStyle RangedCombatOption::attack_style() const {
  // @@protoc_insertion_point(field_get:github.nkibler7.osrswikiscraper.RangedCombatOption.attack_style)
  return _internal_attack_style();
}
inline void RangedCombatOption::set_attack_style(::github::nkibler7::osrswikiscraper::RangedCombatOption_RangedAttackStyle value) {
  _internal_set_attack_style(value);
  // @@protoc_insertion_point(field_set:github.nkibler7.osrswikiscraper.RangedCombatOption.attack_style)
}
inline ::github::nkibler7::osrswikiscraper::RangedCombatOption_RangedAttackStyle RangedCombatOption::_internal_attack_style() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::github::nkibler7::osrswikiscraper::RangedCombatOption_RangedAttackStyle>(_impl_.attack_style_);
}
inline void RangedCombatOption::_internal_set_attack_style(::github::nkibler7::osrswikiscraper::RangedCombatOption_RangedAttackStyle value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.attack_style_ = value;
}

// -------------------------------------------------------------------

// MagicCombatOption

// .github.nkibler7.osrswikiscraper.MagicCombatOption.MagicAttackStyle attack_style = 1;
inline void MagicCombatOption::clear_attack_style() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.attack_style_ = 0;
}
inline ::github::nkibler7::osrswikiscraper::MagicCombatOption_MagicAttackStyle MagicCombatOption::attack_style() const {
  // @@protoc_insertion_point(field_get:github.nkibler7.osrswikiscraper.MagicCombatOption.attack_style)
  return _internal_attack_style();
}
inline void MagicCombatOption::set_attack_style(::github::nkibler7::osrswikiscraper::MagicCombatOption_MagicAttackStyle value) {
  _internal_set_attack_style(value);
  // @@protoc_insertion_point(field_set:github.nkibler7.osrswikiscraper.MagicCombatOption.attack_style)
}
inline ::github::nkibler7::osrswikiscraper::MagicCombatOption_MagicAttackStyle MagicCombatOption::_internal_attack_style() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::github::nkibler7::osrswikiscraper::MagicCombatOption_MagicAttackStyle>(_impl_.attack_style_);
}
inline void MagicCombatOption::_internal_set_attack_style(::github::nkibler7::osrswikiscraper::MagicCombatOption_MagicAttackStyle value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.attack_style_ = value;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace osrswikiscraper
}  // namespace nkibler7
}  // namespace github


namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::github::nkibler7::osrswikiscraper::MeleeCombatOption_MeleeAttackStyle> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::github::nkibler7::osrswikiscraper::MeleeCombatOption_MeleeAttackStyle>() {
  return ::github::nkibler7::osrswikiscraper::MeleeCombatOption_MeleeAttackStyle_descriptor();
}
template <>
struct is_proto_enum<::github::nkibler7::osrswikiscraper::MeleeCombatOption_MeleeAttackType> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::github::nkibler7::osrswikiscraper::MeleeCombatOption_MeleeAttackType>() {
  return ::github::nkibler7::osrswikiscraper::MeleeCombatOption_MeleeAttackType_descriptor();
}
template <>
struct is_proto_enum<::github::nkibler7::osrswikiscraper::RangedCombatOption_RangedAttackStyle> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::github::nkibler7::osrswikiscraper::RangedCombatOption_RangedAttackStyle>() {
  return ::github::nkibler7::osrswikiscraper::RangedCombatOption_RangedAttackStyle_descriptor();
}
template <>
struct is_proto_enum<::github::nkibler7::osrswikiscraper::MagicCombatOption_MagicAttackStyle> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::github::nkibler7::osrswikiscraper::MagicCombatOption_MagicAttackStyle>() {
  return ::github::nkibler7::osrswikiscraper::MagicCombatOption_MagicAttackStyle_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_weapons_2eproto_2epb_2eh
